
usb_msc_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f89c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  0800fa2c  0800fa2c  00010a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010428  08010428  0001207c  2**0
                  CONTENTS
  4 .ARM          00000008  08010428  08010428  00011428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010430  08010430  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010430  08010430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010434  08010434  00011434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010438  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001207c  2**0
                  CONTENTS
 10 .bss          00002fe0  20000080  20000080  00012080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003060  20003060  00012080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001977a  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000431c  00000000  00000000  0002b826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0002fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d57  00000000  00000000  00030ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253bb  00000000  00000000  000319f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d38d  00000000  00000000  00056db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c96a6  00000000  00000000  0007413f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d7e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cac  00000000  00000000  0013d828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001424d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa14 	.word	0x0800fa14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800fa14 	.word	0x0800fa14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96a 	b.w	8000b98 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	460c      	mov	r4, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14e      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008e8:	4694      	mov	ip, r2
 80008ea:	458c      	cmp	ip, r1
 80008ec:	4686      	mov	lr, r0
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	d962      	bls.n	80009ba <__udivmoddi4+0xde>
 80008f4:	b14a      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f6:	f1c2 0320 	rsb	r3, r2, #32
 80008fa:	4091      	lsls	r1, r2
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	fa0c fc02 	lsl.w	ip, ip, r2
 8000904:	4319      	orrs	r1, r3
 8000906:	fa00 fe02 	lsl.w	lr, r0, r2
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f f68c 	uxth.w	r6, ip
 8000912:	fbb1 f4f7 	udiv	r4, r1, r7
 8000916:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091a:	fb07 1114 	mls	r1, r7, r4, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb04 f106 	mul.w	r1, r4, r6
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000932:	f080 8112 	bcs.w	8000b5a <__udivmoddi4+0x27e>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 810f 	bls.w	8000b5a <__udivmoddi4+0x27e>
 800093c:	3c02      	subs	r4, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a59      	subs	r1, r3, r1
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb1 f0f7 	udiv	r0, r1, r7
 800094a:	fb07 1110 	mls	r1, r7, r0, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f606 	mul.w	r6, r0, r6
 8000956:	429e      	cmp	r6, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x94>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000962:	f080 80fc 	bcs.w	8000b5e <__udivmoddi4+0x282>
 8000966:	429e      	cmp	r6, r3
 8000968:	f240 80f9 	bls.w	8000b5e <__udivmoddi4+0x282>
 800096c:	4463      	add	r3, ip
 800096e:	3802      	subs	r0, #2
 8000970:	1b9b      	subs	r3, r3, r6
 8000972:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000976:	2100      	movs	r1, #0
 8000978:	b11d      	cbz	r5, 8000982 <__udivmoddi4+0xa6>
 800097a:	40d3      	lsrs	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e9c5 3200 	strd	r3, r2, [r5]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d905      	bls.n	8000996 <__udivmoddi4+0xba>
 800098a:	b10d      	cbz	r5, 8000990 <__udivmoddi4+0xb4>
 800098c:	e9c5 0100 	strd	r0, r1, [r5]
 8000990:	2100      	movs	r1, #0
 8000992:	4608      	mov	r0, r1
 8000994:	e7f5      	b.n	8000982 <__udivmoddi4+0xa6>
 8000996:	fab3 f183 	clz	r1, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d146      	bne.n	8000a2c <__udivmoddi4+0x150>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xcc>
 80009a2:	4290      	cmp	r0, r2
 80009a4:	f0c0 80f0 	bcc.w	8000b88 <__udivmoddi4+0x2ac>
 80009a8:	1a86      	subs	r6, r0, r2
 80009aa:	eb64 0303 	sbc.w	r3, r4, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0e6      	beq.n	8000982 <__udivmoddi4+0xa6>
 80009b4:	e9c5 6300 	strd	r6, r3, [r5]
 80009b8:	e7e3      	b.n	8000982 <__udivmoddi4+0xa6>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	f040 8090 	bne.w	8000ae0 <__udivmoddi4+0x204>
 80009c0:	eba1 040c 	sub.w	r4, r1, ip
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	2101      	movs	r1, #1
 80009ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb08 4416 	mls	r4, r8, r6, r4
 80009da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009de:	fb07 f006 	mul.w	r0, r7, r6
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x11c>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x11a>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	f200 80cd 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009f6:	4626      	mov	r6, r4
 80009f8:	1a1c      	subs	r4, r3, r0
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a02:	fb08 4410 	mls	r4, r8, r0, r4
 8000a06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0a:	fb00 f707 	mul.w	r7, r0, r7
 8000a0e:	429f      	cmp	r7, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x148>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x146>
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	f200 80b0 	bhi.w	8000b82 <__udivmoddi4+0x2a6>
 8000a22:	4620      	mov	r0, r4
 8000a24:	1bdb      	subs	r3, r3, r7
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	e7a5      	b.n	8000978 <__udivmoddi4+0x9c>
 8000a2c:	f1c1 0620 	rsb	r6, r1, #32
 8000a30:	408b      	lsls	r3, r1
 8000a32:	fa22 f706 	lsr.w	r7, r2, r6
 8000a36:	431f      	orrs	r7, r3
 8000a38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a40:	ea43 030c 	orr.w	r3, r3, ip
 8000a44:	40f4      	lsrs	r4, r6
 8000a46:	fa00 f801 	lsl.w	r8, r0, r1
 8000a4a:	0c38      	lsrs	r0, r7, #16
 8000a4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a50:	fbb4 fef0 	udiv	lr, r4, r0
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fb00 441e 	mls	r4, r0, lr, r4
 8000a5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a60:	fb0e f90c 	mul.w	r9, lr, ip
 8000a64:	45a1      	cmp	r9, r4
 8000a66:	fa02 f201 	lsl.w	r2, r2, r1
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x1a6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	f080 8084 	bcs.w	8000b7e <__udivmoddi4+0x2a2>
 8000a76:	45a1      	cmp	r9, r4
 8000a78:	f240 8081 	bls.w	8000b7e <__udivmoddi4+0x2a2>
 8000a7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	eba4 0409 	sub.w	r4, r4, r9
 8000a86:	fa1f f983 	uxth.w	r9, r3
 8000a8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x1d2>
 8000a9e:	193c      	adds	r4, r7, r4
 8000aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aa4:	d267      	bcs.n	8000b76 <__udivmoddi4+0x29a>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0x29a>
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	443c      	add	r4, r7
 8000aae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ab2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ab6:	eba4 040c 	sub.w	r4, r4, ip
 8000aba:	429c      	cmp	r4, r3
 8000abc:	46ce      	mov	lr, r9
 8000abe:	469c      	mov	ip, r3
 8000ac0:	d351      	bcc.n	8000b66 <__udivmoddi4+0x28a>
 8000ac2:	d04e      	beq.n	8000b62 <__udivmoddi4+0x286>
 8000ac4:	b155      	cbz	r5, 8000adc <__udivmoddi4+0x200>
 8000ac6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ace:	fa04 f606 	lsl.w	r6, r4, r6
 8000ad2:	40cb      	lsrs	r3, r1
 8000ad4:	431e      	orrs	r6, r3
 8000ad6:	40cc      	lsrs	r4, r1
 8000ad8:	e9c5 6400 	strd	r6, r4, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	e750      	b.n	8000982 <__udivmoddi4+0xa6>
 8000ae0:	f1c2 0320 	rsb	r3, r2, #32
 8000ae4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	fa24 f303 	lsr.w	r3, r4, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3110 	mls	r1, r8, r0, r3
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f107 	mul.w	r1, r0, r7
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x24c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b1e:	d22c      	bcs.n	8000b7a <__udivmoddi4+0x29e>
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d92a      	bls.n	8000b7a <__udivmoddi4+0x29e>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b30:	fb08 3311 	mls	r3, r8, r1, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb01 f307 	mul.w	r3, r1, r7
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x276>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b48:	d213      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d911      	bls.n	8000b72 <__udivmoddi4+0x296>
 8000b4e:	3902      	subs	r1, #2
 8000b50:	4464      	add	r4, ip
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	e739      	b.n	80009ce <__udivmoddi4+0xf2>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	e6f0      	b.n	8000940 <__udivmoddi4+0x64>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e706      	b.n	8000970 <__udivmoddi4+0x94>
 8000b62:	45c8      	cmp	r8, r9
 8000b64:	d2ae      	bcs.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7a8      	b.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b72:	4631      	mov	r1, r6
 8000b74:	e7ed      	b.n	8000b52 <__udivmoddi4+0x276>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e799      	b.n	8000aae <__udivmoddi4+0x1d2>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e7d4      	b.n	8000b28 <__udivmoddi4+0x24c>
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1a6>
 8000b82:	4463      	add	r3, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	e74d      	b.n	8000a24 <__udivmoddi4+0x148>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e70f      	b.n	80009b0 <__udivmoddi4+0xd4>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	e730      	b.n	80009f8 <__udivmoddi4+0x11c>
 8000b96:	bf00      	nop

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), 1000);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fb1d 	bl	80001e4 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <Send_Uart+0x28>)
 8000bb6:	f003 ffd7 	bl	8004b68 <HAL_UART_Transmit>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001d8 	.word	0x200001d8

08000bc8 <Mount_USB>:



void Mount_USB (void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	490a      	ldr	r1, [pc, #40]	@ (8000bf8 <Mount_USB+0x30>)
 8000bd0:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <Mount_USB+0x34>)
 8000bd2:	f00c fc39 	bl	800d448 <f_mount>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <Mount_USB+0x38>)
 8000bdc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <Mount_USB+0x38>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <Mount_USB+0x26>
 8000be6:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <Mount_USB+0x3c>)
 8000be8:	f7ff ffd8 	bl	8000b9c <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000bec:	e002      	b.n	8000bf4 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <Mount_USB+0x40>)
 8000bf0:	f7ff ffd4 	bl	8000b9c <Send_Uart>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000230 	.word	0x20000230
 8000bfc:	20000234 	.word	0x20000234
 8000c00:	200001c0 	.word	0x200001c0
 8000c04:	0800fa2c 	.word	0x0800fa2c
 8000c08:	0800fa4c 	.word	0x0800fa4c

08000c0c <Unmount_USB>:

void Unmount_USB (void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	490a      	ldr	r1, [pc, #40]	@ (8000c3c <Unmount_USB+0x30>)
 8000c14:	2000      	movs	r0, #0
 8000c16:	f00c fc17 	bl	800d448 <f_mount>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <Unmount_USB+0x34>)
 8000c20:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <Unmount_USB+0x34>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <Unmount_USB+0x26>
 8000c2a:	4806      	ldr	r0, [pc, #24]	@ (8000c44 <Unmount_USB+0x38>)
 8000c2c:	f7ff ffb6 	bl	8000b9c <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c30:	e002      	b.n	8000c38 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <Unmount_USB+0x3c>)
 8000c34:	f7ff ffb2 	bl	8000b9c <Send_Uart>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000230 	.word	0x20000230
 8000c40:	200001c0 	.word	0x200001c0
 8000c44:	0800fa6c 	.word	0x0800fa6c
 8000c48:	0800fa90 	.word	0x0800fa90

08000c4c <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09a      	sub	sp, #104	@ 0x68
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c54:	2014      	movs	r0, #20
 8000c56:	f00e fa2d 	bl	800f0b4 <malloc>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	667b      	str	r3, [r7, #100]	@ 0x64
    sprintf (path, "%s",pat);
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4944      	ldr	r1, [pc, #272]	@ (8000d74 <Scan_USB+0x128>)
 8000c62:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c64:	f00e fae4 	bl	800f230 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00d fa1e 	bl	800e0b0 <f_opendir>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b3f      	ldr	r3, [pc, #252]	@ (8000d78 <Scan_USB+0x12c>)
 8000c7a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d78 <Scan_USB+0x12c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d16e      	bne.n	8000d62 <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	493c      	ldr	r1, [pc, #240]	@ (8000d7c <Scan_USB+0x130>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00d fadf 	bl	800e24e <f_readdir>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b38      	ldr	r3, [pc, #224]	@ (8000d78 <Scan_USB+0x12c>)
 8000c96:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000c98:	4b37      	ldr	r3, [pc, #220]	@ (8000d78 <Scan_USB+0x12c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d15b      	bne.n	8000d58 <Scan_USB+0x10c>
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <Scan_USB+0x130>)
 8000ca2:	7e9b      	ldrb	r3, [r3, #26]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d057      	beq.n	8000d58 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000ca8:	4b34      	ldr	r3, [pc, #208]	@ (8000d7c <Scan_USB+0x130>)
 8000caa:	7b1b      	ldrb	r3, [r3, #12]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d03a      	beq.n	8000d2a <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cb4:	4932      	ldr	r1, [pc, #200]	@ (8000d80 <Scan_USB+0x134>)
 8000cb6:	4833      	ldr	r0, [pc, #204]	@ (8000d84 <Scan_USB+0x138>)
 8000cb8:	f7ff fa8a 	bl	80001d0 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d045      	beq.n	8000d4e <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000cc2:	492f      	ldr	r1, [pc, #188]	@ (8000d80 <Scan_USB+0x134>)
 8000cc4:	4830      	ldr	r0, [pc, #192]	@ (8000d88 <Scan_USB+0x13c>)
 8000cc6:	f7ff fa83 	bl	80001d0 <strcmp>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d040      	beq.n	8000d52 <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000cd0:	201e      	movs	r0, #30
 8000cd2:	f00e f9ef 	bl	800f0b4 <malloc>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000cda:	4a29      	ldr	r2, [pc, #164]	@ (8000d80 <Scan_USB+0x134>)
 8000cdc:	492b      	ldr	r1, [pc, #172]	@ (8000d8c <Scan_USB+0x140>)
 8000cde:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000ce0:	f00e faa6 	bl	800f230 <siprintf>
            	Send_Uart(buf);
 8000ce4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000ce6:	f7ff ff59 	bl	8000b9c <Send_Uart>
            	free(buf);
 8000cea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000cec:	f00e f9ea 	bl	800f0c4 <free>
                i = strlen(path);
 8000cf0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000cf2:	f7ff fa77 	bl	80001e4 <strlen>
 8000cf6:	65b8      	str	r0, [r7, #88]	@ 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000cf8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000cfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <Scan_USB+0x134>)
 8000d00:	4923      	ldr	r1, [pc, #140]	@ (8000d90 <Scan_USB+0x144>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00e fa94 	bl	800f230 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d08:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000d0a:	f7ff ff9f 	bl	8000c4c <Scan_USB>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <Scan_USB+0x12c>)
 8000d14:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <Scan_USB+0x12c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d11b      	bne.n	8000d56 <Scan_USB+0x10a>
                path[i] = 0;
 8000d1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d22:	4413      	add	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e7ac      	b.n	8000c84 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d2a:	201e      	movs	r0, #30
 8000d2c:	f00e f9c2 	bl	800f0b4 <malloc>
 8000d30:	4603      	mov	r3, r0
 8000d32:	663b      	str	r3, [r7, #96]	@ 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <Scan_USB+0x134>)
 8000d36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d38:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <Scan_USB+0x148>)
 8000d3a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d3c:	f00e fa78 	bl	800f230 <siprintf>
               Send_Uart(buf);
 8000d40:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d42:	f7ff ff2b 	bl	8000b9c <Send_Uart>
               free(buf);
 8000d46:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d48:	f00e f9bc 	bl	800f0c4 <free>
 8000d4c:	e79a      	b.n	8000c84 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d4e:	bf00      	nop
 8000d50:	e798      	b.n	8000c84 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d52:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d54:	e796      	b.n	8000c84 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d56:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00d fa50 	bl	800e202 <f_closedir>
    }
    free(path);
 8000d62:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000d64:	f00e f9ae 	bl	800f0c4 <free>
    return fresult;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <Scan_USB+0x12c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3768      	adds	r7, #104	@ 0x68
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	0800fab0 	.word	0x0800fab0
 8000d78:	200001c0 	.word	0x200001c0
 8000d7c:	200000a0 	.word	0x200000a0
 8000d80:	200000ba 	.word	0x200000ba
 8000d84:	0800fab4 	.word	0x0800fab4
 8000d88:	0800fac0 	.word	0x0800fac0
 8000d8c:	0800fadc 	.word	0x0800fadc
 8000d90:	0800fae8 	.word	0x0800fae8
 8000d94:	0800faec 	.word	0x0800faec

08000d98 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000da2:	4955      	ldr	r1, [pc, #340]	@ (8000ef8 <Write_File+0x160>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f00d fa8f 	bl	800e2c8 <f_stat>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b53      	ldr	r3, [pc, #332]	@ (8000efc <Write_File+0x164>)
 8000db0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000db2:	4b52      	ldr	r3, [pc, #328]	@ (8000efc <Write_File+0x164>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d012      	beq.n	8000de0 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000dba:	2064      	movs	r0, #100	@ 0x64
 8000dbc:	f00e f97a 	bl	800f0b4 <malloc>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	494e      	ldr	r1, [pc, #312]	@ (8000f00 <Write_File+0x168>)
 8000dc8:	68b8      	ldr	r0, [r7, #8]
 8000dca:	f00e fa31 	bl	800f230 <siprintf>
		Send_Uart (buf);
 8000dce:	68b8      	ldr	r0, [r7, #8]
 8000dd0:	f7ff fee4 	bl	8000b9c <Send_Uart>
	    free(buf);
 8000dd4:	68b8      	ldr	r0, [r7, #8]
 8000dd6:	f00e f975 	bl	800f0c4 <free>
	    return fresult;
 8000dda:	4b48      	ldr	r3, [pc, #288]	@ (8000efc <Write_File+0x164>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	e087      	b.n	8000ef0 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000de0:	2202      	movs	r2, #2
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4847      	ldr	r0, [pc, #284]	@ (8000f04 <Write_File+0x16c>)
 8000de6:	f00c fb75 	bl	800d4d4 <f_open>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b43      	ldr	r3, [pc, #268]	@ (8000efc <Write_File+0x164>)
 8000df0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000df2:	4b42      	ldr	r3, [pc, #264]	@ (8000efc <Write_File+0x164>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d015      	beq.n	8000e26 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000dfa:	2064      	movs	r0, #100	@ 0x64
 8000dfc:	f00e f95a 	bl	800f0b4 <malloc>
 8000e00:	4603      	mov	r3, r0
 8000e02:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e04:	4b3d      	ldr	r3, [pc, #244]	@ (8000efc <Write_File+0x164>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	493e      	ldr	r1, [pc, #248]	@ (8000f08 <Write_File+0x170>)
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f00e fa0e 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff fec1 	bl	8000b9c <Send_Uart>
	        free(buf);
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f00e f952 	bl	800f0c4 <free>
	        return fresult;
 8000e20:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <Write_File+0x164>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	e064      	b.n	8000ef0 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e26:	2064      	movs	r0, #100	@ 0x64
 8000e28:	f00e f944 	bl	800f0b4 <malloc>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4936      	ldr	r1, [pc, #216]	@ (8000f0c <Write_File+0x174>)
 8000e34:	69f8      	ldr	r0, [r7, #28]
 8000e36:	f00e f9fb 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 8000e3a:	69f8      	ldr	r0, [r7, #28]
 8000e3c:	f7ff feae 	bl	8000b9c <Send_Uart>
	        free(buf);
 8000e40:	69f8      	ldr	r0, [r7, #28]
 8000e42:	f00e f93f 	bl	800f0c4 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f7ff f9cc 	bl	80001e4 <strlen>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b30      	ldr	r3, [pc, #192]	@ (8000f10 <Write_File+0x178>)
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	482c      	ldr	r0, [pc, #176]	@ (8000f04 <Write_File+0x16c>)
 8000e54:	f00c fe0d 	bl	800da72 <f_write>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <Write_File+0x164>)
 8000e5e:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e60:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <Write_File+0x164>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d012      	beq.n	8000e8e <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000e68:	2064      	movs	r0, #100	@ 0x64
 8000e6a:	f00e f923 	bl	800f0b4 <malloc>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <Write_File+0x164>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4926      	ldr	r1, [pc, #152]	@ (8000f14 <Write_File+0x17c>)
 8000e7c:	69b8      	ldr	r0, [r7, #24]
 8000e7e:	f00e f9d7 	bl	800f230 <siprintf>
	    		Send_Uart(buf);
 8000e82:	69b8      	ldr	r0, [r7, #24]
 8000e84:	f7ff fe8a 	bl	8000b9c <Send_Uart>
	    		free(buf);
 8000e88:	69b8      	ldr	r0, [r7, #24]
 8000e8a:	f00e f91b 	bl	800f0c4 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000e8e:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <Write_File+0x16c>)
 8000e90:	f00d f8e4 	bl	800e05c <f_close>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <Write_File+0x164>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <Write_File+0x164>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d013      	beq.n	8000ecc <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ea4:	2064      	movs	r0, #100	@ 0x64
 8000ea6:	f00e f905 	bl	800f0b4 <malloc>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <Write_File+0x164>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4918      	ldr	r1, [pc, #96]	@ (8000f18 <Write_File+0x180>)
 8000eb8:	6938      	ldr	r0, [r7, #16]
 8000eba:	f00e f9b9 	bl	800f230 <siprintf>
	    		Send_Uart(buf);
 8000ebe:	6938      	ldr	r0, [r7, #16]
 8000ec0:	f7ff fe6c 	bl	8000b9c <Send_Uart>
	    		free(buf);
 8000ec4:	6938      	ldr	r0, [r7, #16]
 8000ec6:	f00e f8fd 	bl	800f0c4 <free>
 8000eca:	e00f      	b.n	8000eec <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ecc:	2064      	movs	r0, #100	@ 0x64
 8000ece:	f00e f8f1 	bl	800f0b4 <malloc>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4910      	ldr	r1, [pc, #64]	@ (8000f1c <Write_File+0x184>)
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f00e f9a8 	bl	800f230 <siprintf>
	    		Send_Uart(buf);
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff fe5b 	bl	8000b9c <Send_Uart>
	    		free(buf);
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f00e f8ec 	bl	800f0c4 <free>
	    	}
	    }
	    return fresult;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <Write_File+0x164>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000a0 	.word	0x200000a0
 8000efc:	200001c0 	.word	0x200001c0
 8000f00:	0800fb00 	.word	0x0800fb00
 8000f04:	20001270 	.word	0x20001270
 8000f08:	0800fb20 	.word	0x0800fb20
 8000f0c:	0800fb48 	.word	0x0800fb48
 8000f10:	200001c4 	.word	0x200001c4
 8000f14:	0800fb74 	.word	0x0800fb74
 8000f18:	0800fba8 	.word	0x0800fba8
 8000f1c:	0800fbe0 	.word	0x0800fbe0

08000f20 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000f28:	4943      	ldr	r1, [pc, #268]	@ (8001038 <Create_File+0x118>)
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f00d f9cc 	bl	800e2c8 <f_stat>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b41      	ldr	r3, [pc, #260]	@ (800103c <Create_File+0x11c>)
 8000f36:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f38:	4b40      	ldr	r3, [pc, #256]	@ (800103c <Create_File+0x11c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d112      	bne.n	8000f66 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f40:	2064      	movs	r0, #100	@ 0x64
 8000f42:	f00e f8b7 	bl	800f0b4 <malloc>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	493c      	ldr	r1, [pc, #240]	@ (8001040 <Create_File+0x120>)
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f00e f96e 	bl	800f230 <siprintf>
		Send_Uart(buf);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff fe21 	bl	8000b9c <Send_Uart>
		free(buf);
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f00e f8b2 	bl	800f0c4 <free>
	    return fresult;
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <Create_File+0x11c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	e063      	b.n	800102e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000f66:	220b      	movs	r2, #11
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4836      	ldr	r0, [pc, #216]	@ (8001044 <Create_File+0x124>)
 8000f6c:	f00c fab2 	bl	800d4d4 <f_open>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b31      	ldr	r3, [pc, #196]	@ (800103c <Create_File+0x11c>)
 8000f76:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000f78:	4b30      	ldr	r3, [pc, #192]	@ (800103c <Create_File+0x11c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d015      	beq.n	8000fac <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000f80:	2064      	movs	r0, #100	@ 0x64
 8000f82:	f00e f897 	bl	800f0b4 <malloc>
 8000f86:	4603      	mov	r3, r0
 8000f88:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <Create_File+0x11c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	492d      	ldr	r1, [pc, #180]	@ (8001048 <Create_File+0x128>)
 8000f94:	6938      	ldr	r0, [r7, #16]
 8000f96:	f00e f94b 	bl	800f230 <siprintf>
			Send_Uart(buf);
 8000f9a:	6938      	ldr	r0, [r7, #16]
 8000f9c:	f7ff fdfe 	bl	8000b9c <Send_Uart>
			free(buf);
 8000fa0:	6938      	ldr	r0, [r7, #16]
 8000fa2:	f00e f88f 	bl	800f0c4 <free>
		    return fresult;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <Create_File+0x11c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	e040      	b.n	800102e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000fac:	2064      	movs	r0, #100	@ 0x64
 8000fae:	f00e f881 	bl	800f0b4 <malloc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4924      	ldr	r1, [pc, #144]	@ (800104c <Create_File+0x12c>)
 8000fba:	69f8      	ldr	r0, [r7, #28]
 8000fbc:	f00e f938 	bl	800f230 <siprintf>
			Send_Uart(buf);
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	f7ff fdeb 	bl	8000b9c <Send_Uart>
			free(buf);
 8000fc6:	69f8      	ldr	r0, [r7, #28]
 8000fc8:	f00e f87c 	bl	800f0c4 <free>
		}

		fresult = f_close(&USBHFile);
 8000fcc:	481d      	ldr	r0, [pc, #116]	@ (8001044 <Create_File+0x124>)
 8000fce:	f00d f845 	bl	800e05c <f_close>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <Create_File+0x11c>)
 8000fd8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <Create_File+0x11c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d013      	beq.n	800100a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000fe2:	2064      	movs	r0, #100	@ 0x64
 8000fe4:	f00e f866 	bl	800f0b4 <malloc>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <Create_File+0x11c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4916      	ldr	r1, [pc, #88]	@ (8001050 <Create_File+0x130>)
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f00e f91a 	bl	800f230 <siprintf>
			Send_Uart(buf);
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f7ff fdcd 	bl	8000b9c <Send_Uart>
			free(buf);
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f00e f85e 	bl	800f0c4 <free>
 8001008:	e00f      	b.n	800102a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800100a:	2064      	movs	r0, #100	@ 0x64
 800100c:	f00e f852 	bl	800f0b4 <malloc>
 8001010:	4603      	mov	r3, r0
 8001012:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	490f      	ldr	r1, [pc, #60]	@ (8001054 <Create_File+0x134>)
 8001018:	69b8      	ldr	r0, [r7, #24]
 800101a:	f00e f909 	bl	800f230 <siprintf>
			Send_Uart(buf);
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f7ff fdbc 	bl	8000b9c <Send_Uart>
			free(buf);
 8001024:	69b8      	ldr	r0, [r7, #24]
 8001026:	f00e f84d 	bl	800f0c4 <free>
		}
	}
    return fresult;
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <Create_File+0x11c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000a0 	.word	0x200000a0
 800103c:	200001c0 	.word	0x200001c0
 8001040:	0800fcd4 	.word	0x0800fcd4
 8001044:	20001270 	.word	0x20001270
 8001048:	0800fd0c 	.word	0x0800fd0c
 800104c:	0800fd34 	.word	0x0800fd34
 8001050:	0800fd74 	.word	0x0800fd74
 8001054:	0800fcb4 	.word	0x0800fcb4

08001058 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8001062:	495e      	ldr	r1, [pc, #376]	@ (80011dc <Update_File+0x184>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f00d f92f 	bl	800e2c8 <f_stat>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <Update_File+0x188>)
 8001070:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001072:	4b5b      	ldr	r3, [pc, #364]	@ (80011e0 <Update_File+0x188>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d012      	beq.n	80010a0 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800107a:	2064      	movs	r0, #100	@ 0x64
 800107c:	f00e f81a 	bl	800f0b4 <malloc>
 8001080:	4603      	mov	r3, r0
 8001082:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4957      	ldr	r1, [pc, #348]	@ (80011e4 <Update_File+0x18c>)
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f00e f8d1 	bl	800f230 <siprintf>
		Send_Uart (buf);
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff fd84 	bl	8000b9c <Send_Uart>
		free(buf);
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f00e f815 	bl	800f0c4 <free>
	    return fresult;
 800109a:	4b51      	ldr	r3, [pc, #324]	@ (80011e0 <Update_File+0x188>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	e098      	b.n	80011d2 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 80010a0:	2232      	movs	r2, #50	@ 0x32
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4850      	ldr	r0, [pc, #320]	@ (80011e8 <Update_File+0x190>)
 80010a6:	f00c fa15 	bl	800d4d4 <f_open>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b4c      	ldr	r3, [pc, #304]	@ (80011e0 <Update_File+0x188>)
 80010b0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010b2:	4b4b      	ldr	r3, [pc, #300]	@ (80011e0 <Update_File+0x188>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d015      	beq.n	80010e6 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80010ba:	2064      	movs	r0, #100	@ 0x64
 80010bc:	f00d fffa 	bl	800f0b4 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80010c4:	4b46      	ldr	r3, [pc, #280]	@ (80011e0 <Update_File+0x188>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4947      	ldr	r1, [pc, #284]	@ (80011ec <Update_File+0x194>)
 80010ce:	6938      	ldr	r0, [r7, #16]
 80010d0:	f00e f8ae 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f7ff fd61 	bl	8000b9c <Send_Uart>
	        free(buf);
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f00d fff2 	bl	800f0c4 <free>
	        return fresult;
 80010e0:	4b3f      	ldr	r3, [pc, #252]	@ (80011e0 <Update_File+0x188>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	e075      	b.n	80011d2 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 80010e6:	2064      	movs	r0, #100	@ 0x64
 80010e8:	f00d ffe4 	bl	800f0b4 <malloc>
 80010ec:	4603      	mov	r3, r0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	493f      	ldr	r1, [pc, #252]	@ (80011f0 <Update_File+0x198>)
 80010f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010f6:	f00e f89b 	bl	800f230 <siprintf>
    	Send_Uart(buf);
 80010fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010fc:	f7ff fd4e 	bl	8000b9c <Send_Uart>
        free(buf);
 8001100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001102:	f00d ffdf 	bl	800f0c4 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f7ff f86c 	bl	80001e4 <strlen>
 800110c:	4602      	mov	r2, r0
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <Update_File+0x19c>)
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	4835      	ldr	r0, [pc, #212]	@ (80011e8 <Update_File+0x190>)
 8001114:	f00c fcad 	bl	800da72 <f_write>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <Update_File+0x188>)
 800111e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <Update_File+0x188>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001128:	2064      	movs	r0, #100	@ 0x64
 800112a:	f00d ffc3 	bl	800f0b4 <malloc>
 800112e:	4603      	mov	r3, r0
 8001130:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <Update_File+0x188>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	492f      	ldr	r1, [pc, #188]	@ (80011f8 <Update_File+0x1a0>)
 800113c:	69f8      	ldr	r0, [r7, #28]
 800113e:	f00e f877 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 8001142:	69f8      	ldr	r0, [r7, #28]
 8001144:	f7ff fd2a 	bl	8000b9c <Send_Uart>
	    	free(buf);
 8001148:	69f8      	ldr	r0, [r7, #28]
 800114a:	f00d ffbb 	bl	800f0c4 <free>
 800114e:	e00f      	b.n	8001170 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001150:	2064      	movs	r0, #100	@ 0x64
 8001152:	f00d ffaf 	bl	800f0b4 <malloc>
 8001156:	4603      	mov	r3, r0
 8001158:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4927      	ldr	r1, [pc, #156]	@ (80011fc <Update_File+0x1a4>)
 800115e:	6a38      	ldr	r0, [r7, #32]
 8001160:	f00e f866 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 8001164:	6a38      	ldr	r0, [r7, #32]
 8001166:	f7ff fd19 	bl	8000b9c <Send_Uart>
	    	free(buf);
 800116a:	6a38      	ldr	r0, [r7, #32]
 800116c:	f00d ffaa 	bl	800f0c4 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001170:	481d      	ldr	r0, [pc, #116]	@ (80011e8 <Update_File+0x190>)
 8001172:	f00c ff73 	bl	800e05c <f_close>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <Update_File+0x188>)
 800117c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <Update_File+0x188>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d013      	beq.n	80011ae <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001186:	2064      	movs	r0, #100	@ 0x64
 8001188:	f00d ff94 	bl	800f0b4 <malloc>
 800118c:	4603      	mov	r3, r0
 800118e:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <Update_File+0x188>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4919      	ldr	r1, [pc, #100]	@ (8001200 <Update_File+0x1a8>)
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f00e f848 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff fcfb 	bl	8000b9c <Send_Uart>
	    	free(buf);
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f00d ff8c 	bl	800f0c4 <free>
 80011ac:	e00f      	b.n	80011ce <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011ae:	2064      	movs	r0, #100	@ 0x64
 80011b0:	f00d ff80 	bl	800f0b4 <malloc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4912      	ldr	r1, [pc, #72]	@ (8001204 <Update_File+0x1ac>)
 80011bc:	69b8      	ldr	r0, [r7, #24]
 80011be:	f00e f837 	bl	800f230 <siprintf>
	    	Send_Uart(buf);
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcea 	bl	8000b9c <Send_Uart>
	    	free(buf);
 80011c8:	69b8      	ldr	r0, [r7, #24]
 80011ca:	f00d ff7b 	bl	800f0c4 <free>
	     }
	}
    return fresult;
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <Update_File+0x188>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000a0 	.word	0x200000a0
 80011e0:	200001c0 	.word	0x200001c0
 80011e4:	0800fb00 	.word	0x0800fb00
 80011e8:	20001270 	.word	0x20001270
 80011ec:	0800fb20 	.word	0x0800fb20
 80011f0:	0800fd98 	.word	0x0800fd98
 80011f4:	200001c4 	.word	0x200001c4
 80011f8:	0800fdc8 	.word	0x0800fdc8
 80011fc:	0800fdf0 	.word	0x0800fdf0
 8001200:	0800fc8c 	.word	0x0800fc8c
 8001204:	0800fcb4 	.word	0x0800fcb4

08001208 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f00d f999 	bl	800e548 <f_mkdir>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <Create_Dir+0x74>)
 800121c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <Create_Dir+0x74>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d110      	bne.n	8001248 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8001226:	2064      	movs	r0, #100	@ 0x64
 8001228:	f00d ff44 	bl	800f0b4 <malloc>
 800122c:	4603      	mov	r3, r0
 800122e:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4913      	ldr	r1, [pc, #76]	@ (8001280 <Create_Dir+0x78>)
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f00d fffb 	bl	800f230 <siprintf>
    	Send_Uart (buf);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f7ff fcae 	bl	8000b9c <Send_Uart>
    	free(buf);
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f00d ff3f 	bl	800f0c4 <free>
 8001246:	e012      	b.n	800126e <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001248:	2064      	movs	r0, #100	@ 0x64
 800124a:	f00d ff33 	bl	800f0b4 <malloc>
 800124e:	4603      	mov	r3, r0
 8001250:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <Create_Dir+0x74>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	490a      	ldr	r1, [pc, #40]	@ (8001284 <Create_Dir+0x7c>)
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f00d ffe7 	bl	800f230 <siprintf>
    	Send_Uart(buf);
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fc9a 	bl	8000b9c <Send_Uart>
    	free(buf);
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f00d ff2b 	bl	800f0c4 <free>
    }
    return fresult;
 800126e:	4b03      	ldr	r3, [pc, #12]	@ (800127c <Create_Dir+0x74>)
 8001270:	781b      	ldrb	r3, [r3, #0]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001c0 	.word	0x200001c0
 8001280:	0800fe54 	.word	0x0800fe54
 8001284:	0800fe7c 	.word	0x0800fe7c

08001288 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800128e:	4a30      	ldr	r2, [pc, #192]	@ (8001350 <Check_USB_Details+0xc8>)
 8001290:	4930      	ldr	r1, [pc, #192]	@ (8001354 <Check_USB_Details+0xcc>)
 8001292:	4831      	ldr	r0, [pc, #196]	@ (8001358 <Check_USB_Details+0xd0>)
 8001294:	f00d f851 	bl	800e33a <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001298:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <Check_USB_Details+0xc8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	3b02      	subs	r3, #2
 80012a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001350 <Check_USB_Details+0xc8>)
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	8952      	ldrh	r2, [r2, #10]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa64 	bl	8000778 <__aeabi_ui2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b29      	ldr	r3, [pc, #164]	@ (800135c <Check_USB_Details+0xd4>)
 80012b6:	f7fe fff3 	bl	80002a0 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fad3 	bl	800086c <__aeabi_d2uiz>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a25      	ldr	r2, [pc, #148]	@ (8001360 <Check_USB_Details+0xd8>)
 80012ca:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80012cc:	201e      	movs	r0, #30
 80012ce:	f00d fef1 	bl	800f0b4 <malloc>
 80012d2:	4603      	mov	r3, r0
 80012d4:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <Check_USB_Details+0xd8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4921      	ldr	r1, [pc, #132]	@ (8001364 <Check_USB_Details+0xdc>)
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f00d ffa6 	bl	800f230 <siprintf>
    Send_Uart(buf);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fc59 	bl	8000b9c <Send_Uart>
    free(buf);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f00d feea 	bl	800f0c4 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <Check_USB_Details+0xc8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	895b      	ldrh	r3, [r3, #10]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <Check_USB_Details+0xcc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fa39 	bl	8000778 <__aeabi_ui2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <Check_USB_Details+0xd4>)
 800130c:	f7fe ffc8 	bl	80002a0 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff faa8 	bl	800086c <__aeabi_d2uiz>
 800131c:	4603      	mov	r3, r0
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <Check_USB_Details+0xe0>)
 8001320:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001322:	201e      	movs	r0, #30
 8001324:	f00d fec6 	bl	800f0b4 <malloc>
 8001328:	4603      	mov	r3, r0
 800132a:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <Check_USB_Details+0xe0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	490e      	ldr	r1, [pc, #56]	@ (800136c <Check_USB_Details+0xe4>)
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f00d ff7b 	bl	800f230 <siprintf>
    Send_Uart(buf);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fc2e 	bl	8000b9c <Send_Uart>
    free(buf);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f00d febf 	bl	800f0c4 <free>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001c8 	.word	0x200001c8
 8001354:	200001cc 	.word	0x200001cc
 8001358:	0800fea8 	.word	0x0800fea8
 800135c:	3fe00000 	.word	0x3fe00000
 8001360:	200001d0 	.word	0x200001d0
 8001364:	0800feac 	.word	0x0800feac
 8001368:	200001d4 	.word	0x200001d4
 800136c:	0800fec4 	.word	0x0800fec4

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001374:	f000 fa7e 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001378:	f000 f850 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137c:	f000 f8e2 	bl	8001544 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8001380:	f00d fb52 	bl	800ea28 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001384:	f000 f8b4 	bl	80014f0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001388:	f005 f918 	bl	80065bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //needed for vbus
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2101      	movs	r1, #1
 8001390:	4819      	ldr	r0, [pc, #100]	@ (80013f8 <main+0x88>)
 8001392:	f000 fdb3 	bl	8001efc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001396:	f00d fb6d 	bl	800ea74 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //assigned 1 on mounting to perform operations in main
    //if you have usb to ttl can see serial data while operations are performed
    if (active_usb == 1){
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <main+0x8c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d123      	bne.n	80013ea <main+0x7a>
		Mount_USB(); //mount the usb
 80013a2:	f7ff fc11 	bl	8000bc8 <Mount_USB>
		Check_USB_Details(); //check usb details
 80013a6:	f7ff ff6f 	bl	8001288 <Check_USB_Details>
		Scan_USB("/"); //scan all files on usb
 80013aa:	4815      	ldr	r0, [pc, #84]	@ (8001400 <main+0x90>)
 80013ac:	f7ff fc4e 	bl	8000c4c <Scan_USB>

		Create_File("/myfile.txt");
 80013b0:	4814      	ldr	r0, [pc, #80]	@ (8001404 <main+0x94>)
 80013b2:	f7ff fdb5 	bl	8000f20 <Create_File>
		Write_File("/myfile.txt", "This is my try\n");
 80013b6:	4914      	ldr	r1, [pc, #80]	@ (8001408 <main+0x98>)
 80013b8:	4812      	ldr	r0, [pc, #72]	@ (8001404 <main+0x94>)
 80013ba:	f7ff fced 	bl	8000d98 <Write_File>

		Create_Dir("/mydir");
 80013be:	4813      	ldr	r0, [pc, #76]	@ (800140c <main+0x9c>)
 80013c0:	f7ff ff22 	bl	8001208 <Create_Dir>
		Create_File("/mydir/myfile.txt");
 80013c4:	4812      	ldr	r0, [pc, #72]	@ (8001410 <main+0xa0>)
 80013c6:	f7ff fdab 	bl	8000f20 <Create_File>
		Write_File("/mydir/myfile.txt", "This is my try\n");
 80013ca:	490f      	ldr	r1, [pc, #60]	@ (8001408 <main+0x98>)
 80013cc:	4810      	ldr	r0, [pc, #64]	@ (8001410 <main+0xa0>)
 80013ce:	f7ff fce3 	bl	8000d98 <Write_File>

		Update_File("/myfile.txt", "This is second line \n"); //this helps to append data
 80013d2:	4910      	ldr	r1, [pc, #64]	@ (8001414 <main+0xa4>)
 80013d4:	480b      	ldr	r0, [pc, #44]	@ (8001404 <main+0x94>)
 80013d6:	f7ff fe3f 	bl	8001058 <Update_File>

    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //set light to indicate data transfer done
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013e0:	480d      	ldr	r0, [pc, #52]	@ (8001418 <main+0xa8>)
 80013e2:	f000 fd8b 	bl	8001efc <HAL_GPIO_WritePin>
    	while(1); //stuck forever to not perform operations again
 80013e6:	bf00      	nop
 80013e8:	e7fd      	b.n	80013e6 <main+0x76>
    }
    else
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f0:	4809      	ldr	r0, [pc, #36]	@ (8001418 <main+0xa8>)
 80013f2:	f000 fd83 	bl	8001efc <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80013f6:	e7ce      	b.n	8001396 <main+0x26>
 80013f8:	40020800 	.word	0x40020800
 80013fc:	20000220 	.word	0x20000220
 8001400:	0800fedc 	.word	0x0800fedc
 8001404:	0800fee0 	.word	0x0800fee0
 8001408:	0800feec 	.word	0x0800feec
 800140c:	0800fefc 	.word	0x0800fefc
 8001410:	0800ff04 	.word	0x0800ff04
 8001414:	0800ff18 	.word	0x0800ff18
 8001418:	40020c00 	.word	0x40020c00

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	@ 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f00d ff20 	bl	800f270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <SystemClock_Config+0xcc>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <SystemClock_Config+0xd0>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <SystemClock_Config+0xd0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001490:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001494:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800149a:	2307      	movs	r3, #7
 800149c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fe78 	bl	8004198 <HAL_RCC_OscConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014ae:	f000 f8bf 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b2:	230f      	movs	r3, #15
 80014b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2105      	movs	r1, #5
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f8d9 	bl	8004688 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014dc:	f000 f8a8 	bl	8001630 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	@ 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <MX_USART2_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 80014fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_USART2_UART_Init+0x4c>)
 8001528:	f003 face 	bl	8004ac8 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f87d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200001d8 	.word	0x200001d8
 8001540:	40004400 	.word	0x40004400

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <MX_GPIO_Init+0xe0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a30      	ldr	r2, [pc, #192]	@ (8001624 <MX_GPIO_Init+0xe0>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <MX_GPIO_Init+0xe0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <MX_GPIO_Init+0xe0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a29      	ldr	r2, [pc, #164]	@ (8001624 <MX_GPIO_Init+0xe0>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <MX_GPIO_Init+0xe0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <MX_GPIO_Init+0xe0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a22      	ldr	r2, [pc, #136]	@ (8001624 <MX_GPIO_Init+0xe0>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <MX_GPIO_Init+0xe0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <MX_GPIO_Init+0xe0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <MX_GPIO_Init+0xe0>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <MX_GPIO_Init+0xe0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2101      	movs	r1, #1
 80015ce:	4816      	ldr	r0, [pc, #88]	@ (8001628 <MX_GPIO_Init+0xe4>)
 80015d0:	f000 fc94 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015da:	4814      	ldr	r0, [pc, #80]	@ (800162c <MX_GPIO_Init+0xe8>)
 80015dc:	f000 fc8e 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e0:	2301      	movs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <MX_GPIO_Init+0xe4>)
 80015f8:	f000 fae4 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_GPIO_Init+0xe8>)
 8001616:	f000 fad5 	bl	8001bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	@ 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167a:	2007      	movs	r0, #7
 800167c:	f000 fa60 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_UART_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12b      	bne.n	8001706 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_UART_MspInit+0x88>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	4a17      	ldr	r2, [pc, #92]	@ (8001714 <HAL_UART_MspInit+0x88>)
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_UART_MspInit+0x88>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_UART_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a10      	ldr	r2, [pc, #64]	@ (8001714 <HAL_UART_MspInit+0x88>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_UART_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e6:	230c      	movs	r3, #12
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f6:	2307      	movs	r3, #7
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <HAL_UART_MspInit+0x8c>)
 8001702:	f000 fa5f 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001772:	f000 f8d1 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <OTG_FS_IRQHandler+0x10>)
 8001782:	f000 feb5 	bl	80024f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20002b38 	.word	0x20002b38

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f00d fd6e 	bl	800f2a0 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20020000 	.word	0x20020000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	20000224 	.word	0x20000224
 80017f8:	20003060 	.word	0x20003060

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001858 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001824:	f7ff ffea 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	@ (800186c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f00d fd2d 	bl	800f2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7ff fd8d 	bl	8001370 <main>
  bx  lr    
 8001856:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001864:	08010438 	.word	0x08010438
  ldr r2, =_sbss
 8001868:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800186c:	20003060 	.word	0x20003060

08001870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f94f 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 f808 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fec8 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_InitTick+0x54>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_InitTick+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f967 	bl	8001baa <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00e      	b.n	8001904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d80a      	bhi.n	8001902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 f92f 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4a06      	ldr	r2, [pc, #24]	@ (8001914 <HAL_InitTick+0x5c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	20000008 	.word	0x20000008
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	@ (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008
 800193c:	20000228 	.word	0x20000228

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000228 	.word	0x20000228

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffde 	bl	8001940 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	@ (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff3e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff31 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e16b      	b.n	8001eb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 815a 	bne.w	8001eb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d005      	beq.n	8001c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d130      	bne.n	8001c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d017      	beq.n	8001cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80b4 	beq.w	8001eb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b60      	ldr	r3, [pc, #384]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a5f      	ldr	r2, [pc, #380]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d66:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed4 <HAL_GPIO_Init+0x310>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	@ (8001ed8 <HAL_GPIO_Init+0x314>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <HAL_GPIO_Init+0x226>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a51      	ldr	r2, [pc, #324]	@ (8001edc <HAL_GPIO_Init+0x318>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_Init+0x222>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <HAL_GPIO_Init+0x31c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_Init+0x21e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <HAL_GPIO_Init+0x320>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	@ (8001eec <HAL_GPIO_Init+0x328>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef0 <HAL_GPIO_Init+0x32c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef4 <HAL_GPIO_Init+0x330>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x20a>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00e      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dce:	2308      	movs	r3, #8
 8001dd0:	e00c      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e00a      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	e008      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dde:	2303      	movs	r3, #3
 8001de0:	e004      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dea:	2300      	movs	r3, #0
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	f002 0203 	and.w	r2, r2, #3
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	4093      	lsls	r3, r2
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dfc:	4935      	ldr	r1, [pc, #212]	@ (8001ed4 <HAL_GPIO_Init+0x310>)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2e:	4a32      	ldr	r2, [pc, #200]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e34:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e58:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eac:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	f67f ae90 	bls.w	8001be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3724      	adds	r7, #36	@ 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40021400 	.word	0x40021400
 8001ef0:	40021800 	.word	0x40021800
 8001ef4:	40021c00 	.word	0x40021c00
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af02      	add	r7, sp, #8
 8001f34:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e059      	b.n	8001ff4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f00c fdca 	bl	800eaf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2203      	movs	r2, #3
 8001f64:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f6e:	d102      	bne.n	8001f76 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fa25 	bl	80053ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7c1a      	ldrb	r2, [r3, #16]
 8001f88:	f88d 2000 	strb.w	r2, [sp]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	f003 f9a6 	bl	80052e0 <USB_CoreInit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e026      	b.n	8001ff4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fa1d 	bl	80053ec <USB_SetCurrentMode>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e017      	b.n	8001ff4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7c1a      	ldrb	r2, [r3, #16]
 8001fcc:	f88d 2000 	strb.w	r2, [sp]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd4:	f003 fbc0 	bl	8005758 <USB_HostInit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e004      	b.n	8001ff4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b08b      	sub	sp, #44	@ 0x2c
 8002000:	af04      	add	r7, sp, #16
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	70fb      	strb	r3, [r7, #3]
 800200e:	460b      	mov	r3, r1
 8002010:	70bb      	strb	r3, [r7, #2]
 8002012:	4613      	mov	r3, r2
 8002014:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002016:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002018:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_HCD_HC_Init+0x2c>
 8002024:	2302      	movs	r3, #2
 8002026:	e09d      	b.n	8002164 <HAL_HCD_HC_Init+0x168>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3319      	adds	r3, #25
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3314      	adds	r3, #20
 8002054:	787a      	ldrb	r2, [r7, #1]
 8002056:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3315      	adds	r3, #21
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	3326      	adds	r3, #38	@ 0x26
 800207c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002080:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	78bb      	ldrb	r3, [r7, #2]
 8002086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3316      	adds	r3, #22
 800209a:	4602      	mov	r2, r0
 800209c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fbc8 	bl	8002838 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80020a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da0a      	bge.n	80020c6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3317      	adds	r3, #23
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e009      	b.n	80020da <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3317      	adds	r3, #23
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fc9e 	bl	8005a20 <USB_GetHostSpeed>
 80020e4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80020e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10b      	bne.n	8002106 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80020ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_HCD_HC_Init+0x10a>
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8002100:	d901      	bls.n	8002106 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002102:	23bc      	movs	r3, #188	@ 0xbc
 8002104:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3318      	adds	r3, #24
 8002116:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800211a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	b298      	uxth	r0, r3
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3328      	adds	r3, #40	@ 0x28
 8002130:	4602      	mov	r2, r0
 8002132:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	b29b      	uxth	r3, r3
 800213c:	787c      	ldrb	r4, [r7, #1]
 800213e:	78ba      	ldrb	r2, [r7, #2]
 8002140:	78f9      	ldrb	r1, [r7, #3]
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4623      	mov	r3, r4
 8002152:	f003 fc8d 	bl	8005a70 <USB_HC_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}

0800216c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_HCD_HC_Halt+0x1e>
 8002186:	2302      	movs	r3, #2
 8002188:	e00f      	b.n	80021aa <HAL_HCD_HC_Halt+0x3e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f81f 	bl	80061de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70bb      	strb	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3317      	adds	r3, #23
 80021de:	78ba      	ldrb	r2, [r7, #2]
 80021e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3326      	adds	r3, #38	@ 0x26
 80021f2:	787a      	ldrb	r2, [r7, #1]
 80021f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021f6:	7c3b      	ldrb	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d114      	bne.n	8002226 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	332a      	adds	r3, #42	@ 0x2a
 800220c:	2203      	movs	r2, #3
 800220e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3319      	adds	r3, #25
 8002220:	7f3a      	ldrb	r2, [r7, #28]
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e009      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	332a      	adds	r3, #42	@ 0x2a
 8002236:	2202      	movs	r2, #2
 8002238:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800223a:	787b      	ldrb	r3, [r7, #1]
 800223c:	2b03      	cmp	r3, #3
 800223e:	f200 8102 	bhi.w	8002446 <HAL_HCD_HC_SubmitRequest+0x292>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002259 	.word	0x08002259
 800224c:	08002431 	.word	0x08002431
 8002250:	0800231d 	.word	0x0800231d
 8002254:	080023a7 	.word	0x080023a7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002258:	7c3b      	ldrb	r3, [r7, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 80f5 	bne.w	800244a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002260:	78bb      	ldrb	r3, [r7, #2]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d12d      	bne.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002266:	8b3b      	ldrh	r3, [r7, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	333d      	adds	r3, #61	@ 0x3d
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	333d      	adds	r3, #61	@ 0x3d
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	332a      	adds	r3, #42	@ 0x2a
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80022aa:	e0ce      	b.n	800244a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	332a      	adds	r3, #42	@ 0x2a
 80022bc:	2202      	movs	r2, #2
 80022be:	701a      	strb	r2, [r3, #0]
      break;
 80022c0:	e0c3      	b.n	800244a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	331a      	adds	r3, #26
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 80b8 	bne.w	800244a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333c      	adds	r3, #60	@ 0x3c
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	332a      	adds	r3, #42	@ 0x2a
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
      break;
 8002304:	e0a1      	b.n	800244a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	332a      	adds	r3, #42	@ 0x2a
 8002316:	2202      	movs	r2, #2
 8002318:	701a      	strb	r2, [r3, #0]
      break;
 800231a:	e096      	b.n	800244a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800231c:	78bb      	ldrb	r3, [r7, #2]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d120      	bne.n	8002364 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	333d      	adds	r3, #61	@ 0x3d
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	332a      	adds	r3, #42	@ 0x2a
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800234c:	e07e      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	332a      	adds	r3, #42	@ 0x2a
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
      break;
 8002362:	e073      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	333c      	adds	r3, #60	@ 0x3c
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	332a      	adds	r3, #42	@ 0x2a
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
      break;
 800238e:	e05d      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	332a      	adds	r3, #42	@ 0x2a
 80023a0:	2202      	movs	r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
      break;
 80023a4:	e052      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023a6:	78bb      	ldrb	r3, [r7, #2]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d120      	bne.n	80023ee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	333d      	adds	r3, #61	@ 0x3d
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	332a      	adds	r3, #42	@ 0x2a
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023d6:	e039      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	332a      	adds	r3, #42	@ 0x2a
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      break;
 80023ec:	e02e      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	333c      	adds	r3, #60	@ 0x3c
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	332a      	adds	r3, #42	@ 0x2a
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
      break;
 8002418:	e018      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	332a      	adds	r3, #42	@ 0x2a
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
      break;
 800242e:	e00d      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	332a      	adds	r3, #42	@ 0x2a
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
      break;
 8002444:	e002      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800244a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	332c      	adds	r3, #44	@ 0x2c
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	8b39      	ldrh	r1, [r7, #24]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4403      	add	r3, r0
 8002470:	3334      	adds	r3, #52	@ 0x34
 8002472:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334c      	adds	r3, #76	@ 0x4c
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3338      	adds	r3, #56	@ 0x38
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3315      	adds	r3, #21
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334d      	adds	r3, #77	@ 0x4d
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3310      	adds	r3, #16
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	1d19      	adds	r1, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	799b      	ldrb	r3, [r3, #6]
 80024de:	461a      	mov	r2, r3
 80024e0:	f003 fbf2 	bl	8005cc8 <USB_HC_StartXfer>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop

080024f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 f8e6 	bl	80056d8 <USB_GetMode>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80fb 	bne.w	800270a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 f8a9 	bl	8005670 <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80f1 	beq.w	8002708 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f8a0 	bl	8005670 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800253a:	d104      	bne.n	8002546 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002544:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 f890 	bl	8005670 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800255a:	d104      	bne.n	8002566 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002564:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f003 f880 	bl	8005670 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002576:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800257a:	d104      	bne.n	8002586 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002584:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f870 	bl	8005670 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d103      	bne.n	80025a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 f862 	bl	8005670 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025b6:	d120      	bne.n	80025fa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80025c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d113      	bne.n	80025fa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025d2:	2110      	movs	r1, #16
 80025d4:	6938      	ldr	r0, [r7, #16]
 80025d6:	f002 ff55 	bl	8005484 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025da:	6938      	ldr	r0, [r7, #16]
 80025dc:	f002 ff84 	bl	80054e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7a5b      	ldrb	r3, [r3, #9]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d105      	bne.n	80025f4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 f976 	bl	80058e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f00c fafb 	bl	800ebf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f836 	bl	8005670 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800260e:	d102      	bne.n	8002616 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f001 fd4d 	bl	80040b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f828 	bl	8005670 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b08      	cmp	r3, #8
 8002628:	d106      	bne.n	8002638 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f00c fac4 	bl	800ebb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2208      	movs	r2, #8
 8002636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f817 	bl	8005670 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800264c:	d139      	bne.n	80026c2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fdb2 	bl	80061bc <USB_HC_ReadInterrupt>
 8002658:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e025      	b.n	80026ac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d018      	beq.n	80026a6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800268a:	d106      	bne.n	800269a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f905 	bl	80028a2 <HCD_HC_IN_IRQHandler>
 8002698:	e005      	b.n	80026a6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 ff67 	bl	8003574 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	795b      	ldrb	r3, [r3, #5]
 80026b0:	461a      	mov	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d3d3      	bcc.n	8002660 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 ffd2 	bl	8005670 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d101      	bne.n	80026da <HAL_HCD_IRQHandler+0x1ea>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_HCD_IRQHandler+0x1ec>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d014      	beq.n	800270a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f001 fbfe 	bl	8003ef2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0210 	orr.w	r2, r2, #16
 8002704:	619a      	str	r2, [r3, #24]
 8002706:	e000      	b.n	800270a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002708:	bf00      	nop
    }
  }
}
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_HCD_Start+0x16>
 8002722:	2302      	movs	r3, #2
 8002724:	e013      	b.n	800274e <HAL_HCD_Start+0x3e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2101      	movs	r1, #1
 8002734:	4618      	mov	r0, r3
 8002736:	f003 f93a 	bl	80059ae <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 fe32 	bl	80053a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_HCD_Stop+0x16>
 8002768:	2302      	movs	r3, #2
 800276a:	e00d      	b.n	8002788 <HAL_HCD_Stop+0x32>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fe8d 	bl	8006498 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f8dc 	bl	800595a <USB_ResetPort>
 80027a2:	4603      	mov	r3, r0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334c      	adds	r3, #76	@ 0x4c
 80027c8:	781b      	ldrb	r3, [r3, #0]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3338      	adds	r3, #56	@ 0x38
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 f91e 	bl	8005a4e <USB_GetCurrentFrame>
 8002812:	4603      	mov	r3, r0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 f8f9 	bl	8005a20 <USB_GetHostSpeed>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	331a      	adds	r3, #26
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	331b      	adds	r3, #27
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3325      	adds	r3, #37	@ 0x25
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3324      	adds	r3, #36	@ 0x24
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fee8 	bl	8005696 <USB_ReadChInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11a      	bne.n	8002906 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2304      	movs	r3, #4
 80028e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	@ 0x4d
 80028f2:	2207      	movs	r2, #7
 80028f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 fc6d 	bl	80061de <USB_HC_Halt>
 8002904:	e09e      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fec1 	bl	8005696 <USB_ReadChInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291e:	d11b      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002932:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334d      	adds	r3, #77	@ 0x4d
 8002944:	2208      	movs	r2, #8
 8002946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fc44 	bl	80061de <USB_HC_Halt>
 8002956:	e075      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fe98 	bl	8005696 <USB_ReadChInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d11a      	bne.n	80029a6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2308      	movs	r3, #8
 8002980:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	334d      	adds	r3, #77	@ 0x4d
 8002992:	2206      	movs	r2, #6
 8002994:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fc1d 	bl	80061de <USB_HC_Halt>
 80029a4:	e04e      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fe71 	bl	8005696 <USB_ReadChInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d11b      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	@ 0x4d
 80029e4:	2209      	movs	r2, #9
 80029e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fbf4 	bl	80061de <USB_HC_Halt>
 80029f6:	e025      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fe48 	bl	8005696 <USB_ReadChInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	2b80      	cmp	r3, #128	@ 0x80
 8002a0e:	d119      	bne.n	8002a44 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	334d      	adds	r3, #77	@ 0x4d
 8002a32:	2207      	movs	r2, #7
 8002a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 fbcd 	bl	80061de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 fe22 	bl	8005696 <USB_ReadChInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5c:	d112      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fbb9 	bl	80061de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a7e:	6093      	str	r3, [r2, #8]
 8002a80:	f000 bd75 	b.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fe02 	bl	8005696 <USB_ReadChInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 8128 	bne.w	8002cee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2320      	movs	r3, #32
 8002aae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	331b      	adds	r3, #27
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d119      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	799b      	ldrb	r3, [r3, #6]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01b      	beq.n	8002b3a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3330      	adds	r3, #48	@ 0x30
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	1ac9      	subs	r1, r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4403      	add	r3, r0
 8002b36:	3338      	adds	r3, #56	@ 0x38
 8002b38:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334d      	adds	r3, #77	@ 0x4d
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3344      	adds	r3, #68	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3326      	adds	r3, #38	@ 0x26
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3326      	adds	r3, #38	@ 0x26
 8002b9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d110      	bne.n	8002bc2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fb18 	bl	80061de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	e03d      	b.n	8002c3e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3326      	adds	r3, #38	@ 0x26
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d00a      	beq.n	8002bee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3326      	adds	r3, #38	@ 0x26
 8002be8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d127      	bne.n	8002c3e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c0c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	334c      	adds	r3, #76	@ 0x4c
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334c      	adds	r3, #76	@ 0x4c
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f00b ffe7 	bl	800ec0c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d13b      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3338      	adds	r3, #56	@ 0x38
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	3328      	adds	r3, #40	@ 0x28
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	440b      	add	r3, r1
 8002c6c:	1e59      	subs	r1, r3, #1
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4403      	add	r3, r0
 8002c7c:	3328      	adds	r3, #40	@ 0x28
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8470 	beq.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	333c      	adds	r3, #60	@ 0x3c
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2d8      	uxtb	r0, r3
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	333c      	adds	r3, #60	@ 0x3c
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	f000 bc58 	b.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	333c      	adds	r3, #60	@ 0x3c
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	f083 0301 	eor.w	r3, r3, #1
 8002cd6:	b2d8      	uxtb	r0, r3
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	333c      	adds	r3, #60	@ 0x3c
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	f000 bc40 	b.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fccd 	bl	8005696 <USB_ReadChInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d131      	bne.n	8002d6a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2320      	movs	r3, #32
 8002d16:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	331a      	adds	r3, #26
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	f040 841f 	bne.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	331b      	adds	r3, #27
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	334d      	adds	r3, #77	@ 0x4d
 8002d54:	2203      	movs	r2, #3
 8002d56:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fa3c 	bl	80061de <USB_HC_Halt>
 8002d66:	f000 bc02 	b.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fc8f 	bl	8005696 <USB_ReadChInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	f040 8305 	bne.w	800338e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	2302      	movs	r3, #2
 8002d94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	334d      	adds	r3, #77	@ 0x4d
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d114      	bne.n	8002dd6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	334d      	adds	r3, #77	@ 0x4d
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	334c      	adds	r3, #76	@ 0x4c
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e2cc      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334d      	adds	r3, #77	@ 0x4d
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d114      	bne.n	8002e16 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334c      	adds	r3, #76	@ 0x4c
 8002e10:	2205      	movs	r2, #5
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e2ac      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	334d      	adds	r3, #77	@ 0x4d
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	d00b      	beq.n	8002e44 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	@ 0x4d
 8002e3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	f040 80a6 	bne.w	8002f90 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334d      	adds	r3, #77	@ 0x4d
 8002e54:	2202      	movs	r2, #2
 8002e56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3344      	adds	r3, #68	@ 0x44
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4403      	add	r3, r0
 8002e78:	3344      	adds	r3, #68	@ 0x44
 8002e7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3344      	adds	r3, #68	@ 0x44
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d943      	bls.n	8002f1a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3344      	adds	r3, #68	@ 0x44
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	331a      	adds	r3, #26
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d123      	bne.n	8002f04 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	331b      	adds	r3, #27
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	331c      	adds	r3, #28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	0151      	lsls	r1, r2, #5
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	440a      	add	r2, r1
 8002efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f02:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	334c      	adds	r3, #76	@ 0x4c
 8002f14:	2204      	movs	r2, #4
 8002f16:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f18:	e229      	b.n	800336e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334c      	adds	r3, #76	@ 0x4c
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3326      	adds	r3, #38	@ 0x26
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3326      	adds	r3, #38	@ 0x26
 8002f54:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	f040 8209 	bne.w	800336e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f72:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f7a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f8e:	e1ee      	b.n	800336e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334d      	adds	r3, #77	@ 0x4d
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	f040 80c8 	bne.w	8003138 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	334d      	adds	r3, #77	@ 0x4d
 8002fb8:	2202      	movs	r2, #2
 8002fba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	331b      	adds	r3, #27
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 81ce 	bne.w	8003370 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3326      	adds	r3, #38	@ 0x26
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d16b      	bne.n	80030c2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3348      	adds	r3, #72	@ 0x48
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c59      	adds	r1, r3, #1
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4403      	add	r3, r0
 800300a:	3348      	adds	r3, #72	@ 0x48
 800300c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3348      	adds	r3, #72	@ 0x48
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d943      	bls.n	80030ac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3348      	adds	r3, #72	@ 0x48
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	331b      	adds	r3, #27
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3344      	adds	r3, #68	@ 0x44
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d809      	bhi.n	8003076 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	331c      	adds	r3, #28
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	0151      	lsls	r1, r2, #5
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	440a      	add	r2, r1
 800308c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003094:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	334c      	adds	r3, #76	@ 0x4c
 80030a6:	2204      	movs	r2, #4
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e014      	b.n	80030d6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	334c      	adds	r3, #76	@ 0x4c
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e009      	b.n	80030d6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	334c      	adds	r3, #76	@ 0x4c
 80030d2:	2202      	movs	r2, #2
 80030d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3326      	adds	r3, #38	@ 0x26
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3326      	adds	r3, #38	@ 0x26
 80030fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f040 8136 	bne.w	8003370 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800311a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003122:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e11b      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	@ 0x4d
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b03      	cmp	r3, #3
 800314c:	f040 8081 	bne.w	8003252 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	334d      	adds	r3, #77	@ 0x4d
 8003160:	2202      	movs	r2, #2
 8003162:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	331b      	adds	r3, #27
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 80fa 	bne.w	8003370 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	334c      	adds	r3, #76	@ 0x4c
 800318c:	2202      	movs	r2, #2
 800318e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	0151      	lsls	r1, r2, #5
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	440a      	add	r2, r1
 80031c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ce:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	0151      	lsls	r1, r2, #5
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	440a      	add	r2, r1
 80031e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ea:	f023 0320 	bic.w	r3, r3, #32
 80031ee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3326      	adds	r3, #38	@ 0x26
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3326      	adds	r3, #38	@ 0x26
 8003216:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003218:	2b02      	cmp	r3, #2
 800321a:	f040 80a9 	bne.w	8003370 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003234:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800323c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e08e      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334d      	adds	r3, #77	@ 0x4d
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d143      	bne.n	80032f0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334d      	adds	r3, #77	@ 0x4d
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	334c      	adds	r3, #76	@ 0x4c
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3326      	adds	r3, #38	@ 0x26
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3326      	adds	r3, #38	@ 0x26
 80032b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d159      	bne.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e8:	461a      	mov	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e03f      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	334d      	adds	r3, #77	@ 0x4d
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d126      	bne.n	8003354 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334d      	adds	r3, #77	@ 0x4d
 8003316:	2202      	movs	r2, #2
 8003318:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3344      	adds	r3, #68	@ 0x44
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	3344      	adds	r3, #68	@ 0x44
 800333c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334c      	adds	r3, #76	@ 0x4c
 800334e:	2204      	movs	r2, #4
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e00d      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	334d      	adds	r3, #77	@ 0x4d
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b02      	cmp	r3, #2
 8003368:	f000 8100 	beq.w	800356c <HCD_HC_IN_IRQHandler+0xcca>
 800336c:	e000      	b.n	8003370 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800336e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334c      	adds	r3, #76	@ 0x4c
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f00b fc40 	bl	800ec0c <HAL_HCD_HC_NotifyURBChange_Callback>
 800338c:	e0ef      	b.n	800356e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f002 f97d 	bl	8005696 <USB_ReadChInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a2:	2b40      	cmp	r3, #64	@ 0x40
 80033a4:	d12f      	bne.n	8003406 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b2:	461a      	mov	r2, r3
 80033b4:	2340      	movs	r3, #64	@ 0x40
 80033b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	2205      	movs	r2, #5
 80033ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	331a      	adds	r3, #26
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3344      	adds	r3, #68	@ 0x44
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f002 feed 	bl	80061de <USB_HC_Halt>
 8003404:	e0b3      	b.n	800356e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f002 f941 	bl	8005696 <USB_ReadChInterrupts>
 8003414:	4603      	mov	r3, r0
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	f040 80a7 	bne.w	800356e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3326      	adds	r3, #38	@ 0x26
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d11b      	bne.n	800346e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	@ 0x44
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334d      	adds	r3, #77	@ 0x4d
 800345a:	2204      	movs	r2, #4
 800345c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f002 feb9 	bl	80061de <USB_HC_Halt>
 800346c:	e03f      	b.n	80034ee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3326      	adds	r3, #38	@ 0x26
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3326      	adds	r3, #38	@ 0x26
 8003494:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003496:	2b02      	cmp	r3, #2
 8003498:	d129      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3344      	adds	r3, #68	@ 0x44
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	799b      	ldrb	r3, [r3, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HCD_HC_IN_IRQHandler+0xc2a>
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	331b      	adds	r3, #27
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d110      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	334d      	adds	r3, #77	@ 0x4d
 80034dc:	2204      	movs	r2, #4
 80034de:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 fe78 	bl	80061de <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	331b      	adds	r3, #27
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d129      	bne.n	8003558 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	331b      	adds	r3, #27
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	440a      	add	r2, r1
 800352e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003536:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	440a      	add	r2, r1
 800354e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003552:	f043 0320 	orr.w	r3, r3, #32
 8003556:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003564:	461a      	mov	r2, r3
 8003566:	2310      	movs	r3, #16
 8003568:	6093      	str	r3, [r2, #8]
 800356a:	e000      	b.n	800356e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800356c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f002 f87f 	bl	8005696 <USB_ReadChInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d11b      	bne.n	80035da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	2304      	movs	r3, #4
 80035b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	334d      	adds	r3, #77	@ 0x4d
 80035c4:	2207      	movs	r2, #7
 80035c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 fe04 	bl	80061de <USB_HC_Halt>
 80035d6:	f000 bc89 	b.w	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 f857 	bl	8005696 <USB_ReadChInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	f040 8082 	bne.w	80036f8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003600:	461a      	mov	r2, r3
 8003602:	2320      	movs	r3, #32
 8003604:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	3319      	adds	r3, #25
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d124      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3319      	adds	r3, #25
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	@ 0x4c
 8003640:	2202      	movs	r2, #2
 8003642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	334d      	adds	r3, #77	@ 0x4d
 8003654:	2203      	movs	r2, #3
 8003656:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fdbc 	bl	80061de <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	331a      	adds	r3, #26
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 8437 	bne.w	8003eec <HCD_HC_OUT_IRQHandler+0x978>
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	331b      	adds	r3, #27
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 842b 	bne.w	8003eec <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3326      	adds	r3, #38	@ 0x26
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d009      	beq.n	80036c0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	331b      	adds	r3, #27
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	@ 0x4d
 80036d0:	2203      	movs	r2, #3
 80036d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fd7e 	bl	80061de <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3344      	adds	r3, #68	@ 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e3f9      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f001 ffc8 	bl	8005696 <USB_ReadChInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003710:	d111      	bne.n	8003736 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371e:	461a      	mov	r2, r3
 8003720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003724:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f002 fd55 	bl	80061de <USB_HC_Halt>
 8003734:	e3da      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f001 ffa9 	bl	8005696 <USB_ReadChInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d168      	bne.n	8003820 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3344      	adds	r3, #68	@ 0x44
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f001 ff93 	bl	8005696 <USB_ReadChInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003776:	2b40      	cmp	r3, #64	@ 0x40
 8003778:	d112      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3319      	adds	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	2340      	movs	r3, #64	@ 0x40
 800379e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	331b      	adds	r3, #27
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d019      	beq.n	80037ea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	331b      	adds	r3, #27
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	2301      	movs	r3, #1
 80037fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	334d      	adds	r3, #77	@ 0x4d
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f002 fce0 	bl	80061de <USB_HC_Halt>
 800381e:	e365      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f001 ff34 	bl	8005696 <USB_ReadChInterrupts>
 800382e:	4603      	mov	r3, r0
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d139      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	334d      	adds	r3, #77	@ 0x4d
 8003848:	2205      	movs	r2, #5
 800384a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	331a      	adds	r3, #26
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3319      	adds	r3, #25
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3344      	adds	r3, #68	@ 0x44
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fca3 	bl	80061de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a4:	461a      	mov	r2, r3
 80038a6:	2340      	movs	r3, #64	@ 0x40
 80038a8:	6093      	str	r3, [r2, #8]
 80038aa:	e31f      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 feee 	bl	8005696 <USB_ReadChInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d11a      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2308      	movs	r3, #8
 80038d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334d      	adds	r3, #77	@ 0x4d
 80038e6:	2206      	movs	r2, #6
 80038e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 fc73 	bl	80061de <USB_HC_Halt>
 80038f8:	e2f8      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fec7 	bl	8005696 <USB_ReadChInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d144      	bne.n	800399c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	3344      	adds	r3, #68	@ 0x44
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	334d      	adds	r3, #77	@ 0x4d
 8003936:	2204      	movs	r2, #4
 8003938:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3319      	adds	r3, #25
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d114      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3318      	adds	r3, #24
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3319      	adds	r3, #25
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f002 fc2b 	bl	80061de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003994:	461a      	mov	r2, r3
 8003996:	2310      	movs	r3, #16
 8003998:	6093      	str	r3, [r2, #8]
 800399a:	e2a7      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fe76 	bl	8005696 <USB_ReadChInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b0:	2b80      	cmp	r3, #128	@ 0x80
 80039b2:	f040 8083 	bne.w	8003abc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	799b      	ldrb	r3, [r3, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d111      	bne.n	80039e2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	334d      	adds	r3, #77	@ 0x4d
 80039ce:	2207      	movs	r2, #7
 80039d0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fbff 	bl	80061de <USB_HC_Halt>
 80039e0:	e062      	b.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3344      	adds	r3, #68	@ 0x44
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4403      	add	r3, r0
 8003a02:	3344      	adds	r3, #68	@ 0x44
 8003a04:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3344      	adds	r3, #68	@ 0x44
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d922      	bls.n	8003a62 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3344      	adds	r3, #68	@ 0x44
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334c      	adds	r3, #76	@ 0x4c
 8003a40:	2204      	movs	r2, #4
 8003a42:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	334c      	adds	r3, #76	@ 0x4c
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f00b f8d6 	bl	800ec0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a60:	e022      	b.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	334c      	adds	r3, #76	@ 0x4c
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a8c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a94:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	6093      	str	r3, [r2, #8]
 8003aba:	e217      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fde6 	bl	8005696 <USB_ReadChInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad4:	d11b      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334d      	adds	r3, #77	@ 0x4d
 8003ae6:	2209      	movs	r2, #9
 8003ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 fb73 	bl	80061de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b04:	461a      	mov	r2, r3
 8003b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b0a:	6093      	str	r3, [r2, #8]
 8003b0c:	e1ee      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fdbd 	bl	8005696 <USB_ReadChInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f040 81df 	bne.w	8003ee6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	2302      	movs	r3, #2
 8003b38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	334d      	adds	r3, #77	@ 0x4d
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f040 8093 	bne.w	8003c78 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	334d      	adds	r3, #77	@ 0x4d
 8003b62:	2202      	movs	r2, #2
 8003b64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	334c      	adds	r3, #76	@ 0x4c
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3326      	adds	r3, #38	@ 0x26
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00b      	beq.n	8003ba8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3326      	adds	r3, #38	@ 0x26
 8003ba0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f040 8190 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	799b      	ldrb	r3, [r3, #6]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d115      	bne.n	8003bdc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	333d      	adds	r3, #61	@ 0x3d
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2d8      	uxtb	r0, r3
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333d      	adds	r3, #61	@ 0x3d
 8003bd8:	4602      	mov	r2, r0
 8003bda:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	799b      	ldrb	r3, [r3, #6]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 8171 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3334      	adds	r3, #52	@ 0x34
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8165 	beq.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3334      	adds	r3, #52	@ 0x34
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4403      	add	r3, r0
 8003c1e:	3328      	adds	r3, #40	@ 0x28
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	440b      	add	r3, r1
 8003c24:	1e59      	subs	r1, r3, #1
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4403      	add	r3, r0
 8003c34:	3328      	adds	r3, #40	@ 0x28
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 813f 	beq.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	333d      	adds	r3, #61	@ 0x3d
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2d8      	uxtb	r0, r3
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	333d      	adds	r3, #61	@ 0x3d
 8003c72:	4602      	mov	r2, r0
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e127      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334d      	adds	r3, #77	@ 0x4d
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d120      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334d      	adds	r3, #77	@ 0x4d
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	331b      	adds	r3, #27
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 8107 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334c      	adds	r3, #76	@ 0x4c
 8003cca:	2202      	movs	r2, #2
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e0fb      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334d      	adds	r3, #77	@ 0x4d
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d13a      	bne.n	8003d5c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	334d      	adds	r3, #77	@ 0x4d
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334c      	adds	r3, #76	@ 0x4c
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	331b      	adds	r3, #27
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 80d1 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	331b      	adds	r3, #27
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d58:	6053      	str	r3, [r2, #4]
 8003d5a:	e0b5      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	334d      	adds	r3, #77	@ 0x4d
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d114      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	334d      	adds	r3, #77	@ 0x4d
 8003d82:	2202      	movs	r2, #2
 8003d84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	334c      	adds	r3, #76	@ 0x4c
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e095      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	334d      	adds	r3, #77	@ 0x4d
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d114      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	334d      	adds	r3, #77	@ 0x4d
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334c      	adds	r3, #76	@ 0x4c
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e075      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	334d      	adds	r3, #77	@ 0x4d
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	d00a      	beq.n	8003e08 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	334d      	adds	r3, #77	@ 0x4d
 8003e02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e04:	2b09      	cmp	r3, #9
 8003e06:	d170      	bne.n	8003eea <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334d      	adds	r3, #77	@ 0x4d
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3344      	adds	r3, #68	@ 0x44
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1c59      	adds	r1, r3, #1
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4403      	add	r3, r0
 8003e3c:	3344      	adds	r3, #68	@ 0x44
 8003e3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3344      	adds	r3, #68	@ 0x44
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d914      	bls.n	8003e80 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	3344      	adds	r3, #68	@ 0x44
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334c      	adds	r3, #76	@ 0x4c
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e7e:	e022      	b.n	8003ec6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334c      	adds	r3, #76	@ 0x4c
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eaa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ec6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	334c      	adds	r3, #76	@ 0x4c
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f00a fe94 	bl	800ec0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ee4:	e002      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003eea:	bf00      	nop
  }
}
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b08a      	sub	sp, #40	@ 0x28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	0c5b      	lsrs	r3, r3, #17
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d004      	beq.n	8003f38 <HCD_RXQLVL_IRQHandler+0x46>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	f000 80b6 	beq.w	80040a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f36:	e0b7      	b.n	80040a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80b3 	beq.w	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	332c      	adds	r3, #44	@ 0x2c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a7 	beq.w	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3338      	adds	r3, #56	@ 0x38
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	18d1      	adds	r1, r2, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4403      	add	r3, r0
 8003f7c:	3334      	adds	r3, #52	@ 0x34
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4299      	cmp	r1, r3
 8003f82:	f200 8083 	bhi.w	800408c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	332c      	adds	r3, #44	@ 0x2c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f001 fb0d 	bl	80055c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	332c      	adds	r3, #44	@ 0x2c
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	18d1      	adds	r1, r2, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4403      	add	r3, r0
 8003fca:	332c      	adds	r3, #44	@ 0x2c
 8003fcc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3338      	adds	r3, #56	@ 0x38
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	18d1      	adds	r1, r2, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4403      	add	r3, r0
 8003ff2:	3338      	adds	r3, #56	@ 0x38
 8003ff4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	0cdb      	lsrs	r3, r3, #19
 8004006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4293      	cmp	r3, r2
 8004024:	d13f      	bne.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d03c      	beq.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004042:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800404a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	333c      	adds	r3, #60	@ 0x3c
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f083 0301 	eor.w	r3, r3, #1
 8004074:	b2d8      	uxtb	r0, r3
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	333c      	adds	r3, #60	@ 0x3c
 8004086:	4602      	mov	r2, r0
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e00c      	b.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334c      	adds	r3, #76	@ 0x4c
 800409c:	2204      	movs	r2, #4
 800409e:	701a      	strb	r2, [r3, #0]
      break;
 80040a0:	e001      	b.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80040a6:	bf00      	nop
  }
}
 80040a8:	bf00      	nop
 80040aa:	3728      	adds	r7, #40	@ 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80040dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d10b      	bne.n	8004100 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f00a fd6e 	bl	800ebd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b08      	cmp	r3, #8
 8004108:	d132      	bne.n	8004170 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d126      	bne.n	800416a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7a5b      	ldrb	r3, [r3, #9]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d113      	bne.n	800414c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800412a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800412e:	d106      	bne.n	800413e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fbd2 	bl	80058e0 <USB_InitFSLSPClkSel>
 800413c:	e011      	b.n	8004162 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fbcb 	bl	80058e0 <USB_InitFSLSPClkSel>
 800414a:	e00a      	b.n	8004162 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	79db      	ldrb	r3, [r3, #7]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d106      	bne.n	8004162 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800415a:	461a      	mov	r2, r3
 800415c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004160:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f00a fd60 	bl	800ec28 <HAL_HCD_PortEnabled_Callback>
 8004168:	e002      	b.n	8004170 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f00a fd6a 	bl	800ec44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d103      	bne.n	8004182 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f043 0320 	orr.w	r3, r3, #32
 8004180:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6013      	str	r3, [r2, #0]
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e267      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d075      	beq.n	80042a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041b6:	4b88      	ldr	r3, [pc, #544]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00c      	beq.n	80041dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c2:	4b85      	ldr	r3, [pc, #532]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d112      	bne.n	80041f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ce:	4b82      	ldr	r3, [pc, #520]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041da:	d10b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	4b7e      	ldr	r3, [pc, #504]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d05b      	beq.n	80042a0 <HAL_RCC_OscConfig+0x108>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d157      	bne.n	80042a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e242      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fc:	d106      	bne.n	800420c <HAL_RCC_OscConfig+0x74>
 80041fe:	4b76      	ldr	r3, [pc, #472]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e01d      	b.n	8004248 <HAL_RCC_OscConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004214:	d10c      	bne.n	8004230 <HAL_RCC_OscConfig+0x98>
 8004216:	4b70      	ldr	r3, [pc, #448]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6f      	ldr	r2, [pc, #444]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 800421c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b6d      	ldr	r3, [pc, #436]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6c      	ldr	r2, [pc, #432]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e00b      	b.n	8004248 <HAL_RCC_OscConfig+0xb0>
 8004230:	4b69      	ldr	r3, [pc, #420]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a68      	ldr	r2, [pc, #416]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b66      	ldr	r3, [pc, #408]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a65      	ldr	r2, [pc, #404]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fd fb76 	bl	8001940 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004258:	f7fd fb72 	bl	8001940 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	@ 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e207      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b5b      	ldr	r3, [pc, #364]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0xc0>
 8004276:	e014      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd fb62 	bl	8001940 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd fb5e 	bl	8001940 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	@ 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e1f3      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	4b51      	ldr	r3, [pc, #324]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0xe8>
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d063      	beq.n	8004376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042ae:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ba:	4b47      	ldr	r3, [pc, #284]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d11c      	bne.n	8004300 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c6:	4b44      	ldr	r3, [pc, #272]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d116      	bne.n	8004300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	4b41      	ldr	r3, [pc, #260]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_RCC_OscConfig+0x152>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d001      	beq.n	80042ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e1c7      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ea:	4b3b      	ldr	r3, [pc, #236]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4937      	ldr	r1, [pc, #220]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	e03a      	b.n	8004376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004308:	4b34      	ldr	r3, [pc, #208]	@ (80043dc <HAL_RCC_OscConfig+0x244>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fd fb17 	bl	8001940 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004316:	f7fd fb13 	bl	8001940 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e1a8      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	4b2b      	ldr	r3, [pc, #172]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004334:	4b28      	ldr	r3, [pc, #160]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4925      	ldr	r1, [pc, #148]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]
 8004348:	e015      	b.n	8004376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434a:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <HAL_RCC_OscConfig+0x244>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd faf6 	bl	8001940 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fd faf2 	bl	8001940 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e187      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	4b1b      	ldr	r3, [pc, #108]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d036      	beq.n	80043f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <HAL_RCC_OscConfig+0x248>)
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd fad6 	bl	8001940 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7fd fad2 	bl	8001940 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e167      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <HAL_RCC_OscConfig+0x240>)
 80043ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x200>
 80043b6:	e01b      	b.n	80043f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b8:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <HAL_RCC_OscConfig+0x248>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043be:	f7fd fabf 	bl	8001940 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c4:	e00e      	b.n	80043e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fd fabb 	bl	8001940 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d907      	bls.n	80043e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e150      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470000 	.word	0x42470000
 80043e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	4b88      	ldr	r3, [pc, #544]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ea      	bne.n	80043c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8097 	beq.w	800452c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b81      	ldr	r3, [pc, #516]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10f      	bne.n	800442e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	4b7d      	ldr	r3, [pc, #500]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	4a7c      	ldr	r2, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	@ 0x40
 800441e:	4b7a      	ldr	r3, [pc, #488]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	4b77      	ldr	r3, [pc, #476]	@ (800460c <HAL_RCC_OscConfig+0x474>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d118      	bne.n	800446c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443a:	4b74      	ldr	r3, [pc, #464]	@ (800460c <HAL_RCC_OscConfig+0x474>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a73      	ldr	r2, [pc, #460]	@ (800460c <HAL_RCC_OscConfig+0x474>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004446:	f7fd fa7b 	bl	8001940 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444e:	f7fd fa77 	bl	8001940 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e10c      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	4b6a      	ldr	r3, [pc, #424]	@ (800460c <HAL_RCC_OscConfig+0x474>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d106      	bne.n	8004482 <HAL_RCC_OscConfig+0x2ea>
 8004474:	4b64      	ldr	r3, [pc, #400]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4a63      	ldr	r2, [pc, #396]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004480:	e01c      	b.n	80044bc <HAL_RCC_OscConfig+0x324>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b05      	cmp	r3, #5
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x30c>
 800448a:	4b5f      	ldr	r3, [pc, #380]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	4a5e      	ldr	r2, [pc, #376]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	6713      	str	r3, [r2, #112]	@ 0x70
 8004496:	4b5c      	ldr	r3, [pc, #368]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	4a5b      	ldr	r2, [pc, #364]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0x324>
 80044a4:	4b58      	ldr	r3, [pc, #352]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4a57      	ldr	r2, [pc, #348]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b0:	4b55      	ldr	r3, [pc, #340]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b4:	4a54      	ldr	r2, [pc, #336]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80044b6:	f023 0304 	bic.w	r3, r3, #4
 80044ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fa3c 	bl	8001940 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd fa38 	bl	8001940 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0cb      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	4b49      	ldr	r3, [pc, #292]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ee      	beq.n	80044cc <HAL_RCC_OscConfig+0x334>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7fd fa26 	bl	8001940 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd fa22 	bl	8001940 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0b5      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450e:	4b3e      	ldr	r3, [pc, #248]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ee      	bne.n	80044f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004520:	4b39      	ldr	r3, [pc, #228]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	4a38      	ldr	r2, [pc, #224]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a1 	beq.w	8004678 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004536:	4b34      	ldr	r3, [pc, #208]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b08      	cmp	r3, #8
 8004540:	d05c      	beq.n	80045fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d141      	bne.n	80045ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454a:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_RCC_OscConfig+0x478>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd f9f6 	bl	8001940 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd f9f2 	bl	8001940 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e087      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	4b27      	ldr	r3, [pc, #156]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	019b      	lsls	r3, r3, #6
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	3b01      	subs	r3, #1
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	061b      	lsls	r3, r3, #24
 800459a:	491b      	ldr	r1, [pc, #108]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <HAL_RCC_OscConfig+0x478>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a6:	f7fd f9cb 	bl	8001940 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fd f9c7 	bl	8001940 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e05c      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c0:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x416>
 80045cc:	e054      	b.n	8004678 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <HAL_RCC_OscConfig+0x478>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fd f9b4 	bl	8001940 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd f9b0 	bl	8001940 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e045      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_RCC_OscConfig+0x470>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x444>
 80045fa:	e03d      	b.n	8004678 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e038      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004614:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_RCC_OscConfig+0x4ec>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d028      	beq.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d121      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d11a      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800464a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464c:	4293      	cmp	r3, r2
 800464e:	d111      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	3b01      	subs	r3, #1
 800465e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d107      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800

08004688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0cc      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b68      	ldr	r3, [pc, #416]	@ (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d90c      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b65      	ldr	r3, [pc, #404]	@ (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b63      	ldr	r3, [pc, #396]	@ (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b8      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046dc:	4b59      	ldr	r3, [pc, #356]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a58      	ldr	r2, [pc, #352]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f4:	4b53      	ldr	r3, [pc, #332]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a52      	ldr	r2, [pc, #328]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b50      	ldr	r3, [pc, #320]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	494d      	ldr	r1, [pc, #308]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d044      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	4b47      	ldr	r3, [pc, #284]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d119      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b3f      	ldr	r3, [pc, #252]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e06f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b3b      	ldr	r3, [pc, #236]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e067      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4934      	ldr	r1, [pc, #208]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004778:	f7fd f8e2 	bl	8001940 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd f8de 	bl	8001940 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e04f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b2b      	ldr	r3, [pc, #172]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b25      	ldr	r3, [pc, #148]	@ (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d20c      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b20      	ldr	r3, [pc, #128]	@ (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e032      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047dc:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4916      	ldr	r1, [pc, #88]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fa:	4b12      	ldr	r3, [pc, #72]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	490e      	ldr	r1, [pc, #56]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480e:	f000 f821 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8004812:	4602      	mov	r2, r0
 8004814:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	490a      	ldr	r1, [pc, #40]	@ (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	5ccb      	ldrb	r3, [r1, r3]
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	4a09      	ldr	r2, [pc, #36]	@ (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd f842 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023c00 	.word	0x40023c00
 8004844:	40023800 	.word	0x40023800
 8004848:	0800ff88 	.word	0x0800ff88
 800484c:	20000000 	.word	0x20000000
 8004850:	20000004 	.word	0x20000004

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b094      	sub	sp, #80	@ 0x50
 800485a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486c:	4b79      	ldr	r3, [pc, #484]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b08      	cmp	r3, #8
 8004876:	d00d      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x40>
 8004878:	2b08      	cmp	r3, #8
 800487a:	f200 80e1 	bhi.w	8004a40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x34>
 8004882:	2b04      	cmp	r3, #4
 8004884:	d003      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0x3a>
 8004886:	e0db      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4b73      	ldr	r3, [pc, #460]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x204>)
 800488a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800488c:	e0db      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800488e:	4b73      	ldr	r3, [pc, #460]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004892:	e0d8      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004894:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800489c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800489e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	2200      	movs	r2, #0
 80048b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f04f 0000 	mov.w	r0, #0
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	0159      	lsls	r1, r3, #5
 80048d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d8:	0150      	lsls	r0, r2, #5
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4621      	mov	r1, r4
 80048e0:	1a51      	subs	r1, r2, r1
 80048e2:	6139      	str	r1, [r7, #16]
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f8:	4659      	mov	r1, fp
 80048fa:	018b      	lsls	r3, r1, #6
 80048fc:	4651      	mov	r1, sl
 80048fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004902:	4651      	mov	r1, sl
 8004904:	018a      	lsls	r2, r1, #6
 8004906:	4651      	mov	r1, sl
 8004908:	ebb2 0801 	subs.w	r8, r2, r1
 800490c:	4659      	mov	r1, fp
 800490e:	eb63 0901 	sbc.w	r9, r3, r1
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004926:	4690      	mov	r8, r2
 8004928:	4699      	mov	r9, r3
 800492a:	4623      	mov	r3, r4
 800492c:	eb18 0303 	adds.w	r3, r8, r3
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	462b      	mov	r3, r5
 8004934:	eb49 0303 	adc.w	r3, r9, r3
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004946:	4629      	mov	r1, r5
 8004948:	024b      	lsls	r3, r1, #9
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004950:	4621      	mov	r1, r4
 8004952:	024a      	lsls	r2, r1, #9
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495a:	2200      	movs	r2, #0
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800495e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004960:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004964:	f7fb ffa2 	bl	80008ac <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004970:	e058      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004972:	4b38      	ldr	r3, [pc, #224]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	2200      	movs	r2, #0
 800497a:	4618      	mov	r0, r3
 800497c:	4611      	mov	r1, r2
 800497e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
 8004988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	f04f 0000 	mov.w	r0, #0
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	0159      	lsls	r1, r3, #5
 800499a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499e:	0150      	lsls	r0, r2, #5
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4641      	mov	r1, r8
 80049a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049aa:	4649      	mov	r1, r9
 80049ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c4:	ebb2 040a 	subs.w	r4, r2, sl
 80049c8:	eb63 050b 	sbc.w	r5, r3, fp
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	00eb      	lsls	r3, r5, #3
 80049d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049da:	00e2      	lsls	r2, r4, #3
 80049dc:	4614      	mov	r4, r2
 80049de:	461d      	mov	r5, r3
 80049e0:	4643      	mov	r3, r8
 80049e2:	18e3      	adds	r3, r4, r3
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	464b      	mov	r3, r9
 80049e8:	eb45 0303 	adc.w	r3, r5, r3
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049fa:	4629      	mov	r1, r5
 80049fc:	028b      	lsls	r3, r1, #10
 80049fe:	4621      	mov	r1, r4
 8004a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a04:	4621      	mov	r1, r4
 8004a06:	028a      	lsls	r2, r1, #10
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	61fa      	str	r2, [r7, #28]
 8004a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a18:	f7fb ff48 	bl	80008ac <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a3e:	e002      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3750      	adds	r7, #80	@ 0x50
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	007a1200 	.word	0x007a1200

08004a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a64:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000000 	.word	0x20000000

08004a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a7c:	f7ff fff0 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	@ (8004a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	0800ff98 	.word	0x0800ff98

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aa4:	f7ff ffdc 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0b5b      	lsrs	r3, r3, #13
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	@ (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	0800ff98 	.word	0x0800ff98

08004ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e042      	b.n	8004b60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc fdcc 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	@ 0x24
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f973 	bl	8004df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d175      	bne.n	8004c74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UART_Transmit+0x2c>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e06e      	b.n	8004c76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2221      	movs	r2, #33	@ 0x21
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba6:	f7fc fecb 	bl	8001940 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc0:	d108      	bne.n	8004bd4 <HAL_UART_Transmit+0x6c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e003      	b.n	8004bdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bdc:	e02e      	b.n	8004c3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2180      	movs	r1, #128	@ 0x80
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f848 	bl	8004c7e <UART_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e03a      	b.n	8004c76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e007      	b.n	8004c2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1cb      	bne.n	8004bde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2140      	movs	r1, #64	@ 0x40
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f814 	bl	8004c7e <UART_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e006      	b.n	8004c76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8e:	e03b      	b.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d037      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c98:	f7fc fe52 	bl	8001940 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d302      	bcc.n	8004cae <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e03a      	b.n	8004d28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d023      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b80      	cmp	r3, #128	@ 0x80
 8004cc4:	d020      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d01d      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d116      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f81d 	bl	8004d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e00f      	b.n	8004d28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d0b4      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b095      	sub	sp, #84	@ 0x54
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d58:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3314      	adds	r3, #20
 8004d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d119      	bne.n	8004ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0310 	bic.w	r3, r3, #16
 8004dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc8:	61ba      	str	r2, [r7, #24]
 8004dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dea:	bf00      	nop
 8004dec:	3754      	adds	r7, #84	@ 0x54
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dfc:	b0c0      	sub	sp, #256	@ 0x100
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	68d9      	ldr	r1, [r3, #12]
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	ea40 0301 	orr.w	r3, r0, r1
 8004e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e50:	f021 010c 	bic.w	r1, r1, #12
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e72:	6999      	ldr	r1, [r3, #24]
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	ea40 0301 	orr.w	r3, r0, r1
 8004e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4b8f      	ldr	r3, [pc, #572]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d005      	beq.n	8004e98 <UART_SetConfig+0xa0>
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b8d      	ldr	r3, [pc, #564]	@ (80050c8 <UART_SetConfig+0x2d0>)
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d104      	bne.n	8004ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7ff fe02 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ea0:	e003      	b.n	8004eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ea2:	f7ff fde9 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8004ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb4:	f040 810c 	bne.w	80050d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	1891      	adds	r1, r2, r2
 8004ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ed2:	415b      	adcs	r3, r3
 8004ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eda:	4621      	mov	r1, r4
 8004edc:	eb12 0801 	adds.w	r8, r2, r1
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	eb43 0901 	adc.w	r9, r3, r1
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004efa:	4690      	mov	r8, r2
 8004efc:	4699      	mov	r9, r3
 8004efe:	4623      	mov	r3, r4
 8004f00:	eb18 0303 	adds.w	r3, r8, r3
 8004f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f08:	462b      	mov	r3, r5
 8004f0a:	eb49 0303 	adc.w	r3, r9, r3
 8004f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f26:	460b      	mov	r3, r1
 8004f28:	18db      	adds	r3, r3, r3
 8004f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	eb42 0303 	adc.w	r3, r2, r3
 8004f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f3c:	f7fb fcb6 	bl	80008ac <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4b61      	ldr	r3, [pc, #388]	@ (80050cc <UART_SetConfig+0x2d4>)
 8004f46:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	011c      	lsls	r4, r3, #4
 8004f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f60:	4642      	mov	r2, r8
 8004f62:	464b      	mov	r3, r9
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f70:	4641      	mov	r1, r8
 8004f72:	eb12 0a01 	adds.w	sl, r2, r1
 8004f76:	4649      	mov	r1, r9
 8004f78:	eb43 0b01 	adc.w	fp, r3, r1
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f90:	4692      	mov	sl, r2
 8004f92:	469b      	mov	fp, r3
 8004f94:	4643      	mov	r3, r8
 8004f96:	eb1a 0303 	adds.w	r3, sl, r3
 8004f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	18db      	adds	r3, r3, r3
 8004fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fd2:	f7fb fc6b 	bl	80008ac <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <UART_SetConfig+0x2d4>)
 8004fde:	fba3 2301 	umull	r2, r3, r3, r1
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2264      	movs	r2, #100	@ 0x64
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	1acb      	subs	r3, r1, r3
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ff2:	4b36      	ldr	r3, [pc, #216]	@ (80050cc <UART_SetConfig+0x2d4>)
 8004ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005000:	441c      	add	r4, r3
 8005002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005006:	2200      	movs	r2, #0
 8005008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800500c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005014:	4642      	mov	r2, r8
 8005016:	464b      	mov	r3, r9
 8005018:	1891      	adds	r1, r2, r2
 800501a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800501c:	415b      	adcs	r3, r3
 800501e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005024:	4641      	mov	r1, r8
 8005026:	1851      	adds	r1, r2, r1
 8005028:	6339      	str	r1, [r7, #48]	@ 0x30
 800502a:	4649      	mov	r1, r9
 800502c:	414b      	adcs	r3, r1
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800503c:	4659      	mov	r1, fp
 800503e:	00cb      	lsls	r3, r1, #3
 8005040:	4651      	mov	r1, sl
 8005042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005046:	4651      	mov	r1, sl
 8005048:	00ca      	lsls	r2, r1, #3
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	4603      	mov	r3, r0
 8005050:	4642      	mov	r2, r8
 8005052:	189b      	adds	r3, r3, r2
 8005054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005058:	464b      	mov	r3, r9
 800505a:	460a      	mov	r2, r1
 800505c:	eb42 0303 	adc.w	r3, r2, r3
 8005060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005078:	460b      	mov	r3, r1
 800507a:	18db      	adds	r3, r3, r3
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507e:	4613      	mov	r3, r2
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800508a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800508e:	f7fb fc0d 	bl	80008ac <__aeabi_uldivmod>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4b0d      	ldr	r3, [pc, #52]	@ (80050cc <UART_SetConfig+0x2d4>)
 8005098:	fba3 1302 	umull	r1, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	2164      	movs	r1, #100	@ 0x64
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	3332      	adds	r3, #50	@ 0x32
 80050aa:	4a08      	ldr	r2, [pc, #32]	@ (80050cc <UART_SetConfig+0x2d4>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4422      	add	r2, r4
 80050be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050c0:	e106      	b.n	80052d0 <UART_SetConfig+0x4d8>
 80050c2:	bf00      	nop
 80050c4:	40011000 	.word	0x40011000
 80050c8:	40011400 	.word	0x40011400
 80050cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050e2:	4642      	mov	r2, r8
 80050e4:	464b      	mov	r3, r9
 80050e6:	1891      	adds	r1, r2, r2
 80050e8:	6239      	str	r1, [r7, #32]
 80050ea:	415b      	adcs	r3, r3
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050f2:	4641      	mov	r1, r8
 80050f4:	1854      	adds	r4, r2, r1
 80050f6:	4649      	mov	r1, r9
 80050f8:	eb43 0501 	adc.w	r5, r3, r1
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	00eb      	lsls	r3, r5, #3
 8005106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510a:	00e2      	lsls	r2, r4, #3
 800510c:	4614      	mov	r4, r2
 800510e:	461d      	mov	r5, r3
 8005110:	4643      	mov	r3, r8
 8005112:	18e3      	adds	r3, r4, r3
 8005114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005118:	464b      	mov	r3, r9
 800511a:	eb45 0303 	adc.w	r3, r5, r3
 800511e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800512e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800513e:	4629      	mov	r1, r5
 8005140:	008b      	lsls	r3, r1, #2
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005148:	4621      	mov	r1, r4
 800514a:	008a      	lsls	r2, r1, #2
 800514c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005150:	f7fb fbac 	bl	80008ac <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4b60      	ldr	r3, [pc, #384]	@ (80052dc <UART_SetConfig+0x4e4>)
 800515a:	fba3 2302 	umull	r2, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	011c      	lsls	r4, r3, #4
 8005162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800516c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	1891      	adds	r1, r2, r2
 800517a:	61b9      	str	r1, [r7, #24]
 800517c:	415b      	adcs	r3, r3
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005184:	4641      	mov	r1, r8
 8005186:	1851      	adds	r1, r2, r1
 8005188:	6139      	str	r1, [r7, #16]
 800518a:	4649      	mov	r1, r9
 800518c:	414b      	adcs	r3, r1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800519c:	4659      	mov	r1, fp
 800519e:	00cb      	lsls	r3, r1, #3
 80051a0:	4651      	mov	r1, sl
 80051a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a6:	4651      	mov	r1, sl
 80051a8:	00ca      	lsls	r2, r1, #3
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	4642      	mov	r2, r8
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051b8:	464b      	mov	r3, r9
 80051ba:	460a      	mov	r2, r1
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051dc:	4649      	mov	r1, r9
 80051de:	008b      	lsls	r3, r1, #2
 80051e0:	4641      	mov	r1, r8
 80051e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e6:	4641      	mov	r1, r8
 80051e8:	008a      	lsls	r2, r1, #2
 80051ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051ee:	f7fb fb5d 	bl	80008ac <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	4b38      	ldr	r3, [pc, #224]	@ (80052dc <UART_SetConfig+0x4e4>)
 80051fa:	fba3 2301 	umull	r2, r3, r3, r1
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2264      	movs	r2, #100	@ 0x64
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	1acb      	subs	r3, r1, r3
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	3332      	adds	r3, #50	@ 0x32
 800520c:	4a33      	ldr	r2, [pc, #204]	@ (80052dc <UART_SetConfig+0x4e4>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005218:	441c      	add	r4, r3
 800521a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800521e:	2200      	movs	r2, #0
 8005220:	673b      	str	r3, [r7, #112]	@ 0x70
 8005222:	677a      	str	r2, [r7, #116]	@ 0x74
 8005224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	1891      	adds	r1, r2, r2
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	415b      	adcs	r3, r3
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005238:	4641      	mov	r1, r8
 800523a:	1851      	adds	r1, r2, r1
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	4649      	mov	r1, r9
 8005240:	414b      	adcs	r3, r1
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005250:	4659      	mov	r1, fp
 8005252:	00cb      	lsls	r3, r1, #3
 8005254:	4651      	mov	r1, sl
 8005256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525a:	4651      	mov	r1, sl
 800525c:	00ca      	lsls	r2, r1, #3
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	4603      	mov	r3, r0
 8005264:	4642      	mov	r2, r8
 8005266:	189b      	adds	r3, r3, r2
 8005268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800526a:	464b      	mov	r3, r9
 800526c:	460a      	mov	r2, r1
 800526e:	eb42 0303 	adc.w	r3, r2, r3
 8005272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	663b      	str	r3, [r7, #96]	@ 0x60
 800527e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800528c:	4649      	mov	r1, r9
 800528e:	008b      	lsls	r3, r1, #2
 8005290:	4641      	mov	r1, r8
 8005292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005296:	4641      	mov	r1, r8
 8005298:	008a      	lsls	r2, r1, #2
 800529a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800529e:	f7fb fb05 	bl	80008ac <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4b0d      	ldr	r3, [pc, #52]	@ (80052dc <UART_SetConfig+0x4e4>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	@ 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	3332      	adds	r3, #50	@ 0x32
 80052ba:	4a08      	ldr	r2, [pc, #32]	@ (80052dc <UART_SetConfig+0x4e4>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4422      	add	r2, r4
 80052ce:	609a      	str	r2, [r3, #8]
}
 80052d0:	bf00      	nop
 80052d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052d6:	46bd      	mov	sp, r7
 80052d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052dc:	51eb851f 	.word	0x51eb851f

080052e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e0:	b084      	sub	sp, #16
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	f107 001c 	add.w	r0, r7, #28
 80052ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d123      	bne.n	8005342 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800530e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005322:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9dc 	bl	80056f4 <USB_CoreReset>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e01b      	b.n	800537a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9d0 	bl	80056f4 <USB_CoreReset>
 8005354:	4603      	mov	r3, r0
 8005356:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005358:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38
 800536c:	e005      	b.n	800537a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800537a:	7fbb      	ldrb	r3, [r7, #30]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d10b      	bne.n	8005398 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f043 0206 	orr.w	r2, r3, #6
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a4:	b004      	add	sp, #16
 80053a6:	4770      	bx	lr

080053a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f043 0201 	orr.w	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d115      	bne.n	800543a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800541a:	200a      	movs	r0, #10
 800541c:	f7fc fa9c 	bl	8001958 <HAL_Delay>
      ms += 10U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	330a      	adds	r3, #10
 8005424:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f956 	bl	80056d8 <USB_GetMode>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d01e      	beq.n	8005470 <USB_SetCurrentMode+0x84>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2bc7      	cmp	r3, #199	@ 0xc7
 8005436:	d9f0      	bls.n	800541a <USB_SetCurrentMode+0x2e>
 8005438:	e01a      	b.n	8005470 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d115      	bne.n	800546c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800544c:	200a      	movs	r0, #10
 800544e:	f7fc fa83 	bl	8001958 <HAL_Delay>
      ms += 10U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	330a      	adds	r3, #10
 8005456:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f93d 	bl	80056d8 <USB_GetMode>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <USB_SetCurrentMode+0x84>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2bc7      	cmp	r3, #199	@ 0xc7
 8005468:	d9f0      	bls.n	800544c <USB_SetCurrentMode+0x60>
 800546a:	e001      	b.n	8005470 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e005      	b.n	800547c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2bc8      	cmp	r3, #200	@ 0xc8
 8005474:	d101      	bne.n	800547a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800549e:	d901      	bls.n	80054a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e01b      	b.n	80054dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	daf2      	bge.n	8005492 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	019b      	lsls	r3, r3, #6
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c8:	d901      	bls.n	80054ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e006      	b.n	80054dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d0f0      	beq.n	80054bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005500:	d901      	bls.n	8005506 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e018      	b.n	8005538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	daf2      	bge.n	80054f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2210      	movs	r2, #16
 8005516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005524:	d901      	bls.n	800552a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e006      	b.n	8005538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d0f0      	beq.n	8005518 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	@ 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	460b      	mov	r3, r1
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	4613      	mov	r3, r2
 8005558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d123      	bne.n	80055b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800556a:	88bb      	ldrh	r3, [r7, #4]
 800556c:	3303      	adds	r3, #3
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e018      	b.n	80055aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	031a      	lsls	r2, r3, #12
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005584:	461a      	mov	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	3301      	adds	r3, #1
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3e2      	bcc.n	8005578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3724      	adds	r7, #36	@ 0x24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b08b      	sub	sp, #44	@ 0x2c
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	e014      	b.n	8005616 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	3301      	adds	r3, #1
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	3301      	adds	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	3301      	adds	r3, #1
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	429a      	cmp	r2, r3
 800561c:	d3e6      	bcc.n	80055ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800561e:	8bfb      	ldrh	r3, [r7, #30]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01e      	beq.n	8005662 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800562e:	461a      	mov	r2, r3
 8005630:	f107 0310 	add.w	r3, r7, #16
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	b2da      	uxtb	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	701a      	strb	r2, [r3, #0]
      i++;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3301      	adds	r3, #1
 800564e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	3b01      	subs	r3, #1
 800565a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800565c:	8bfb      	ldrh	r3, [r7, #30]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ea      	bne.n	8005638 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005664:	4618      	mov	r0, r3
 8005666:	372c      	adds	r7, #44	@ 0x2c
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056ca:	68bb      	ldr	r3, [r7, #8]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800570c:	d901      	bls.n	8005712 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e01b      	b.n	800574a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	daf2      	bge.n	8005700 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005736:	d901      	bls.n	800573c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e006      	b.n	800574a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d0f0      	beq.n	800572a <USB_CoreReset+0x36>

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005758:	b084      	sub	sp, #16
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d119      	bne.n	80057e2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10a      	bne.n	80057cc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057c4:	f043 0304 	orr.w	r3, r3, #4
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e014      	b.n	80057f6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057da:	f023 0304 	bic.w	r3, r3, #4
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e009      	b.n	80057f6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057f6:	2110      	movs	r1, #16
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fe43 	bl	8005484 <USB_FlushTxFifo>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fe6d 	bl	80054e8 <USB_FlushRxFifo>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	e015      	b.n	800584a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582a:	461a      	mov	r2, r3
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	3301      	adds	r3, #1
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800584e:	461a      	mov	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4293      	cmp	r3, r2
 8005854:	d3e3      	bcc.n	800581e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f04f 32ff 	mov.w	r2, #4294967295
 8005862:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a18      	ldr	r2, [pc, #96]	@ (80058c8 <USB_HostInit+0x170>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10b      	bne.n	8005884 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005872:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a15      	ldr	r2, [pc, #84]	@ (80058cc <USB_HostInit+0x174>)
 8005878:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a14      	ldr	r2, [pc, #80]	@ (80058d0 <USB_HostInit+0x178>)
 800587e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005882:	e009      	b.n	8005898 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2280      	movs	r2, #128	@ 0x80
 8005888:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a11      	ldr	r2, [pc, #68]	@ (80058d4 <USB_HostInit+0x17c>)
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a11      	ldr	r2, [pc, #68]	@ (80058d8 <USB_HostInit+0x180>)
 8005894:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005898:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f043 0210 	orr.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <USB_HostInit+0x184>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c4:	b004      	add	sp, #16
 80058c6:	4770      	bx	lr
 80058c8:	40040000 	.word	0x40040000
 80058cc:	01000200 	.word	0x01000200
 80058d0:	00e00300 	.word	0x00e00300
 80058d4:	00600080 	.word	0x00600080
 80058d8:	004000e0 	.word	0x004000e0
 80058dc:	a3200008 	.word	0xa3200008

080058e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d107      	bne.n	8005932 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005928:	461a      	mov	r2, r3
 800592a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800592e:	6053      	str	r3, [r2, #4]
 8005930:	e00c      	b.n	800594c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d107      	bne.n	8005948 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593e:	461a      	mov	r2, r3
 8005940:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005944:	6053      	str	r3, [r2, #4]
 8005946:	e001      	b.n	800594c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800597a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005988:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800598a:	2064      	movs	r0, #100	@ 0x64
 800598c:	f7fb ffe4 	bl	8001958 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800599c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800599e:	200a      	movs	r0, #10
 80059a0:	f7fb ffda 	bl	8001958 <HAL_Delay>

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059d2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <USB_DriveVbus+0x44>
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d106      	bne.n	80059f2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059f0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fc:	d109      	bne.n	8005a12 <USB_DriveVbus+0x64>
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a10:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	0c5b      	lsrs	r3, r3, #17
 8005a3e:	f003 0303 	and.w	r3, r3, #3
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	b29b      	uxth	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	4608      	mov	r0, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	70fb      	strb	r3, [r7, #3]
 8005a82:	460b      	mov	r3, r1
 8005a84:	70bb      	strb	r3, [r7, #2]
 8005a86:	4613      	mov	r3, r2
 8005a88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005aa6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d87c      	bhi.n	8005ba8 <USB_HC_Init+0x138>
 8005aae:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <USB_HC_Init+0x44>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005b6b 	.word	0x08005b6b
 8005abc:	08005ac5 	.word	0x08005ac5
 8005ac0:	08005b2d 	.word	0x08005b2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005ad6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ad8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da10      	bge.n	8005b02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005afe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005b00:	e055      	b.n	8005bae <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a6f      	ldr	r2, [pc, #444]	@ (8005cc4 <USB_HC_Init+0x254>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d151      	bne.n	8005bae <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b28:	60d3      	str	r3, [r2, #12]
      break;
 8005b2a:	e040      	b.n	8005bae <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005b3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da34      	bge.n	8005bb2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b68:	e023      	b.n	8005bb2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b76:	461a      	mov	r2, r3
 8005b78:	f240 2325 	movw	r3, #549	@ 0x225
 8005b7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da17      	bge.n	8005bb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ba0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ba4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ba6:	e006      	b.n	8005bb6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	77fb      	strb	r3, [r7, #31]
      break;
 8005bac:	e004      	b.n	8005bb8 <USB_HC_Init+0x148>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <USB_HC_Init+0x148>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <USB_HC_Init+0x148>
      break;
 8005bb6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c04:	4313      	orrs	r3, r2
 8005c06:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da03      	bge.n	8005c24 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e001      	b.n	8005c28 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fef9 	bl	8005a20 <USB_GetHostSpeed>
 8005c2e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d106      	bne.n	8005c46 <USB_HC_Init+0x1d6>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d003      	beq.n	8005c46 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e001      	b.n	8005c4a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c4a:	787b      	ldrb	r3, [r7, #1]
 8005c4c:	059b      	lsls	r3, r3, #22
 8005c4e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c52:	78bb      	ldrb	r3, [r7, #2]
 8005c54:	02db      	lsls	r3, r3, #11
 8005c56:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c5a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c60:	049b      	lsls	r3, r3, #18
 8005c62:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c66:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005c68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c6e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c88:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005c8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d003      	beq.n	8005c9a <USB_HC_Init+0x22a>
 8005c92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d10f      	bne.n	8005cba <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cb8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cba:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40040000 	.word	0x40040000

08005cc8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08c      	sub	sp, #48	@ 0x30
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ce4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e60 <USB_HC_StartXfer+0x198>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d12f      	bne.n	8005d4e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d11c      	bne.n	8005d2e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	7c9b      	ldrb	r3, [r3, #18]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <USB_HC_StartXfer+0x3c>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	7c9b      	ldrb	r3, [r3, #18]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d124      	bne.n	8005d4e <USB_HC_StartXfer+0x86>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	799b      	ldrb	r3, [r3, #6]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d120      	bne.n	8005d4e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2a:	60d3      	str	r3, [r2, #12]
 8005d2c:	e00f      	b.n	8005d4e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	791b      	ldrb	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <USB_HC_StartXfer+0x86>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	795b      	ldrb	r3, [r3, #5]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fb6b 	bl	8006420 <USB_DoPing>
        return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e232      	b.n	80061b4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	799b      	ldrb	r3, [r3, #6]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d158      	bne.n	8005e08 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005d56:	2301      	movs	r3, #1
 8005d58:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	8a92      	ldrh	r2, [r2, #20]
 8005d68:	fb03 f202 	mul.w	r2, r3, r2
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	61da      	str	r2, [r3, #28]
 8005d70:	e07c      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	7c9b      	ldrb	r3, [r3, #18]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d130      	bne.n	8005ddc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005d80:	d918      	bls.n	8005db4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	8a9b      	ldrh	r3, [r3, #20]
 8005d86:	461a      	mov	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d003      	beq.n	8005da4 <USB_HC_StartXfer+0xdc>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d103      	bne.n	8005dac <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2202      	movs	r2, #2
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	e05f      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2201      	movs	r2, #1
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	e05b      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6a1a      	ldr	r2, [r3, #32]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d007      	beq.n	8005dd4 <USB_HC_StartXfer+0x10c>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d003      	beq.n	8005dd4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	e04b      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	e047      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10d      	bne.n	8005dfe <USB_HC_StartXfer+0x136>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	8a92      	ldrh	r2, [r2, #20]
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d907      	bls.n	8005dfe <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	8a92      	ldrh	r2, [r2, #20]
 8005df4:	fb03 f202 	mul.w	r2, r3, r2
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61da      	str	r2, [r3, #28]
 8005dfc:	e036      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61da      	str	r2, [r3, #28]
 8005e06:	e031      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d018      	beq.n	8005e42 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	8a92      	ldrh	r2, [r2, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	8a92      	ldrh	r2, [r2, #20]
 8005e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e24:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005e26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005e28:	8b7b      	ldrh	r3, [r7, #26]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d90b      	bls.n	8005e46 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005e2e:	8b7b      	ldrh	r3, [r7, #26]
 8005e30:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	8a92      	ldrh	r2, [r2, #20]
 8005e38:	fb03 f202 	mul.w	r2, r3, r2
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61da      	str	r2, [r3, #28]
 8005e40:	e001      	b.n	8005e46 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005e42:	2301      	movs	r3, #1
 8005e44:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	78db      	ldrb	r3, [r3, #3]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	8a92      	ldrh	r2, [r2, #20]
 8005e54:	fb03 f202 	mul.w	r2, r3, r2
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61da      	str	r2, [r3, #28]
 8005e5c:	e006      	b.n	8005e6c <USB_HC_StartXfer+0x1a4>
 8005e5e:	bf00      	nop
 8005e60:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e76:	04d9      	lsls	r1, r3, #19
 8005e78:	4ba3      	ldr	r3, [pc, #652]	@ (8006108 <USB_HC_StartXfer+0x440>)
 8005e7a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e7c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	7d9b      	ldrb	r3, [r3, #22]
 8005e82:	075b      	lsls	r3, r3, #29
 8005e84:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	0148      	lsls	r0, r1, #5
 8005e8c:	6a39      	ldr	r1, [r7, #32]
 8005e8e:	4401      	add	r1, r0
 8005e90:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e94:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e96:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6999      	ldr	r1, [r3, #24]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eae:	460a      	mov	r2, r1
 8005eb0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bf0c      	ite	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	2300      	movne	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ee8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	7e7b      	ldrb	r3, [r7, #25]
 8005efa:	075b      	lsls	r3, r3, #29
 8005efc:	69f9      	ldr	r1, [r7, #28]
 8005efe:	0148      	lsls	r0, r1, #5
 8005f00:	6a39      	ldr	r1, [r7, #32]
 8005f02:	4401      	add	r1, r0
 8005f04:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	799b      	ldrb	r3, [r3, #6]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	f040 80c3 	bne.w	800609c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	7c5b      	ldrb	r3, [r3, #17]
 8005f1a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f20:	4313      	orrs	r3, r2
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005f2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f32:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	79db      	ldrb	r3, [r3, #7]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d123      	bne.n	8005fa4 <USB_HC_StartXfer+0x2dc>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	78db      	ldrb	r3, [r3, #3]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11f      	bne.n	8005fa4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f82:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	7c9b      	ldrb	r3, [r3, #18]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d003      	beq.n	8005fb4 <USB_HC_StartXfer+0x2ec>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	7c9b      	ldrb	r3, [r3, #18]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d117      	bne.n	8005fe4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d113      	bne.n	8005fe4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	78db      	ldrb	r3, [r3, #3]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d10f      	bne.n	8005fe4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	7c9b      	ldrb	r3, [r3, #18]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d162      	bne.n	80060b2 <USB_HC_StartXfer+0x3ea>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d15e      	bne.n	80060b2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d858      	bhi.n	80060b0 <USB_HC_StartXfer+0x3e8>
 8005ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <USB_HC_StartXfer+0x33c>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	08006037 	.word	0x08006037
 800600c:	08006059 	.word	0x08006059
 8006010:	0800607b 	.word	0x0800607b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800602e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006032:	6053      	str	r3, [r2, #4]
          break;
 8006034:	e03d      	b.n	80060b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	440a      	add	r2, r1
 800604c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006050:	f043 030e 	orr.w	r3, r3, #14
 8006054:	6053      	str	r3, [r2, #4]
          break;
 8006056:	e02c      	b.n	80060b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	440a      	add	r2, r1
 800606e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006076:	6053      	str	r3, [r2, #4]
          break;
 8006078:	e01b      	b.n	80060b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	6a3a      	ldr	r2, [r7, #32]
 800608e:	440a      	add	r2, r1
 8006090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006098:	6053      	str	r3, [r2, #4]
          break;
 800609a:	e00a      	b.n	80060b2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6053      	str	r3, [r2, #4]
 80060ae:	e000      	b.n	80060b2 <USB_HC_StartXfer+0x3ea>
          break;
 80060b0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060c8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	78db      	ldrb	r3, [r3, #3]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	e003      	b.n	80060e4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060e2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ea:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	461a      	mov	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e055      	b.n	80061b4 <USB_HC_StartXfer+0x4ec>
 8006108:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	78db      	ldrb	r3, [r3, #3]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d14e      	bne.n	80061b2 <USB_HC_StartXfer+0x4ea>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d04a      	beq.n	80061b2 <USB_HC_StartXfer+0x4ea>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	79db      	ldrb	r3, [r3, #7]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d146      	bne.n	80061b2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	7c9b      	ldrb	r3, [r3, #18]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d831      	bhi.n	8006190 <USB_HC_StartXfer+0x4c8>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <USB_HC_StartXfer+0x46c>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006145 	.word	0x08006145
 8006138:	08006169 	.word	0x08006169
 800613c:	08006145 	.word	0x08006145
 8006140:	08006169 	.word	0x08006169
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	3303      	adds	r3, #3
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800614e:	8afa      	ldrh	r2, [r7, #22]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	b29b      	uxth	r3, r3
 8006156:	429a      	cmp	r2, r3
 8006158:	d91c      	bls.n	8006194 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	619a      	str	r2, [r3, #24]
        }
        break;
 8006166:	e015      	b.n	8006194 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	3303      	adds	r3, #3
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006172:	8afa      	ldrh	r2, [r7, #22]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	b29b      	uxth	r3, r3
 800617e:	429a      	cmp	r2, r3
 8006180:	d90a      	bls.n	8006198 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	619a      	str	r2, [r3, #24]
        }
        break;
 800618e:	e003      	b.n	8006198 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006190:	bf00      	nop
 8006192:	e002      	b.n	800619a <USB_HC_StartXfer+0x4d2>
        break;
 8006194:	bf00      	nop
 8006196:	e000      	b.n	800619a <USB_HC_StartXfer+0x4d2>
        break;
 8006198:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6999      	ldr	r1, [r3, #24]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	785a      	ldrb	r2, [r3, #1]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2000      	movs	r0, #0
 80061aa:	9000      	str	r0, [sp, #0]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff f9c9 	bl	8005544 <USB_WritePacket>
  }

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3728      	adds	r7, #40	@ 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	b29b      	uxth	r3, r3
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061de:	b480      	push	{r7}
 80061e0:	b089      	sub	sp, #36	@ 0x24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	0c9b      	lsrs	r3, r3, #18
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	0fdb      	lsrs	r3, r3, #31
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	0fdb      	lsrs	r3, r3, #31
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b20      	cmp	r3, #32
 8006242:	d10d      	bne.n	8006260 <USB_HC_Halt+0x82>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <USB_HC_Halt+0x82>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d002      	beq.n	800625c <USB_HC_Halt+0x7e>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d101      	bne.n	8006260 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e0d8      	b.n	8006412 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <USB_HC_Halt+0x8e>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d173      	bne.n	8006354 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006286:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800628a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d14a      	bne.n	800632e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d133      	bne.n	800630c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062c2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062e2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062f0:	d82e      	bhi.n	8006350 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006308:	d0ec      	beq.n	80062e4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800630a:	e081      	b.n	8006410 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800632a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800632c:	e070      	b.n	8006410 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006348:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800634c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800634e:	e05f      	b.n	8006410 <USB_HC_Halt+0x232>
            break;
 8006350:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006352:	e05d      	b.n	8006410 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800636e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006372:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d133      	bne.n	80063ec <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800639e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063d0:	d81d      	bhi.n	800640e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e8:	d0ec      	beq.n	80063c4 <USB_HC_Halt+0x1e6>
 80063ea:	e011      	b.n	8006410 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006406:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e000      	b.n	8006410 <USB_HC_Halt+0x232>
          break;
 800640e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	@ 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006434:	2301      	movs	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	04da      	lsls	r2, r3, #19
 800643c:	4b15      	ldr	r3, [pc, #84]	@ (8006494 <USB_DoPing+0x74>)
 800643e:	4013      	ands	r3, r2
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	440a      	add	r2, r1
 8006448:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800644c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006450:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006468:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006470:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	1ff80000 	.word	0x1ff80000

08006498 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fe ff8c 	bl	80053ca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064b2:	2110      	movs	r1, #16
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fe ffe5 	bl	8005484 <USB_FlushTxFifo>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff f80f 	bl	80054e8 <USB_FlushRxFifo>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e01f      	b.n	800651a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006500:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650e:	461a      	mov	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	3301      	adds	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d9dc      	bls.n	80064da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e034      	b.n	8006590 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800653c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006544:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800654c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800656c:	d80c      	bhi.n	8006588 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006584:	d0ec      	beq.n	8006560 <USB_StopHost+0xc8>
 8006586:	e000      	b.n	800658a <USB_StopHost+0xf2>
        break;
 8006588:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	3301      	adds	r3, #1
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	d9c7      	bls.n	8006526 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800659c:	461a      	mov	r2, r3
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fe fefb 	bl	80053a8 <USB_EnableGlobalInt>

  return ret;
 80065b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3720      	adds	r7, #32
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80065c0:	4904      	ldr	r1, [pc, #16]	@ (80065d4 <MX_FATFS_Init+0x18>)
 80065c2:	4805      	ldr	r0, [pc, #20]	@ (80065d8 <MX_FATFS_Init+0x1c>)
 80065c4:	f008 f95a 	bl	800e87c <FATFS_LinkDriver>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461a      	mov	r2, r3
 80065cc:	4b03      	ldr	r3, [pc, #12]	@ (80065dc <MX_FATFS_Init+0x20>)
 80065ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80065d0:	bf00      	nop
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000230 	.word	0x20000230
 80065d8:	0800ffa0 	.word	0x0800ffa0
 80065dc:	2000022c 	.word	0x2000022c

080065e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80065e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	4619      	mov	r1, r3
 800661a:	4808      	ldr	r0, [pc, #32]	@ (800663c <USBH_status+0x34>)
 800661c:	f000 fe79 	bl	8007312 <USBH_MSC_UnitIsReady>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <USBH_status+0x24>
  {
    res = RES_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
 800662a:	e001      	b.n	8006630 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	2000275c 	.word	0x2000275c

08006640 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b094      	sub	sp, #80	@ 0x50
 8006644:	af02      	add	r7, sp, #8
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006656:	7bf9      	ldrb	r1, [r7, #15]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4813      	ldr	r0, [pc, #76]	@ (80066b0 <USBH_read+0x70>)
 8006662:	f000 feaa 	bl	80073ba <USBH_MSC_Read>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <USBH_read+0x34>
  {
    res = RES_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006672:	e017      	b.n	80066a4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006674:	f107 0210 	add.w	r2, r7, #16
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4619      	mov	r1, r3
 800667c:	480c      	ldr	r0, [pc, #48]	@ (80066b0 <USBH_read+0x70>)
 800667e:	f000 fe73 	bl	8007368 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006682:	7f7b      	ldrb	r3, [r7, #29]
 8006684:	2b3a      	cmp	r3, #58	@ 0x3a
 8006686:	d005      	beq.n	8006694 <USBH_read+0x54>
 8006688:	2b3a      	cmp	r3, #58	@ 0x3a
 800668a:	dc07      	bgt.n	800669c <USBH_read+0x5c>
 800668c:	2b04      	cmp	r3, #4
 800668e:	d001      	beq.n	8006694 <USBH_read+0x54>
 8006690:	2b28      	cmp	r3, #40	@ 0x28
 8006692:	d103      	bne.n	800669c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006694:	2303      	movs	r3, #3
 8006696:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800669a:	e003      	b.n	80066a4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80066a2:	bf00      	nop
    }
  }

  return res;
 80066a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3748      	adds	r7, #72	@ 0x48
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	2000275c 	.word	0x2000275c

080066b4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b094      	sub	sp, #80	@ 0x50
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80066ca:	7bf9      	ldrb	r1, [r7, #15]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4817      	ldr	r0, [pc, #92]	@ (8006734 <USBH_write+0x80>)
 80066d6:	f000 fed0 	bl	800747a <USBH_MSC_Write>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <USBH_write+0x34>
  {
    res = RES_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80066e6:	e01f      	b.n	8006728 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80066e8:	f107 0210 	add.w	r2, r7, #16
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	4619      	mov	r1, r3
 80066f0:	4810      	ldr	r0, [pc, #64]	@ (8006734 <USBH_write+0x80>)
 80066f2:	f000 fe39 	bl	8007368 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80066f6:	7f7b      	ldrb	r3, [r7, #29]
 80066f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80066fa:	d00d      	beq.n	8006718 <USBH_write+0x64>
 80066fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80066fe:	dc0f      	bgt.n	8006720 <USBH_write+0x6c>
 8006700:	2b28      	cmp	r3, #40	@ 0x28
 8006702:	d009      	beq.n	8006718 <USBH_write+0x64>
 8006704:	2b28      	cmp	r3, #40	@ 0x28
 8006706:	dc0b      	bgt.n	8006720 <USBH_write+0x6c>
 8006708:	2b04      	cmp	r3, #4
 800670a:	d005      	beq.n	8006718 <USBH_write+0x64>
 800670c:	2b27      	cmp	r3, #39	@ 0x27
 800670e:	d107      	bne.n	8006720 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006710:	2302      	movs	r3, #2
 8006712:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006716:	e007      	b.n	8006728 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006718:	2303      	movs	r3, #3
 800671a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800671e:	e003      	b.n	8006728 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006726:	bf00      	nop
    }
  }

  return res;
 8006728:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800672c:	4618      	mov	r0, r3
 800672e:	3748      	adds	r7, #72	@ 0x48
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	2000275c 	.word	0x2000275c

08006738 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b090      	sub	sp, #64	@ 0x40
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	603a      	str	r2, [r7, #0]
 8006742:	71fb      	strb	r3, [r7, #7]
 8006744:	460b      	mov	r3, r1
 8006746:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800674e:	79bb      	ldrb	r3, [r7, #6]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d852      	bhi.n	80067fa <USBH_ioctl+0xc2>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <USBH_ioctl+0x24>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006775 	.word	0x08006775
 8006764:	0800679f 	.word	0x0800679f
 8006768:	080067cb 	.word	0x080067cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006772:	e045      	b.n	8006800 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006774:	f107 0208 	add.w	r2, r7, #8
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	4619      	mov	r1, r3
 800677c:	4823      	ldr	r0, [pc, #140]	@ (800680c <USBH_ioctl+0xd4>)
 800677e:	f000 fdf3 	bl	8007368 <USBH_MSC_GetLUNInfo>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006794:	e034      	b.n	8006800 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800679c:	e030      	b.n	8006800 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800679e:	f107 0208 	add.w	r2, r7, #8
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	4619      	mov	r1, r3
 80067a6:	4819      	ldr	r0, [pc, #100]	@ (800680c <USBH_ioctl+0xd4>)
 80067a8:	f000 fdde 	bl	8007368 <USBH_MSC_GetLUNInfo>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d107      	bne.n	80067c2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80067b2:	8a3b      	ldrh	r3, [r7, #16]
 80067b4:	461a      	mov	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80067c0:	e01e      	b.n	8006800 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80067c8:	e01a      	b.n	8006800 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80067ca:	f107 0208 	add.w	r2, r7, #8
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	4619      	mov	r1, r3
 80067d2:	480e      	ldr	r0, [pc, #56]	@ (800680c <USBH_ioctl+0xd4>)
 80067d4:	f000 fdc8 	bl	8007368 <USBH_MSC_GetLUNInfo>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80067de:	8a3b      	ldrh	r3, [r7, #16]
 80067e0:	0a5b      	lsrs	r3, r3, #9
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80067f0:	e006      	b.n	8006800 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80067f8:	e002      	b.n	8006800 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80067fa:	2304      	movs	r3, #4
 80067fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8006800:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006804:	4618      	mov	r0, r3
 8006806:	3740      	adds	r7, #64	@ 0x40
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	2000275c 	.word	0x2000275c

08006810 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b089      	sub	sp, #36	@ 0x24
 8006814:	af04      	add	r7, sp, #16
 8006816:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800681e:	7919      	ldrb	r1, [r3, #4]
 8006820:	2350      	movs	r3, #80	@ 0x50
 8006822:	2206      	movs	r2, #6
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fcd7 	bl	80081d8 <USBH_FindInterface>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2bff      	cmp	r3, #255	@ 0xff
 8006832:	d002      	beq.n	800683a <USBH_MSC_InterfaceInit+0x2a>
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d901      	bls.n	800683e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800683a:	2302      	movs	r3, #2
 800683c:	e106      	b.n	8006a4c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fcac 	bl	80081a0 <USBH_SelectInterface>
 8006848:	4603      	mov	r3, r0
 800684a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006852:	2302      	movs	r3, #2
 8006854:	e0fa      	b.n	8006a4c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800685c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8006860:	f008 fc28 	bl	800f0b4 <malloc>
 8006864:	4603      	mov	r3, r0
 8006866:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006878:	2302      	movs	r3, #2
 800687a:	e0e7      	b.n	8006a4c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800687c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006880:	2100      	movs	r1, #0
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f008 fcf4 	bl	800f270 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	211a      	movs	r1, #26
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b25b      	sxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	da16      	bge.n	80068ce <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	211a      	movs	r1, #26
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	211a      	movs	r1, #26
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	815a      	strh	r2, [r3, #10]
 80068cc:	e015      	b.n	80068fa <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	211a      	movs	r1, #26
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	211a      	movs	r1, #26
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	211a      	movs	r1, #26
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b25b      	sxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	da16      	bge.n	8006940 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	211a      	movs	r1, #26
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	211a      	movs	r1, #26
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	4413      	add	r3, r2
 8006934:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006938:	881a      	ldrh	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	815a      	strh	r2, [r3, #10]
 800693e:	e015      	b.n	800696c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	211a      	movs	r1, #26
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	211a      	movs	r1, #26
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006966:	881a      	ldrh	r2, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	799b      	ldrb	r3, [r3, #6]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 ffb4 	bl	80098f2 <USBH_AllocPipe>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	79db      	ldrb	r3, [r3, #7]
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f002 ffaa 	bl	80098f2 <USBH_AllocPipe>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fe02 	bl	80075b0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	799b      	ldrb	r3, [r3, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01e      	beq.n	80069f2 <USBH_MSC_InterfaceInit+0x1e2>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	891b      	ldrh	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01a      	beq.n	80069f2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	7959      	ldrb	r1, [r3, #5]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	7998      	ldrb	r0, [r3, #6]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	8912      	ldrh	r2, [r2, #8]
 80069d4:	9202      	str	r2, [sp, #8]
 80069d6:	2202      	movs	r2, #2
 80069d8:	9201      	str	r2, [sp, #4]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4623      	mov	r3, r4
 80069de:	4602      	mov	r2, r0
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f002 ff57 	bl	8009894 <USBH_OpenPipe>
 80069e6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	79db      	ldrb	r3, [r3, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02c      	beq.n	8006a4a <USBH_MSC_InterfaceInit+0x23a>
 80069f0:	e001      	b.n	80069f6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e02a      	b.n	8006a4c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	895b      	ldrh	r3, [r3, #10]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d025      	beq.n	8006a4a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	7919      	ldrb	r1, [r3, #4]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	79d8      	ldrb	r0, [r3, #7]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	8952      	ldrh	r2, [r2, #10]
 8006a16:	9202      	str	r2, [sp, #8]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4623      	mov	r3, r4
 8006a20:	4602      	mov	r2, r0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f002 ff36 	bl	8009894 <USBH_OpenPipe>
 8006a28:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	791b      	ldrb	r3, [r3, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f008 fa84 	bl	800ef40 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	795b      	ldrb	r3, [r3, #5]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f008 fa7d 	bl	800ef40 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8006a4a:	2303      	movs	r3, #3
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd90      	pop	{r4, r7, pc}

08006a54 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	795b      	ldrb	r3, [r3, #5]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	795b      	ldrb	r3, [r3, #5]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 ff2c 	bl	80098d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	795b      	ldrb	r3, [r3, #5]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 ff57 	bl	8009934 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	791b      	ldrb	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	791b      	ldrb	r3, [r3, #4]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 ff19 	bl	80098d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	791b      	ldrb	r3, [r3, #4]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f002 ff44 	bl	8009934 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f008 fafc 	bl	800f0c4 <free>
    phost->pActiveClass->pData = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006af2:	2301      	movs	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	7b9b      	ldrb	r3, [r3, #14]
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d041      	beq.n	8006b82 <USBH_MSC_ClassRequest+0xa2>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	dc4b      	bgt.n	8006b9a <USBH_MSC_ClassRequest+0xba>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <USBH_MSC_ClassRequest+0x2a>
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d147      	bne.n	8006b9a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fd30 	bl	8007574 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d104      	bne.n	8006b28 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d137      	bne.n	8006b9e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d804      	bhi.n	8006b40 <USBH_MSC_ClassRequest+0x60>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	e000      	b.n	8006b42 <USBH_MSC_ClassRequest+0x62>
 8006b40:	2202      	movs	r2, #2
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	73bb      	strb	r3, [r7, #14]
 8006b4a:	e014      	b.n	8006b76 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	2134      	movs	r1, #52	@ 0x34
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	3392      	adds	r3, #146	@ 0x92
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	2134      	movs	r1, #52	@ 0x34
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	4413      	add	r3, r2
 8006b6a:	33c1      	adds	r3, #193	@ 0xc1
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	3301      	adds	r3, #1
 8006b74:	73bb      	strb	r3, [r7, #14]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	7bba      	ldrb	r2, [r7, #14]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d3e5      	bcc.n	8006b4c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8006b80:	e00d      	b.n	8006b9e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006b82:	2100      	movs	r1, #0
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f002 f8ff 	bl	8008d88 <USBH_ClrFeature>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d108      	bne.n	8006ba2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	7bda      	ldrb	r2, [r3, #15]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006b98:	e003      	b.n	8006ba2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006ba2:	bf00      	nop
  }

  return status;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	7b1b      	ldrb	r3, [r3, #12]
 8006bd2:	2b0a      	cmp	r3, #10
 8006bd4:	f000 8280 	beq.w	80070d8 <USBH_MSC_Process+0x528>
 8006bd8:	2b0a      	cmp	r3, #10
 8006bda:	f300 82b8 	bgt.w	800714e <USBH_MSC_Process+0x59e>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <USBH_MSC_Process+0x3a>
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	f000 82b0 	beq.w	8007148 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006be8:	e2b1      	b.n	800714e <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f080 825d 	bcs.w	80070b4 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c00:	4619      	mov	r1, r3
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	2334      	movs	r3, #52	@ 0x34
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3391      	adds	r3, #145	@ 0x91
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c18:	4619      	mov	r1, r3
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	2334      	movs	r3, #52	@ 0x34
 8006c1e:	fb01 f303 	mul.w	r3, r1, r3
 8006c22:	4413      	add	r3, r2
 8006c24:	3390      	adds	r3, #144	@ 0x90
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	f200 824b 	bhi.w	80070c4 <USBH_MSC_Process+0x514>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <USBH_MSC_Process+0x84>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	080070c5 	.word	0x080070c5
 8006c3c:	08006d23 	.word	0x08006d23
 8006c40:	08006ea9 	.word	0x08006ea9
 8006c44:	08006c7f 	.word	0x08006c7f
 8006c48:	08006f75 	.word	0x08006f75
 8006c4c:	080070c5 	.word	0x080070c5
 8006c50:	080070c5 	.word	0x080070c5
 8006c54:	080070a3 	.word	0x080070a3
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c5e:	4619      	mov	r1, r3
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	2334      	movs	r3, #52	@ 0x34
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	3390      	adds	r3, #144	@ 0x90
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8006c7c:	e22b      	b.n	80070d6 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c84:	b2d9      	uxtb	r1, r3
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	2334      	movs	r3, #52	@ 0x34
 8006c90:	fb02 f303 	mul.w	r3, r2, r3
 8006c94:	3398      	adds	r3, #152	@ 0x98
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4413      	add	r3, r2
 8006c9a:	3307      	adds	r3, #7
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ffa3 	bl	8007bea <USBH_MSC_SCSI_Inquiry>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10c      	bne.n	8006cc8 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	2334      	movs	r3, #52	@ 0x34
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3390      	adds	r3, #144	@ 0x90
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	701a      	strb	r2, [r3, #0]
            break;
 8006cc6:	e1ff      	b.n	80070c8 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d10c      	bne.n	8006ce8 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	2334      	movs	r3, #52	@ 0x34
 8006cda:	fb01 f303 	mul.w	r3, r1, r3
 8006cde:	4413      	add	r3, r2
 8006ce0:	3390      	adds	r3, #144	@ 0x90
 8006ce2:	2205      	movs	r2, #5
 8006ce4:	701a      	strb	r2, [r3, #0]
            break;
 8006ce6:	e1ef      	b.n	80070c8 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	f040 81ec 	bne.w	80070c8 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	2334      	movs	r3, #52	@ 0x34
 8006cfc:	fb01 f303 	mul.w	r3, r1, r3
 8006d00:	4413      	add	r3, r2
 8006d02:	3390      	adds	r3, #144	@ 0x90
 8006d04:	2208      	movs	r2, #8
 8006d06:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006d0e:	4619      	mov	r1, r3
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	2334      	movs	r3, #52	@ 0x34
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	4413      	add	r3, r2
 8006d1a:	3391      	adds	r3, #145	@ 0x91
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	701a      	strb	r2, [r3, #0]
            break;
 8006d20:	e1d2      	b.n	80070c8 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fe9f 	bl	8007a70 <USBH_MSC_SCSI_TestUnitReady>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d14a      	bne.n	8006dd2 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006d42:	4619      	mov	r1, r3
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	2334      	movs	r3, #52	@ 0x34
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3392      	adds	r3, #146	@ 0x92
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	2334      	movs	r3, #52	@ 0x34
 8006d62:	fb01 f303 	mul.w	r3, r1, r3
 8006d66:	4413      	add	r3, r2
 8006d68:	33c1      	adds	r3, #193	@ 0xc1
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e00b      	b.n	8006d88 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006d76:	4619      	mov	r1, r3
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	2334      	movs	r3, #52	@ 0x34
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	4413      	add	r3, r2
 8006d82:	33c1      	adds	r3, #193	@ 0xc1
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006d8e:	4619      	mov	r1, r3
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	2334      	movs	r3, #52	@ 0x34
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	3390      	adds	r3, #144	@ 0x90
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006da6:	4619      	mov	r1, r3
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	2334      	movs	r3, #52	@ 0x34
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	3391      	adds	r3, #145	@ 0x91
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	2334      	movs	r3, #52	@ 0x34
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	3392      	adds	r3, #146	@ 0x92
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
            break;
 8006dd0:	e17c      	b.n	80070cc <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d14a      	bne.n	8006e6e <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006dde:	4619      	mov	r1, r3
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	2334      	movs	r3, #52	@ 0x34
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	3392      	adds	r3, #146	@ 0x92
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d00c      	beq.n	8006e0c <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006df8:	4619      	mov	r1, r3
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	2334      	movs	r3, #52	@ 0x34
 8006dfe:	fb01 f303 	mul.w	r3, r1, r3
 8006e02:	4413      	add	r3, r2
 8006e04:	33c1      	adds	r3, #193	@ 0xc1
 8006e06:	2201      	movs	r2, #1
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e00b      	b.n	8006e24 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006e12:	4619      	mov	r1, r3
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	2334      	movs	r3, #52	@ 0x34
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	33c1      	adds	r3, #193	@ 0xc1
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	2334      	movs	r3, #52	@ 0x34
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	3390      	adds	r3, #144	@ 0x90
 8006e38:	2205      	movs	r2, #5
 8006e3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006e42:	4619      	mov	r1, r3
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	2334      	movs	r3, #52	@ 0x34
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3391      	adds	r3, #145	@ 0x91
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	2334      	movs	r3, #52	@ 0x34
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	4413      	add	r3, r2
 8006e66:	3392      	adds	r3, #146	@ 0x92
 8006e68:	2202      	movs	r2, #2
 8006e6a:	701a      	strb	r2, [r3, #0]
            break;
 8006e6c:	e12e      	b.n	80070cc <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	f040 812b 	bne.w	80070cc <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	2334      	movs	r3, #52	@ 0x34
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	3390      	adds	r3, #144	@ 0x90
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006e94:	4619      	mov	r1, r3
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	2334      	movs	r3, #52	@ 0x34
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3391      	adds	r3, #145	@ 0x91
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	701a      	strb	r2, [r3, #0]
            break;
 8006ea6:	e111      	b.n	80070cc <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006eae:	b2d9      	uxtb	r1, r3
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2334      	movs	r3, #52	@ 0x34
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	3390      	adds	r3, #144	@ 0x90
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fe14 	bl	8007af6 <USBH_MSC_SCSI_ReadCapacity>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d120      	bne.n	8006f1a <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ede:	4619      	mov	r1, r3
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	2334      	movs	r3, #52	@ 0x34
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	4413      	add	r3, r2
 8006eea:	3390      	adds	r3, #144	@ 0x90
 8006eec:	2201      	movs	r2, #1
 8006eee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	2334      	movs	r3, #52	@ 0x34
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	4413      	add	r3, r2
 8006f02:	3391      	adds	r3, #145	@ 0x91
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8006f18:	e0da      	b.n	80070d0 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d10c      	bne.n	8006f3a <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f26:	4619      	mov	r1, r3
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	2334      	movs	r3, #52	@ 0x34
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	3390      	adds	r3, #144	@ 0x90
 8006f34:	2205      	movs	r2, #5
 8006f36:	701a      	strb	r2, [r3, #0]
            break;
 8006f38:	e0ca      	b.n	80070d0 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	f040 80c7 	bne.w	80070d0 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f48:	4619      	mov	r1, r3
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	2334      	movs	r3, #52	@ 0x34
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	3390      	adds	r3, #144	@ 0x90
 8006f56:	2208      	movs	r2, #8
 8006f58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f60:	4619      	mov	r1, r3
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	2334      	movs	r3, #52	@ 0x34
 8006f66:	fb01 f303 	mul.w	r3, r1, r3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3391      	adds	r3, #145	@ 0x91
 8006f6e:	2202      	movs	r2, #2
 8006f70:	701a      	strb	r2, [r3, #0]
            break;
 8006f72:	e0ad      	b.n	80070d0 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f7a:	b2d9      	uxtb	r1, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006f82:	461a      	mov	r2, r3
 8006f84:	2334      	movs	r3, #52	@ 0x34
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	3398      	adds	r3, #152	@ 0x98
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	461a      	mov	r2, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fecd 	bl	8007d34 <USBH_MSC_SCSI_RequestSense>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d146      	bne.n	8007032 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006faa:	4619      	mov	r1, r3
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	2334      	movs	r3, #52	@ 0x34
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	339c      	adds	r3, #156	@ 0x9c
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b06      	cmp	r3, #6
 8006fbc:	d00c      	beq.n	8006fd8 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	2334      	movs	r3, #52	@ 0x34
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	339c      	adds	r3, #156	@ 0x9c
 8006fd2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d117      	bne.n	8007008 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d80c      	bhi.n	8007008 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	2334      	movs	r3, #52	@ 0x34
 8006ffa:	fb01 f303 	mul.w	r3, r1, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	3390      	adds	r3, #144	@ 0x90
 8007002:	2202      	movs	r2, #2
 8007004:	701a      	strb	r2, [r3, #0]
                  break;
 8007006:	e066      	b.n	80070d6 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800700e:	4619      	mov	r1, r3
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	2334      	movs	r3, #52	@ 0x34
 8007014:	fb01 f303 	mul.w	r3, r1, r3
 8007018:	4413      	add	r3, r2
 800701a:	3390      	adds	r3, #144	@ 0x90
 800701c:	2201      	movs	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007026:	3301      	adds	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007030:	e050      	b.n	80070d4 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d118      	bne.n	800706a <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800703e:	4619      	mov	r1, r3
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	2334      	movs	r3, #52	@ 0x34
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	3390      	adds	r3, #144	@ 0x90
 800704c:	2208      	movs	r2, #8
 800704e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007056:	4619      	mov	r1, r3
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	2334      	movs	r3, #52	@ 0x34
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	4413      	add	r3, r2
 8007062:	3391      	adds	r3, #145	@ 0x91
 8007064:	2202      	movs	r2, #2
 8007066:	701a      	strb	r2, [r3, #0]
            break;
 8007068:	e034      	b.n	80070d4 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d131      	bne.n	80070d4 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007076:	4619      	mov	r1, r3
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	2334      	movs	r3, #52	@ 0x34
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	4413      	add	r3, r2
 8007082:	3390      	adds	r3, #144	@ 0x90
 8007084:	2208      	movs	r2, #8
 8007086:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800708e:	4619      	mov	r1, r3
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	2334      	movs	r3, #52	@ 0x34
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	3391      	adds	r3, #145	@ 0x91
 800709c:	2202      	movs	r2, #2
 800709e:	701a      	strb	r2, [r3, #0]
            break;
 80070a0:	e018      	b.n	80070d4 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80070a8:	3301      	adds	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80070b2:	e010      	b.n	80070d6 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	220a      	movs	r2, #10
 80070c0:	731a      	strb	r2, [r3, #12]
      break;
 80070c2:	e045      	b.n	8007150 <USBH_MSC_Process+0x5a0>
            break;
 80070c4:	bf00      	nop
 80070c6:	e043      	b.n	8007150 <USBH_MSC_Process+0x5a0>
            break;
 80070c8:	bf00      	nop
 80070ca:	e041      	b.n	8007150 <USBH_MSC_Process+0x5a0>
            break;
 80070cc:	bf00      	nop
 80070ce:	e03f      	b.n	8007150 <USBH_MSC_Process+0x5a0>
            break;
 80070d0:	bf00      	nop
 80070d2:	e03d      	b.n	8007150 <USBH_MSC_Process+0x5a0>
            break;
 80070d4:	bf00      	nop
      break;
 80070d6:	e03b      	b.n	8007150 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d228      	bcs.n	8007138 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80070f8:	4619      	mov	r1, r3
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	2334      	movs	r3, #52	@ 0x34
 80070fe:	fb01 f303 	mul.w	r3, r1, r3
 8007102:	4413      	add	r3, r2
 8007104:	3391      	adds	r3, #145	@ 0x91
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007112:	2102      	movs	r1, #2
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
 8007118:	e005      	b.n	8007126 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007120:	2106      	movs	r1, #6
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
        MSC_Handle->lun++;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800712c:	3301      	adds	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8007136:	e00b      	b.n	8007150 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2200      	movs	r2, #0
 800713c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2201      	movs	r2, #1
 8007144:	731a      	strb	r2, [r3, #12]
      break;
 8007146:	e003      	b.n	8007150 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]
      break;
 800714c:	e000      	b.n	8007150 <USBH_MSC_Process+0x5a0>
      break;
 800714e:	bf00      	nop
  }
  return error;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop

0800715c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b088      	sub	sp, #32
 8007176:	af02      	add	r7, sp, #8
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	2134      	movs	r1, #52	@ 0x34
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	4413      	add	r3, r2
 800719c:	3390      	adds	r3, #144	@ 0x90
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b07      	cmp	r3, #7
 80071a2:	d03c      	beq.n	800721e <USBH_MSC_RdWrProcess+0xac>
 80071a4:	2b07      	cmp	r3, #7
 80071a6:	f300 80a8 	bgt.w	80072fa <USBH_MSC_RdWrProcess+0x188>
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d06c      	beq.n	8007288 <USBH_MSC_RdWrProcess+0x116>
 80071ae:	2b06      	cmp	r3, #6
 80071b0:	f040 80a3 	bne.w	80072fa <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80071b4:	78f9      	ldrb	r1, [r7, #3]
 80071b6:	2300      	movs	r3, #0
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	2200      	movs	r2, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fea7 	bl	8007f12 <USBH_MSC_SCSI_Read>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	2134      	movs	r1, #52	@ 0x34
 80071d4:	fb01 f303 	mul.w	r3, r1, r3
 80071d8:	4413      	add	r3, r2
 80071da:	3390      	adds	r3, #144	@ 0x90
 80071dc:	2201      	movs	r2, #1
 80071de:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071e4:	e08b      	b.n	80072fe <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d109      	bne.n	8007200 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	2134      	movs	r1, #52	@ 0x34
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	4413      	add	r3, r2
 80071f8:	3390      	adds	r3, #144	@ 0x90
 80071fa:	2205      	movs	r2, #5
 80071fc:	701a      	strb	r2, [r3, #0]
      break;
 80071fe:	e07e      	b.n	80072fe <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b04      	cmp	r3, #4
 8007204:	d17b      	bne.n	80072fe <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	2134      	movs	r1, #52	@ 0x34
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	4413      	add	r3, r2
 8007212:	3390      	adds	r3, #144	@ 0x90
 8007214:	2208      	movs	r2, #8
 8007216:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007218:	2302      	movs	r3, #2
 800721a:	75fb      	strb	r3, [r7, #23]
      break;
 800721c:	e06f      	b.n	80072fe <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800721e:	78f9      	ldrb	r1, [r7, #3]
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	2200      	movs	r2, #0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fe02 	bl	8007e32 <USBH_MSC_SCSI_Write>
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	2134      	movs	r1, #52	@ 0x34
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	4413      	add	r3, r2
 8007244:	3390      	adds	r3, #144	@ 0x90
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800724e:	e058      	b.n	8007302 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d109      	bne.n	800726a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	2134      	movs	r1, #52	@ 0x34
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	3390      	adds	r3, #144	@ 0x90
 8007264:	2205      	movs	r2, #5
 8007266:	701a      	strb	r2, [r3, #0]
      break;
 8007268:	e04b      	b.n	8007302 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b04      	cmp	r3, #4
 800726e:	d148      	bne.n	8007302 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	2134      	movs	r1, #52	@ 0x34
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	3390      	adds	r3, #144	@ 0x90
 800727e:	2208      	movs	r2, #8
 8007280:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007282:	2302      	movs	r3, #2
 8007284:	75fb      	strb	r3, [r7, #23]
      break;
 8007286:	e03c      	b.n	8007302 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	2234      	movs	r2, #52	@ 0x34
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	3398      	adds	r3, #152	@ 0x98
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	1d1a      	adds	r2, r3, #4
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fd49 	bl	8007d34 <USBH_MSC_SCSI_RequestSense>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d114      	bne.n	80072d6 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	2134      	movs	r1, #52	@ 0x34
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	3390      	adds	r3, #144	@ 0x90
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	2134      	movs	r1, #52	@ 0x34
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	3391      	adds	r3, #145	@ 0x91
 80072cc:	2202      	movs	r2, #2
 80072ce:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80072d0:	2302      	movs	r3, #2
 80072d2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072d4:	e017      	b.n	8007306 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d014      	beq.n	8007306 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d111      	bne.n	8007306 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	2134      	movs	r1, #52	@ 0x34
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	3390      	adds	r3, #144	@ 0x90
 80072f0:	2208      	movs	r2, #8
 80072f2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80072f4:	2302      	movs	r3, #2
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	e005      	b.n	8007306 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <USBH_MSC_RdWrProcess+0x196>
      break;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <USBH_MSC_RdWrProcess+0x196>
      break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <USBH_MSC_RdWrProcess+0x196>
      break;
 8007306:	bf00      	nop

  }
  return error;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	b29a      	uxth	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b0b      	cmp	r3, #11
 800733a:	d10c      	bne.n	8007356 <USBH_MSC_UnitIsReady+0x44>
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	2134      	movs	r1, #52	@ 0x34
 8007342:	fb01 f303 	mul.w	r3, r1, r3
 8007346:	4413      	add	r3, r2
 8007348:	3391      	adds	r3, #145	@ 0x91
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
 8007354:	e001      	b.n	800735a <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	460b      	mov	r3, r1
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	b29a      	uxth	r2, r3
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b0b      	cmp	r3, #11
 8007392:	d10d      	bne.n	80073b0 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	2234      	movs	r2, #52	@ 0x34
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	3390      	adds	r3, #144	@ 0x90
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	2234      	movs	r2, #52	@ 0x34
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f007 ffa6 	bl	800f2f8 <memcpy>
    return USBH_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e000      	b.n	80073b2 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 80073b0:	2302      	movs	r3, #2
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b088      	sub	sp, #32
 80073be:	af02      	add	r7, sp, #8
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	460b      	mov	r3, r1
 80073c8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80073f0:	2b0b      	cmp	r3, #11
 80073f2:	d109      	bne.n	8007408 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	2134      	movs	r1, #52	@ 0x34
 80073fa:	fb01 f303 	mul.w	r3, r1, r3
 80073fe:	4413      	add	r3, r2
 8007400:	3390      	adds	r3, #144	@ 0x90
 8007402:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007404:	2b01      	cmp	r3, #1
 8007406:	d001      	beq.n	800740c <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 8007408:	2302      	movs	r3, #2
 800740a:	e032      	b.n	8007472 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	2134      	movs	r1, #52	@ 0x34
 8007412:	fb01 f303 	mul.w	r3, r1, r3
 8007416:	4413      	add	r3, r2
 8007418:	3390      	adds	r3, #144	@ 0x90
 800741a:	2206      	movs	r2, #6
 800741c:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800741e:	7af9      	ldrb	r1, [r7, #11]
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fd72 	bl	8007f12 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007434:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007436:	e013      	b.n	8007460 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad2      	subs	r2, r2, r3
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	429a      	cmp	r2, r3
 800744e:	d805      	bhi.n	800745c <USBH_MSC_Read+0xa2>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 800745c:	2302      	movs	r3, #2
 800745e:	e008      	b.n	8007472 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	4619      	mov	r1, r3
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff fe84 	bl	8007172 <USBH_MSC_RdWrProcess>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d0e3      	beq.n	8007438 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b088      	sub	sp, #32
 800747e:	af02      	add	r7, sp, #8
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	460b      	mov	r3, r1
 8007488:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	b29a      	uxth	r2, r3
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80074b0:	2b0b      	cmp	r3, #11
 80074b2:	d109      	bne.n	80074c8 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	2134      	movs	r1, #52	@ 0x34
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	4413      	add	r3, r2
 80074c0:	3390      	adds	r3, #144	@ 0x90
 80074c2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 80074c8:	2302      	movs	r3, #2
 80074ca:	e032      	b.n	8007532 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	2134      	movs	r1, #52	@ 0x34
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	3390      	adds	r3, #144	@ 0x90
 80074da:	2207      	movs	r2, #7
 80074dc:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80074de:	7af9      	ldrb	r1, [r7, #11]
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fca2 	bl	8007e32 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80074f4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80074f6:	e013      	b.n	8007520 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	429a      	cmp	r2, r3
 800750e:	d805      	bhi.n	800751c <USBH_MSC_Write+0xa2>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 800751c:	2302      	movs	r3, #2
 800751e:	e008      	b.n	8007532 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fe24 	bl	8007172 <USBH_MSC_RdWrProcess>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d0e3      	beq.n	80074f8 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2221      	movs	r2, #33	@ 0x21
 8007546:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	22ff      	movs	r2, #255	@ 0xff
 800754c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 ff44 	bl	80093f2 <USBH_CtlReq>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	22a1      	movs	r2, #161	@ 0xa1
 8007582:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22fe      	movs	r2, #254	@ 0xfe
 8007588:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800759c:	2201      	movs	r2, #1
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 ff26 	bl	80093f2 <USBH_CtlReq>
 80075a6:	4603      	mov	r3, r0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4a09      	ldr	r2, [pc, #36]	@ (80075ec <USBH_MSC_BOT_Init+0x3c>)
 80075c6:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4a09      	ldr	r2, [pc, #36]	@ (80075f0 <USBH_MSC_BOT_Init+0x40>)
 80075cc:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	43425355 	.word	0x43425355
 80075f0:	20304050 	.word	0x20304050

080075f4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007604:	2301      	movs	r3, #1
 8007606:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007608:	2301      	movs	r3, #1
 800760a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800760c:	2300      	movs	r3, #0
 800760e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007624:	3b01      	subs	r3, #1
 8007626:	2b0a      	cmp	r3, #10
 8007628:	f200 819e 	bhi.w	8007968 <USBH_MSC_BOT_Process+0x374>
 800762c:	a201      	add	r2, pc, #4	@ (adr r2, 8007634 <USBH_MSC_BOT_Process+0x40>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007661 	.word	0x08007661
 8007638:	08007689 	.word	0x08007689
 800763c:	080076f3 	.word	0x080076f3
 8007640:	08007711 	.word	0x08007711
 8007644:	08007795 	.word	0x08007795
 8007648:	080077b7 	.word	0x080077b7
 800764c:	0800784f 	.word	0x0800784f
 8007650:	0800786b 	.word	0x0800786b
 8007654:	080078bd 	.word	0x080078bd
 8007658:	080078ed 	.word	0x080078ed
 800765c:	0800794f 	.word	0x0800794f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	2201      	movs	r2, #1
 800767c:	9200      	str	r2, [sp, #0]
 800767e:	221f      	movs	r2, #31
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f002 f8c4 	bl	800980e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007686:	e17e      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	795b      	ldrb	r3, [r3, #5]
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f007 fc2c 	bl	800eeec <USBH_LL_GetURBState>
 8007694:	4603      	mov	r3, r0
 8007696:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007698:	7d3b      	ldrb	r3, [r7, #20]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d118      	bne.n	80076d0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00f      	beq.n	80076c6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	da04      	bge.n	80076bc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2203      	movs	r2, #3
 80076b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80076ba:	e157      	b.n	800796c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2205      	movs	r2, #5
 80076c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80076c4:	e152      	b.n	800796c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2207      	movs	r2, #7
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80076ce:	e14d      	b.n	800796c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80076d0:	7d3b      	ldrb	r3, [r7, #20]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d104      	bne.n	80076e0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80076de:	e145      	b.n	800796c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80076e0:	7d3b      	ldrb	r3, [r7, #20]
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	f040 8142 	bne.w	800796c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	220a      	movs	r2, #10
 80076ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80076f0:	e13c      	b.n	800796c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	895a      	ldrh	r2, [r3, #10]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	791b      	ldrb	r3, [r3, #4]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f002 f8a9 	bl	8009858 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2204      	movs	r2, #4
 800770a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800770e:	e13a      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	791b      	ldrb	r3, [r3, #4]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f007 fbe8 	bl	800eeec <USBH_LL_GetURBState>
 800771c:	4603      	mov	r3, r0
 800771e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007720:	7d3b      	ldrb	r3, [r7, #20]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d12d      	bne.n	8007782 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	8952      	ldrh	r2, [r2, #10]
 800772e:	4293      	cmp	r3, r2
 8007730:	d910      	bls.n	8007754 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	8952      	ldrh	r2, [r2, #10]
 800773c:	441a      	add	r2, r3
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	8952      	ldrh	r2, [r2, #10]
 800774c:	1a9a      	subs	r2, r3, r2
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007752:	e002      	b.n	800775a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2200      	movs	r2, #0
 8007758:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	895a      	ldrh	r2, [r3, #10]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 f871 	bl	8009858 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007776:	e0fb      	b.n	8007970 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2207      	movs	r2, #7
 800777c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007780:	e0f6      	b.n	8007970 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007782:	7d3b      	ldrb	r3, [r7, #20]
 8007784:	2b05      	cmp	r3, #5
 8007786:	f040 80f3 	bne.w	8007970 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2209      	movs	r2, #9
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007792:	e0ed      	b.n	8007970 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	891a      	ldrh	r2, [r3, #8]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	2001      	movs	r0, #1
 80077a4:	9000      	str	r0, [sp, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f002 f831 	bl	800980e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2206      	movs	r2, #6
 80077b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80077b4:	e0e7      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	795b      	ldrb	r3, [r3, #5]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f007 fb95 	bl	800eeec <USBH_LL_GetURBState>
 80077c2:	4603      	mov	r3, r0
 80077c4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80077c6:	7d3b      	ldrb	r3, [r7, #20]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d12f      	bne.n	800782c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	8912      	ldrh	r2, [r2, #8]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d910      	bls.n	80077fa <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	8912      	ldrh	r2, [r2, #8]
 80077e2:	441a      	add	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	8912      	ldrh	r2, [r2, #8]
 80077f2:	1a9a      	subs	r2, r3, r2
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80077f8:	e002      	b.n	8007800 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2200      	movs	r2, #0
 80077fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00c      	beq.n	8007822 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	891a      	ldrh	r2, [r3, #8]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	2001      	movs	r0, #1
 8007818:	9000      	str	r0, [sp, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fff7 	bl	800980e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007820:	e0a8      	b.n	8007974 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2207      	movs	r2, #7
 8007826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800782a:	e0a3      	b.n	8007974 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800782c:	7d3b      	ldrb	r3, [r7, #20]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d104      	bne.n	800783c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2205      	movs	r2, #5
 8007836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800783a:	e09b      	b.n	8007974 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800783c:	7d3b      	ldrb	r3, [r7, #20]
 800783e:	2b05      	cmp	r3, #5
 8007840:	f040 8098 	bne.w	8007974 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	220a      	movs	r2, #10
 8007848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800784c:	e092      	b.n	8007974 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	220d      	movs	r2, #13
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fffc 	bl	8009858 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2208      	movs	r2, #8
 8007864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007868:	e08d      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f007 fb3b 	bl	800eeec <USBH_LL_GetURBState>
 8007876:	4603      	mov	r3, r0
 8007878:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800787a:	7d3b      	ldrb	r3, [r7, #20]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d115      	bne.n	80078ac <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8a9 	bl	80079e8 <USBH_MSC_DecodeCSW>
 8007896:	4603      	mov	r3, r0
 8007898:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800789a:	7d7b      	ldrb	r3, [r7, #21]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80078a4:	e068      	b.n	8007978 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80078a6:	2302      	movs	r3, #2
 80078a8:	75fb      	strb	r3, [r7, #23]
      break;
 80078aa:	e065      	b.n	8007978 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80078ac:	7d3b      	ldrb	r3, [r7, #20]
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d162      	bne.n	8007978 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2209      	movs	r2, #9
 80078b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80078ba:	e05d      	b.n	8007978 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	2200      	movs	r2, #0
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f864 	bl	8007990 <USBH_MSC_BOT_Abort>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80078cc:	7dbb      	ldrb	r3, [r7, #22]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2207      	movs	r2, #7
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80078da:	e04f      	b.n	800797c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80078dc:	7dbb      	ldrb	r3, [r7, #22]
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d14c      	bne.n	800797c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	220b      	movs	r2, #11
 80078e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80078ea:	e047      	b.n	800797c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	2201      	movs	r2, #1
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f84c 	bl	8007990 <USBH_MSC_BOT_Abort>
 80078f8:	4603      	mov	r3, r0
 80078fa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80078fc:	7dbb      	ldrb	r3, [r7, #22]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11d      	bne.n	800793e <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	795b      	ldrb	r3, [r3, #5]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f007 fb4c 	bl	800efa6 <USBH_LL_GetToggle>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	7959      	ldrb	r1, [r3, #5]
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	f1c3 0301 	rsb	r3, r3, #1
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f007 fb0d 	bl	800ef40 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	791b      	ldrb	r3, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f007 fb06 	bl	800ef40 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2209      	movs	r2, #9
 8007938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800793c:	e020      	b.n	8007980 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800793e:	7dbb      	ldrb	r3, [r7, #22]
 8007940:	2b04      	cmp	r3, #4
 8007942:	d11d      	bne.n	8007980 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	220b      	movs	r2, #11
 8007948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800794c:	e018      	b.n	8007980 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fdf3 	bl	800753a <USBH_MSC_BOT_REQ_Reset>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d112      	bne.n	8007984 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8007966:	e00d      	b.n	8007984 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007968:	bf00      	nop
 800796a:	e00c      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 800796c:	bf00      	nop
 800796e:	e00a      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 8007970:	bf00      	nop
 8007972:	e008      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 8007974:	bf00      	nop
 8007976:	e006      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <USBH_MSC_BOT_Process+0x392>
      break;
 8007984:	bf00      	nop
  }
  return status;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
 800799c:	4613      	mov	r3, r2
 800799e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80079a0:	2302      	movs	r3, #2
 80079a2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80079ae:	78bb      	ldrb	r3, [r7, #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <USBH_MSC_BOT_Abort+0x2a>
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d009      	beq.n	80079cc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80079b8:	e011      	b.n	80079de <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	79db      	ldrb	r3, [r3, #7]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f9e1 	bl	8008d88 <USBH_ClrFeature>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ca:	e008      	b.n	80079de <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	799b      	ldrb	r3, [r3, #6]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f9d8 	bl	8008d88 <USBH_ClrFeature>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	bf00      	nop
  }
  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	791b      	ldrb	r3, [r3, #4]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f007 f9df 	bl	800edc8 <USBH_LL_GetLastXferSize>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b0d      	cmp	r3, #13
 8007a0e:	d002      	beq.n	8007a16 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 8007a10:	2302      	movs	r3, #2
 8007a12:	73fb      	strb	r3, [r7, #15]
 8007a14:	e024      	b.n	8007a60 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a1a:	4a14      	ldr	r2, [pc, #80]	@ (8007a6c <USBH_MSC_DecodeCSW+0x84>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d11d      	bne.n	8007a5c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d119      	bne.n	8007a60 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]
 8007a3a:	e011      	b.n	8007a60 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d102      	bne.n	8007a4c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007a46:	2301      	movs	r3, #1
 8007a48:	73fb      	strb	r3, [r7, #15]
 8007a4a:	e009      	b.n	8007a60 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d104      	bne.n	8007a60 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007a56:	2302      	movs	r3, #2
 8007a58:	73fb      	strb	r3, [r7, #15]
 8007a5a:	e001      	b.n	8007a60 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	53425355 	.word	0x53425355

08007a70 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d021      	beq.n	8007adc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007a98:	e028      	b.n	8007aec <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	220a      	movs	r2, #10
 8007aac:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3363      	adds	r3, #99	@ 0x63
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f007 fbd9 	bl	800f270 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ada:	e007      	b.n	8007aec <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fd87 	bl	80075f4 <USBH_MSC_BOT_Process>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aea:	bf00      	nop
  }

  return error;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	460b      	mov	r3, r1
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007b04:	2301      	movs	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d002      	beq.n	8007b22 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d027      	beq.n	8007b70 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007b20:	e05e      	b.n	8007be0 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2208      	movs	r2, #8
 8007b26:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2280      	movs	r2, #128	@ 0x80
 8007b2c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	220a      	movs	r2, #10
 8007b34:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3363      	adds	r3, #99	@ 0x63
 8007b3c:	2210      	movs	r2, #16
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f007 fb95 	bl	800f270 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2225      	movs	r2, #37	@ 0x25
 8007b4a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f103 0210 	add.w	r2, r3, #16
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6e:	e037      	b.n	8007be0 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	4619      	mov	r1, r3
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff fd3d 	bl	80075f4 <USBH_MSC_BOT_Process>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d12c      	bne.n	8007bde <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b8a:	3303      	adds	r3, #3
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b96:	3302      	adds	r3, #2
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007baa:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bce:	3306      	adds	r3, #6
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	809a      	strh	r2, [r3, #4]
      break;
 8007bde:	bf00      	nop
  }

  return error;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d002      	beq.n	8007c16 <USBH_MSC_SCSI_Inquiry+0x2c>
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d03d      	beq.n	8007c90 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007c14:	e089      	b.n	8007d2a <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2224      	movs	r2, #36	@ 0x24
 8007c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2280      	movs	r2, #128	@ 0x80
 8007c20:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	220a      	movs	r2, #10
 8007c28:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	3363      	adds	r3, #99	@ 0x63
 8007c30:	220a      	movs	r2, #10
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f007 fb1b 	bl	800f270 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2212      	movs	r2, #18
 8007c3e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	015b      	lsls	r3, r3, #5
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2224      	movs	r2, #36	@ 0x24
 8007c62:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f103 0210 	add.w	r2, r3, #16
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8e:	e04c      	b.n	8007d2a <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	4619      	mov	r1, r3
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff fcad 	bl	80075f4 <USBH_MSC_BOT_Process>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d141      	bne.n	8007d28 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007ca4:	2222      	movs	r2, #34	@ 0x22
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f007 fae1 	bl	800f270 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b25b      	sxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da03      	bge.n	8007ce8 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	709a      	strb	r2, [r3, #2]
 8007ce6:	e002      	b.n	8007cee <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	1cd8      	adds	r0, r3, #3
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	f007 fafb 	bl	800f2f8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f103 000c 	add.w	r0, r3, #12
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d0e:	3310      	adds	r3, #16
 8007d10:	2210      	movs	r2, #16
 8007d12:	4619      	mov	r1, r3
 8007d14:	f007 faf0 	bl	800f2f8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	331d      	adds	r3, #29
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8007d22:	3220      	adds	r2, #32
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	601a      	str	r2, [r3, #0]
      break;
 8007d28:	bf00      	nop
  }

  return error;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007d42:	2302      	movs	r3, #2
 8007d44:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d002      	beq.n	8007d60 <USBH_MSC_SCSI_RequestSense+0x2c>
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d03d      	beq.n	8007dda <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 8007d5e:	e063      	b.n	8007e28 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	220e      	movs	r2, #14
 8007d64:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2280      	movs	r2, #128	@ 0x80
 8007d6a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	220a      	movs	r2, #10
 8007d72:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3363      	adds	r3, #99	@ 0x63
 8007d7a:	2210      	movs	r2, #16
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f007 fa76 	bl	800f270 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2203      	movs	r2, #3
 8007d88:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	015b      	lsls	r3, r3, #5
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	220e      	movs	r2, #14
 8007dac:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f103 0210 	add.w	r2, r3, #16
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd8:	e026      	b.n	8007e28 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fc08 	bl	80075f4 <USBH_MSC_BOT_Process>
 8007de4:	4603      	mov	r3, r0
 8007de6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d11b      	bne.n	8007e26 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007df4:	3302      	adds	r3, #2
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e08:	7b1a      	ldrb	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e14:	7b5a      	ldrb	r2, [r3, #13]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e20:	d101      	bne.n	8007e26 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 8007e22:	2304      	movs	r3, #4
 8007e24:	75fb      	strb	r3, [r7, #23]
      break;
 8007e26:	bf00      	nop
  }

  return error;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007e42:	2302      	movs	r3, #2
 8007e44:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d002      	beq.n	8007e60 <USBH_MSC_SCSI_Write+0x2e>
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d04c      	beq.n	8007ef8 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007e5e:	e053      	b.n	8007f08 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	2134      	movs	r1, #52	@ 0x34
 8007e66:	fb01 f303 	mul.w	r3, r1, r3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	3398      	adds	r3, #152	@ 0x98
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	fb03 f202 	mul.w	r2, r3, r2
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	220a      	movs	r2, #10
 8007e88:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3363      	adds	r3, #99	@ 0x63
 8007e90:	2210      	movs	r2, #16
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f007 f9eb 	bl	800f270 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	222a      	movs	r2, #42	@ 0x2a
 8007e9e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8007ea2:	79fa      	ldrb	r2, [r7, #7]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8007eaa:	79ba      	ldrb	r2, [r7, #6]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8007eb2:	797a      	ldrb	r2, [r7, #5]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8007ec4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8007ece:	f107 0320 	add.w	r3, r7, #32
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef6:	e007      	b.n	8007f08 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f7ff fb79 	bl	80075f4 <USBH_MSC_BOT_Process>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
      break;
 8007f06:	bf00      	nop
  }

  return error;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007f22:	2302      	movs	r3, #2
 8007f24:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d002      	beq.n	8007f40 <USBH_MSC_SCSI_Read+0x2e>
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d04c      	beq.n	8007fd8 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007f3e:	e053      	b.n	8007fe8 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	2134      	movs	r1, #52	@ 0x34
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3398      	adds	r3, #152	@ 0x98
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	fb03 f202 	mul.w	r2, r3, r2
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2280      	movs	r2, #128	@ 0x80
 8007f60:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	220a      	movs	r2, #10
 8007f68:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	3363      	adds	r3, #99	@ 0x63
 8007f70:	2210      	movs	r2, #16
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f007 f97b 	bl	800f270 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2228      	movs	r2, #40	@ 0x28
 8007f7e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8007f82:	79fa      	ldrb	r2, [r7, #7]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8007f8a:	79ba      	ldrb	r2, [r7, #6]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8007f92:	797a      	ldrb	r2, [r7, #5]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8007fa4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8007fae:	f107 0320 	add.w	r3, r7, #32
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd6:	e007      	b.n	8007fe8 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fb09 	bl	80075f4 <USBH_MSC_BOT_Process>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe6:	bf00      	nop
  }

  return error;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	e029      	b.n	800805e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	79fa      	ldrb	r2, [r7, #7]
 800800e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f81f 	bl	8008066 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f006 fe02 	bl	800ec60 <USBH_LL_Init>

  return USBH_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	e009      	b.n	800808c <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	33e0      	adds	r3, #224	@ 0xe0
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	2200      	movs	r2, #0
 8008084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d9f2      	bls.n	8008078 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e009      	b.n	80080ac <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080a2:	2200      	movs	r2, #0
 80080a4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b2:	d3f1      	bcc.n	8008098 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2240      	movs	r2, #64	@ 0x40
 80080d8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	331c      	adds	r3, #28
 8008104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f007 f8b0 	bl	800f270 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f007 f8a7 	bl	800f270 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008128:	2212      	movs	r2, #18
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f007 f89f 	bl	800f270 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008138:	223e      	movs	r2, #62	@ 0x3e
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f007 f897 	bl	800f270 <memset>

  return USBH_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d016      	beq.n	800818e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10e      	bne.n	8008188 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008170:	1c59      	adds	r1, r3, #1
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	33de      	adds	r3, #222	@ 0xde
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]
 8008186:	e004      	b.n	8008192 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008188:	2302      	movs	r3, #2
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e001      	b.n	8008192 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800818e:	2302      	movs	r3, #2
 8008190:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d204      	bcs.n	80081c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80081c4:	e001      	b.n	80081ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	4603      	mov	r3, r0
 80081e8:	70fb      	strb	r3, [r7, #3]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70bb      	strb	r3, [r7, #2]
 80081ee:	4613      	mov	r3, r2
 80081f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008200:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008202:	e025      	b.n	8008250 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	221a      	movs	r2, #26
 8008208:	fb02 f303 	mul.w	r3, r2, r3
 800820c:	3308      	adds	r3, #8
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	3302      	adds	r3, #2
 8008214:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	429a      	cmp	r2, r3
 800821e:	d002      	beq.n	8008226 <USBH_FindInterface+0x4e>
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	2bff      	cmp	r3, #255	@ 0xff
 8008224:	d111      	bne.n	800824a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800822a:	78ba      	ldrb	r2, [r7, #2]
 800822c:	429a      	cmp	r2, r3
 800822e:	d002      	beq.n	8008236 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008230:	78bb      	ldrb	r3, [r7, #2]
 8008232:	2bff      	cmp	r3, #255	@ 0xff
 8008234:	d109      	bne.n	800824a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800823a:	787a      	ldrb	r2, [r7, #1]
 800823c:	429a      	cmp	r2, r3
 800823e:	d002      	beq.n	8008246 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008240:	787b      	ldrb	r3, [r7, #1]
 8008242:	2bff      	cmp	r3, #255	@ 0xff
 8008244:	d101      	bne.n	800824a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	e006      	b.n	8008258 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	3301      	adds	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d9d6      	bls.n	8008204 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008256:	23ff      	movs	r3, #255	@ 0xff
}
 8008258:	4618      	mov	r0, r3
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f006 fd33 	bl	800ecd8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008272:	2101      	movs	r1, #1
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f006 fe4c 	bl	800ef12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af04      	add	r7, sp, #16
 800828a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b01      	cmp	r3, #1
 800829e:	d102      	bne.n	80082a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2203      	movs	r2, #3
 80082a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b0b      	cmp	r3, #11
 80082ae:	f200 81bb 	bhi.w	8008628 <USBH_Process+0x3a4>
 80082b2:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <USBH_Process+0x34>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082e9 	.word	0x080082e9
 80082bc:	0800831b 	.word	0x0800831b
 80082c0:	08008383 	.word	0x08008383
 80082c4:	080085c3 	.word	0x080085c3
 80082c8:	08008629 	.word	0x08008629
 80082cc:	08008423 	.word	0x08008423
 80082d0:	08008569 	.word	0x08008569
 80082d4:	08008459 	.word	0x08008459
 80082d8:	08008479 	.word	0x08008479
 80082dc:	08008497 	.word	0x08008497
 80082e0:	080084db 	.word	0x080084db
 80082e4:	080085ab 	.word	0x080085ab
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 819b 	beq.w	800862c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80082fc:	20c8      	movs	r0, #200	@ 0xc8
 80082fe:	f006 fe85 	bl	800f00c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f006 fd45 	bl	800ed92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008318:	e188      	b.n	800862c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008332:	e18a      	b.n	800864a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800833a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800833e:	d914      	bls.n	800836a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008346:	3301      	adds	r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008356:	2b03      	cmp	r3, #3
 8008358:	d903      	bls.n	8008362 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	220d      	movs	r2, #13
 800835e:	701a      	strb	r2, [r3, #0]
      break;
 8008360:	e173      	b.n	800864a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
      break;
 8008368:	e16f      	b.n	800864a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008370:	f103 020a 	add.w	r2, r3, #10
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800837a:	200a      	movs	r0, #10
 800837c:	f006 fe46 	bl	800f00c <USBH_Delay>
      break;
 8008380:	e163      	b.n	800864a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008392:	2104      	movs	r1, #4
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008398:	2064      	movs	r0, #100	@ 0x64
 800839a:	f006 fe37 	bl	800f00c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f006 fcd0 	bl	800ed44 <USBH_LL_GetSpeed>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2205      	movs	r2, #5
 80083b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fa9b 	bl	80098f2 <USBH_AllocPipe>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fa93 	bl	80098f2 <USBH_AllocPipe>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	7919      	ldrb	r1, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083e8:	9202      	str	r2, [sp, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	9201      	str	r2, [sp, #4]
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4603      	mov	r3, r0
 80083f2:	2280      	movs	r2, #128	@ 0x80
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 fa4d 	bl	8009894 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7959      	ldrb	r1, [r3, #5]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800840e:	9202      	str	r2, [sp, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	9201      	str	r2, [sp, #4]
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	4603      	mov	r3, r0
 8008418:	2200      	movs	r2, #0
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fa3a 	bl	8009894 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008420:	e113      	b.n	800864a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f916 	bl	8008654 <USBH_HandleEnum>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80fd 	bne.w	8008630 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008444:	2b01      	cmp	r3, #1
 8008446:	d103      	bne.n	8008450 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2208      	movs	r2, #8
 800844c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800844e:	e0ef      	b.n	8008630 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2207      	movs	r2, #7
 8008454:	701a      	strb	r2, [r3, #0]
      break;
 8008456:	e0eb      	b.n	8008630 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80e8 	beq.w	8008634 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800846a:	2101      	movs	r1, #1
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2208      	movs	r2, #8
 8008474:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008476:	e0dd      	b.n	8008634 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fc3a 	bl	8008cfa <USBH_SetCfg>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f040 80d5 	bne.w	8008638 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2209      	movs	r2, #9
 8008492:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008494:	e0d0      	b.n	8008638 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d016      	beq.n	80084d2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80084a4:	2101      	movs	r1, #1
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fc4a 	bl	8008d40 <USBH_SetFeature>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220a      	movs	r2, #10
 80084bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084be:	e0bd      	b.n	800863c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	f040 80b9 	bne.w	800863c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	220a      	movs	r2, #10
 80084ce:	701a      	strb	r2, [r3, #0]
      break;
 80084d0:	e0b4      	b.n	800863c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	220a      	movs	r2, #10
 80084d6:	701a      	strb	r2, [r3, #0]
      break;
 80084d8:	e0b0      	b.n	800863c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80ad 	beq.w	8008640 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
 80084f2:	e016      	b.n	8008522 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80084f4:	7bfa      	ldrb	r2, [r7, #15]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32de      	adds	r2, #222	@ 0xde
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	791a      	ldrb	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008506:	429a      	cmp	r2, r3
 8008508:	d108      	bne.n	800851c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800850a:	7bfa      	ldrb	r2, [r7, #15]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	32de      	adds	r2, #222	@ 0xde
 8008510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800851a:	e005      	b.n	8008528 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	3301      	adds	r3, #1
 8008520:	73fb      	strb	r3, [r7, #15]
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0e5      	beq.n	80084f4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d016      	beq.n	8008560 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2206      	movs	r2, #6
 8008548:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008550:	2103      	movs	r1, #3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008556:	e073      	b.n	8008640 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	220d      	movs	r2, #13
 800855c:	701a      	strb	r2, [r3, #0]
      break;
 800855e:	e06f      	b.n	8008640 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220d      	movs	r2, #13
 8008564:	701a      	strb	r2, [r3, #0]
      break;
 8008566:	e06b      	b.n	8008640 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d017      	beq.n	80085a2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
 800857e:	4603      	mov	r3, r0
 8008580:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	220b      	movs	r2, #11
 800858e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008590:	e058      	b.n	8008644 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d154      	bne.n	8008644 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	220d      	movs	r2, #13
 800859e:	701a      	strb	r2, [r3, #0]
      break;
 80085a0:	e050      	b.n	8008644 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	220d      	movs	r2, #13
 80085a6:	701a      	strb	r2, [r3, #0]
      break;
 80085a8:	e04c      	b.n	8008644 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d049      	beq.n	8008648 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
      }
      break;
 80085c0:	e042      	b.n	8008648 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff fd4b 	bl	8008066 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085fe:	2105      	movs	r1, #5
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d107      	bne.n	8008620 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff fe23 	bl	8008264 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800861e:	e014      	b.n	800864a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f006 fb59 	bl	800ecd8 <USBH_LL_Start>
      break;
 8008626:	e010      	b.n	800864a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008628:	bf00      	nop
 800862a:	e00e      	b.n	800864a <USBH_Process+0x3c6>
      break;
 800862c:	bf00      	nop
 800862e:	e00c      	b.n	800864a <USBH_Process+0x3c6>
      break;
 8008630:	bf00      	nop
 8008632:	e00a      	b.n	800864a <USBH_Process+0x3c6>
    break;
 8008634:	bf00      	nop
 8008636:	e008      	b.n	800864a <USBH_Process+0x3c6>
      break;
 8008638:	bf00      	nop
 800863a:	e006      	b.n	800864a <USBH_Process+0x3c6>
      break;
 800863c:	bf00      	nop
 800863e:	e004      	b.n	800864a <USBH_Process+0x3c6>
      break;
 8008640:	bf00      	nop
 8008642:	e002      	b.n	800864a <USBH_Process+0x3c6>
      break;
 8008644:	bf00      	nop
 8008646:	e000      	b.n	800864a <USBH_Process+0x3c6>
      break;
 8008648:	bf00      	nop
  }
  return USBH_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af04      	add	r7, sp, #16
 800865a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008660:	2301      	movs	r3, #1
 8008662:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	2b07      	cmp	r3, #7
 800866a:	f200 81bd 	bhi.w	80089e8 <USBH_HandleEnum+0x394>
 800866e:	a201      	add	r2, pc, #4	@ (adr r2, 8008674 <USBH_HandleEnum+0x20>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	08008695 	.word	0x08008695
 8008678:	0800874f 	.word	0x0800874f
 800867c:	080087b9 	.word	0x080087b9
 8008680:	08008843 	.word	0x08008843
 8008684:	080088ad 	.word	0x080088ad
 8008688:	0800891d 	.word	0x0800891d
 800868c:	08008963 	.word	0x08008963
 8008690:	080089a9 	.word	0x080089a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008694:	2108      	movs	r1, #8
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa4c 	bl	8008b34 <USBH_Get_DevDesc>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d12e      	bne.n	8008704 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	7919      	ldrb	r1, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086ca:	9202      	str	r2, [sp, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	9201      	str	r2, [sp, #4]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	4603      	mov	r3, r0
 80086d4:	2280      	movs	r2, #128	@ 0x80
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 f8dc 	bl	8009894 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	7959      	ldrb	r1, [r3, #5]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086f0:	9202      	str	r2, [sp, #8]
 80086f2:	2200      	movs	r2, #0
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	2200      	movs	r2, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f8c9 	bl	8009894 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008702:	e173      	b.n	80089ec <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b03      	cmp	r3, #3
 8008708:	f040 8170 	bne.w	80089ec <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008712:	3301      	adds	r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008722:	2b03      	cmp	r3, #3
 8008724:	d903      	bls.n	800872e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	220d      	movs	r2, #13
 800872a:	701a      	strb	r2, [r3, #0]
      break;
 800872c:	e15e      	b.n	80089ec <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	795b      	ldrb	r3, [r3, #5]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f8fd 	bl	8009934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 f8f7 	bl	8009934 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
      break;
 800874c:	e14e      	b.n	80089ec <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800874e:	2112      	movs	r1, #18
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f9ef 	bl	8008b34 <USBH_Get_DevDesc>
 8008756:	4603      	mov	r3, r0
 8008758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008766:	e143      	b.n	80089f0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b03      	cmp	r3, #3
 800876c:	f040 8140 	bne.w	80089f0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008776:	3301      	adds	r3, #1
 8008778:	b2da      	uxtb	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008786:	2b03      	cmp	r3, #3
 8008788:	d903      	bls.n	8008792 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	220d      	movs	r2, #13
 800878e:	701a      	strb	r2, [r3, #0]
      break;
 8008790:	e12e      	b.n	80089f0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	795b      	ldrb	r3, [r3, #5]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 f8cb 	bl	8009934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	791b      	ldrb	r3, [r3, #4]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 f8c5 	bl	8009934 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]
      break;
 80087b6:	e11b      	b.n	80089f0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80087b8:	2101      	movs	r1, #1
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa79 	bl	8008cb2 <USBH_SetAddress>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d130      	bne.n	800882c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80087ca:	2002      	movs	r0, #2
 80087cc:	f006 fc1e 	bl	800f00c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2203      	movs	r2, #3
 80087dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7919      	ldrb	r1, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087f2:	9202      	str	r2, [sp, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	9201      	str	r2, [sp, #4]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4603      	mov	r3, r0
 80087fc:	2280      	movs	r2, #128	@ 0x80
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 f848 	bl	8009894 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7959      	ldrb	r1, [r3, #5]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4603      	mov	r3, r0
 8008822:	2200      	movs	r2, #0
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 f835 	bl	8009894 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800882a:	e0e3      	b.n	80089f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b03      	cmp	r3, #3
 8008830:	f040 80e0 	bne.w	80089f4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220d      	movs	r2, #13
 8008838:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	705a      	strb	r2, [r3, #1]
      break;
 8008840:	e0d8      	b.n	80089f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008842:	2109      	movs	r1, #9
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f9a1 	bl	8008b8c <USBH_Get_CfgDesc>
 800884a:	4603      	mov	r3, r0
 800884c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2204      	movs	r2, #4
 8008858:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800885a:	e0cd      	b.n	80089f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b03      	cmp	r3, #3
 8008860:	f040 80ca 	bne.w	80089f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800886a:	3301      	adds	r3, #1
 800886c:	b2da      	uxtb	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800887a:	2b03      	cmp	r3, #3
 800887c:	d903      	bls.n	8008886 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	220d      	movs	r2, #13
 8008882:	701a      	strb	r2, [r3, #0]
      break;
 8008884:	e0b8      	b.n	80089f8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	795b      	ldrb	r3, [r3, #5]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f851 	bl	8009934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	791b      	ldrb	r3, [r3, #4]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 f84b 	bl	8009934 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
      break;
 80088aa:	e0a5      	b.n	80089f8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f969 	bl	8008b8c <USBH_Get_CfgDesc>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d103      	bne.n	80088cc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2205      	movs	r2, #5
 80088c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088ca:	e097      	b.n	80089fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	f040 8094 	bne.w	80089fc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088da:	3301      	adds	r3, #1
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d903      	bls.n	80088f6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	220d      	movs	r2, #13
 80088f2:	701a      	strb	r2, [r3, #0]
      break;
 80088f4:	e082      	b.n	80089fc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	795b      	ldrb	r3, [r3, #5]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f819 	bl	8009934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	791b      	ldrb	r3, [r3, #4]
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 f813 	bl	8009934 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
      break;
 800891a:	e06f      	b.n	80089fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008922:	2b00      	cmp	r3, #0
 8008924:	d019      	beq.n	800895a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008932:	23ff      	movs	r3, #255	@ 0xff
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f953 	bl	8008be0 <USBH_Get_StringDesc>
 800893a:	4603      	mov	r3, r0
 800893c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d103      	bne.n	800894c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2206      	movs	r2, #6
 8008948:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800894a:	e059      	b.n	8008a00 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b03      	cmp	r3, #3
 8008950:	d156      	bne.n	8008a00 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2206      	movs	r2, #6
 8008956:	705a      	strb	r2, [r3, #1]
      break;
 8008958:	e052      	b.n	8008a00 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2206      	movs	r2, #6
 800895e:	705a      	strb	r2, [r3, #1]
      break;
 8008960:	e04e      	b.n	8008a00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008968:	2b00      	cmp	r3, #0
 800896a:	d019      	beq.n	80089a0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008978:	23ff      	movs	r3, #255	@ 0xff
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f930 	bl	8008be0 <USBH_Get_StringDesc>
 8008980:	4603      	mov	r3, r0
 8008982:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2207      	movs	r2, #7
 800898e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008990:	e038      	b.n	8008a04 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d135      	bne.n	8008a04 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2207      	movs	r2, #7
 800899c:	705a      	strb	r2, [r3, #1]
      break;
 800899e:	e031      	b.n	8008a04 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2207      	movs	r2, #7
 80089a4:	705a      	strb	r2, [r3, #1]
      break;
 80089a6:	e02d      	b.n	8008a04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d017      	beq.n	80089e2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089be:	23ff      	movs	r3, #255	@ 0xff
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f90d 	bl	8008be0 <USBH_Get_StringDesc>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80089d4:	e018      	b.n	8008a08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d115      	bne.n	8008a08 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]
      break;
 80089e0:	e012      	b.n	8008a08 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
      break;
 80089e6:	e00f      	b.n	8008a08 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80089e8:	bf00      	nop
 80089ea:	e00e      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 80089ec:	bf00      	nop
 80089ee:	e00c      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 80089f0:	bf00      	nop
 80089f2:	e00a      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 80089f4:	bf00      	nop
 80089f6:	e008      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 80089f8:	bf00      	nop
 80089fa:	e006      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 80089fc:	bf00      	nop
 80089fe:	e004      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 8008a00:	bf00      	nop
 8008a02:	e002      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 8008a04:	bf00      	nop
 8008a06:	e000      	b.n	8008a0a <USBH_HandleEnum+0x3b6>
      break;
 8008a08:	bf00      	nop
  }
  return Status;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f804 	bl	8008a56 <USBH_HandleSof>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b0b      	cmp	r3, #11
 8008a66:	d10a      	bne.n	8008a7e <USBH_HandleSof+0x28>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
  }
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008a96:	bf00      	nop
}
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008ab2:	bf00      	nop
}
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f006 f8fe 	bl	800ed0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 ff0b 	bl	8009934 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	795b      	ldrb	r3, [r3, #5]
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 ff05 	bl	8009934 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af02      	add	r7, sp, #8
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008b40:	887b      	ldrh	r3, [r7, #2]
 8008b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b46:	d901      	bls.n	8008b4c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e01b      	b.n	8008b84 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008b52:	887b      	ldrh	r3, [r7, #2]
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	4613      	mov	r3, r2
 8008b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f872 	bl	8008c48 <USBH_GetDescriptor>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b74:	887a      	ldrh	r2, [r7, #2]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f929 	bl	8008dd0 <USBH_ParseDevDesc>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	331c      	adds	r3, #28
 8008b9c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008b9e:	887b      	ldrh	r3, [r7, #2]
 8008ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba4:	d901      	bls.n	8008baa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e016      	b.n	8008bd8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008baa:	887b      	ldrh	r3, [r7, #2]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f846 	bl	8008c48 <USBH_GetDescriptor>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d107      	bne.n	8008bd6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008bc6:	887b      	ldrh	r3, [r7, #2]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f9af 	bl	8008f30 <USBH_ParseCfgDesc>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	607a      	str	r2, [r7, #4]
 8008bea:	461a      	mov	r2, r3
 8008bec:	460b      	mov	r3, r1
 8008bee:	72fb      	strb	r3, [r7, #11]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008bf4:	893b      	ldrh	r3, [r7, #8]
 8008bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bfa:	d802      	bhi.n	8008c02 <USBH_Get_StringDesc+0x22>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e01c      	b.n	8008c40 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008c0e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008c16:	893b      	ldrh	r3, [r7, #8]
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f812 	bl	8008c48 <USBH_GetDescriptor>
 8008c24:	4603      	mov	r3, r0
 8008c26:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d107      	bne.n	8008c3e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c34:	893a      	ldrh	r2, [r7, #8]
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fb8d 	bl	8009358 <USBH_ParseStringDesc>
  }

  return status;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	72fb      	strb	r3, [r7, #11]
 8008c56:	4613      	mov	r3, r2
 8008c58:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	789b      	ldrb	r3, [r3, #2]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d11c      	bne.n	8008c9c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2206      	movs	r2, #6
 8008c72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	893a      	ldrh	r2, [r7, #8]
 8008c78:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c7a:	893b      	ldrh	r3, [r7, #8]
 8008c7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c84:	d104      	bne.n	8008c90 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f240 4209 	movw	r2, #1033	@ 0x409
 8008c8c:	829a      	strh	r2, [r3, #20]
 8008c8e:	e002      	b.n	8008c96 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8b3a      	ldrh	r2, [r7, #24]
 8008c9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c9c:	8b3b      	ldrh	r3, [r7, #24]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fba5 	bl	80093f2 <USBH_CtlReq>
 8008ca8:	4603      	mov	r3, r0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	789b      	ldrb	r3, [r3, #2]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10f      	bne.n	8008ce6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2205      	movs	r2, #5
 8008cd0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fb81 	bl	80093f2 <USBH_CtlReq>
 8008cf0:	4603      	mov	r3, r0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	789b      	ldrb	r3, [r3, #2]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d10e      	bne.n	8008d2c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2209      	movs	r2, #9
 8008d18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	887a      	ldrh	r2, [r7, #2]
 8008d1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb5e 	bl	80093f2 <USBH_CtlReq>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	789b      	ldrb	r3, [r3, #2]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10f      	bne.n	8008d74 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d74:	2200      	movs	r2, #0
 8008d76:	2100      	movs	r1, #0
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fb3a 	bl	80093f2 <USBH_CtlReq>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	789b      	ldrb	r3, [r3, #2]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d10f      	bne.n	8008dbc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb16 	bl	80093f2 <USBH_CtlReq>
 8008dc6:	4603      	mov	r3, r0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008de4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008df0:	2302      	movs	r3, #2
 8008df2:	e094      	b.n	8008f1e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	781a      	ldrb	r2, [r3, #0]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	785a      	ldrb	r2, [r3, #1]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3302      	adds	r3, #2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3303      	adds	r3, #3
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	791a      	ldrb	r2, [r3, #4]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	795a      	ldrb	r2, [r3, #5]
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	799a      	ldrb	r2, [r3, #6]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	79da      	ldrb	r2, [r3, #7]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d11b      	bne.n	8008e8a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	79db      	ldrb	r3, [r3, #7]
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	dc0f      	bgt.n	8008e7a <USBH_ParseDevDesc+0xaa>
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	db0f      	blt.n	8008e7e <USBH_ParseDevDesc+0xae>
 8008e5e:	3b08      	subs	r3, #8
 8008e60:	4a32      	ldr	r2, [pc, #200]	@ (8008f2c <USBH_ParseDevDesc+0x15c>)
 8008e62:	fa22 f303 	lsr.w	r3, r2, r3
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bf14      	ite	ne
 8008e6e:	2301      	movne	r3, #1
 8008e70:	2300      	moveq	r3, #0
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <USBH_ParseDevDesc+0xb6>
 8008e78:	e001      	b.n	8008e7e <USBH_ParseDevDesc+0xae>
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	d003      	beq.n	8008e86 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2208      	movs	r2, #8
 8008e82:	71da      	strb	r2, [r3, #7]
        break;
 8008e84:	e000      	b.n	8008e88 <USBH_ParseDevDesc+0xb8>
        break;
 8008e86:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008e88:	e00e      	b.n	8008ea8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d107      	bne.n	8008ea4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	79db      	ldrb	r3, [r3, #7]
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d005      	beq.n	8008ea8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	71da      	strb	r2, [r3, #7]
 8008ea2:	e001      	b.n	8008ea8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d936      	bls.n	8008f1c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	3309      	adds	r3, #9
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	330a      	adds	r3, #10
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	330b      	adds	r3, #11
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4313      	orrs	r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	330d      	adds	r3, #13
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	7b9a      	ldrb	r2, [r3, #14]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	7bda      	ldrb	r2, [r3, #15]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	7c1a      	ldrb	r2, [r3, #16]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	7c5a      	ldrb	r2, [r3, #17]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	01000101 	.word	0x01000101

08008f30 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08c      	sub	sp, #48	@ 0x30
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f44:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	e0da      	b.n	8009118 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d002      	beq.n	8008f74 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	2209      	movs	r2, #9
 8008f72:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	785a      	ldrb	r2, [r3, #1]
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	3302      	adds	r3, #2
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	3303      	adds	r3, #3
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	021b      	lsls	r3, r3, #8
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	4313      	orrs	r3, r2
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9e:	bf28      	it	cs
 8008fa0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	791a      	ldrb	r2, [r3, #4]
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	795a      	ldrb	r2, [r3, #5]
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	799a      	ldrb	r2, [r3, #6]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	79da      	ldrb	r2, [r3, #7]
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	7a1a      	ldrb	r2, [r3, #8]
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	f240 809d 	bls.w	8009114 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008fda:	2309      	movs	r3, #9
 8008fdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fe2:	e081      	b.n	80090e8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fe4:	f107 0316 	add.w	r3, r7, #22
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fec:	f000 f9e7 	bl	80093be <USBH_GetNextDesc>
 8008ff0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d176      	bne.n	80090e8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b09      	cmp	r3, #9
 8009000:	d002      	beq.n	8009008 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	2209      	movs	r2, #9
 8009006:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800900c:	221a      	movs	r2, #26
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	3308      	adds	r3, #8
 8009014:	6a3a      	ldr	r2, [r7, #32]
 8009016:	4413      	add	r3, r2
 8009018:	3302      	adds	r3, #2
 800901a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800901c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800901e:	69f8      	ldr	r0, [r7, #28]
 8009020:	f000 f87e 	bl	8009120 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800902e:	e043      	b.n	80090b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009030:	f107 0316 	add.w	r3, r7, #22
 8009034:	4619      	mov	r1, r3
 8009036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009038:	f000 f9c1 	bl	80093be <USBH_GetNextDesc>
 800903c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800903e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b05      	cmp	r3, #5
 8009044:	d138      	bne.n	80090b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	795b      	ldrb	r3, [r3, #5]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d113      	bne.n	8009076 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009052:	2b02      	cmp	r3, #2
 8009054:	d003      	beq.n	800905e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	799b      	ldrb	r3, [r3, #6]
 800905a:	2b03      	cmp	r3, #3
 800905c:	d10b      	bne.n	8009076 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	79db      	ldrb	r3, [r3, #7]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10b      	bne.n	800907e <USBH_ParseCfgDesc+0x14e>
 8009066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b09      	cmp	r3, #9
 800906c:	d007      	beq.n	800907e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800906e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009070:	2209      	movs	r2, #9
 8009072:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009074:	e003      	b.n	800907e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009078:	2207      	movs	r2, #7
 800907a:	701a      	strb	r2, [r3, #0]
 800907c:	e000      	b.n	8009080 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800907e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009084:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009088:	3201      	adds	r2, #1
 800908a:	00d2      	lsls	r2, r2, #3
 800908c:	211a      	movs	r1, #26
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	3308      	adds	r3, #8
 8009096:	6a3a      	ldr	r2, [r7, #32]
 8009098:	4413      	add	r3, r2
 800909a:	3304      	adds	r3, #4
 800909c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800909e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090a0:	69b9      	ldr	r1, [r7, #24]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 f870 	bl	8009188 <USBH_ParseEPDesc>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80090ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090b2:	3301      	adds	r3, #1
 80090b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	791b      	ldrb	r3, [r3, #4]
 80090bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d204      	bcs.n	80090ce <USBH_ParseCfgDesc+0x19e>
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	885a      	ldrh	r2, [r3, #2]
 80090c8:	8afb      	ldrh	r3, [r7, #22]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d8b0      	bhi.n	8009030 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	791b      	ldrb	r3, [r3, #4]
 80090d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d201      	bcs.n	80090de <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80090da:	2303      	movs	r3, #3
 80090dc:	e01c      	b.n	8009118 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80090de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090e2:	3301      	adds	r3, #1
 80090e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d805      	bhi.n	80090fc <USBH_ParseCfgDesc+0x1cc>
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	885a      	ldrh	r2, [r3, #2]
 80090f4:	8afb      	ldrh	r3, [r7, #22]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	f63f af74 	bhi.w	8008fe4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	791b      	ldrb	r3, [r3, #4]
 8009100:	2b02      	cmp	r3, #2
 8009102:	bf28      	it	cs
 8009104:	2302      	movcs	r3, #2
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800910c:	429a      	cmp	r2, r3
 800910e:	d201      	bcs.n	8009114 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009110:	2303      	movs	r3, #3
 8009112:	e001      	b.n	8009118 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009118:	4618      	mov	r0, r3
 800911a:	3730      	adds	r7, #48	@ 0x30
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	785a      	ldrb	r2, [r3, #1]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	789a      	ldrb	r2, [r3, #2]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	78da      	ldrb	r2, [r3, #3]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	3304      	adds	r3, #4
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	bf28      	it	cs
 8009154:	2302      	movcs	r3, #2
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	795a      	ldrb	r2, [r3, #5]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	799a      	ldrb	r2, [r3, #6]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	79da      	ldrb	r2, [r3, #7]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	7a1a      	ldrb	r2, [r3, #8]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	721a      	strb	r2, [r3, #8]
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	785a      	ldrb	r2, [r3, #1]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	789a      	ldrb	r2, [r3, #2]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	78da      	ldrb	r2, [r3, #3]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3304      	adds	r3, #4
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3305      	adds	r3, #5
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	4313      	orrs	r3, r2
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	799a      	ldrb	r2, [r3, #6]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	889b      	ldrh	r3, [r3, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80091e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ea:	d804      	bhi.n	80091f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80091f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f4:	d901      	bls.n	80091fa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80091f6:	2303      	movs	r3, #3
 80091f8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009200:	2b00      	cmp	r3, #0
 8009202:	d136      	bne.n	8009272 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	78db      	ldrb	r3, [r3, #3]
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d108      	bne.n	8009222 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	889b      	ldrh	r3, [r3, #4]
 8009214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009218:	f240 8097 	bls.w	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800921c:	2303      	movs	r3, #3
 800921e:	75fb      	strb	r3, [r7, #23]
 8009220:	e093      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	78db      	ldrb	r3, [r3, #3]
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d107      	bne.n	800923e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	2b40      	cmp	r3, #64	@ 0x40
 8009234:	f240 8089 	bls.w	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009238:	2303      	movs	r3, #3
 800923a:	75fb      	strb	r3, [r7, #23]
 800923c:	e085      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	78db      	ldrb	r3, [r3, #3]
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	2b01      	cmp	r3, #1
 8009248:	d005      	beq.n	8009256 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	78db      	ldrb	r3, [r3, #3]
 800924e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009252:	2b03      	cmp	r3, #3
 8009254:	d10a      	bne.n	800926c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	799b      	ldrb	r3, [r3, #6]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <USBH_ParseEPDesc+0xde>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	799b      	ldrb	r3, [r3, #6]
 8009262:	2b10      	cmp	r3, #16
 8009264:	d970      	bls.n	8009348 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009266:	2303      	movs	r3, #3
 8009268:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800926a:	e06d      	b.n	8009348 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800926c:	2303      	movs	r3, #3
 800926e:	75fb      	strb	r3, [r7, #23]
 8009270:	e06b      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009278:	2b01      	cmp	r3, #1
 800927a:	d13c      	bne.n	80092f6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	78db      	ldrb	r3, [r3, #3]
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d005      	beq.n	8009294 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	78db      	ldrb	r3, [r3, #3]
 800928c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009290:	2b00      	cmp	r3, #0
 8009292:	d106      	bne.n	80092a2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	889b      	ldrh	r3, [r3, #4]
 8009298:	2b40      	cmp	r3, #64	@ 0x40
 800929a:	d956      	bls.n	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800929c:	2303      	movs	r3, #3
 800929e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80092a0:	e053      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	78db      	ldrb	r3, [r3, #3]
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d10e      	bne.n	80092cc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	799b      	ldrb	r3, [r3, #6]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80092ba:	2b10      	cmp	r3, #16
 80092bc:	d803      	bhi.n	80092c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80092c2:	2b40      	cmp	r3, #64	@ 0x40
 80092c4:	d941      	bls.n	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092c6:	2303      	movs	r3, #3
 80092c8:	75fb      	strb	r3, [r7, #23]
 80092ca:	e03e      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	78db      	ldrb	r3, [r3, #3]
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d10b      	bne.n	80092f0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	799b      	ldrb	r3, [r3, #6]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <USBH_ParseEPDesc+0x162>
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	889b      	ldrh	r3, [r3, #4]
 80092e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092e8:	d32f      	bcc.n	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092ea:	2303      	movs	r3, #3
 80092ec:	75fb      	strb	r3, [r7, #23]
 80092ee:	e02c      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80092f0:	2303      	movs	r3, #3
 80092f2:	75fb      	strb	r3, [r7, #23]
 80092f4:	e029      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d120      	bne.n	8009342 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	78db      	ldrb	r3, [r3, #3]
 8009304:	f003 0303 	and.w	r3, r3, #3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	889b      	ldrh	r3, [r3, #4]
 8009310:	2b08      	cmp	r3, #8
 8009312:	d01a      	beq.n	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009314:	2303      	movs	r3, #3
 8009316:	75fb      	strb	r3, [r7, #23]
 8009318:	e017      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	78db      	ldrb	r3, [r3, #3]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d10a      	bne.n	800933c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	799b      	ldrb	r3, [r3, #6]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <USBH_ParseEPDesc+0x1ae>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	889b      	ldrh	r3, [r3, #4]
 8009332:	2b08      	cmp	r3, #8
 8009334:	d909      	bls.n	800934a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009336:	2303      	movs	r3, #3
 8009338:	75fb      	strb	r3, [r7, #23]
 800933a:	e006      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800933c:	2303      	movs	r3, #3
 800933e:	75fb      	strb	r3, [r7, #23]
 8009340:	e003      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009342:	2303      	movs	r3, #3
 8009344:	75fb      	strb	r3, [r7, #23]
 8009346:	e000      	b.n	800934a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009348:	bf00      	nop
  }

  return status;
 800934a:	7dfb      	ldrb	r3, [r7, #23]
}
 800934c:	4618      	mov	r0, r3
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b03      	cmp	r3, #3
 800936e:	d120      	bne.n	80093b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	1e9a      	subs	r2, r3, #2
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	4293      	cmp	r3, r2
 800937a:	bf28      	it	cs
 800937c:	4613      	movcs	r3, r2
 800937e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3302      	adds	r3, #2
 8009384:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009386:	2300      	movs	r3, #0
 8009388:	82fb      	strh	r3, [r7, #22]
 800938a:	e00b      	b.n	80093a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800938c:	8afb      	ldrh	r3, [r7, #22]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	781a      	ldrb	r2, [r3, #0]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	3301      	adds	r3, #1
 800939c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800939e:	8afb      	ldrh	r3, [r7, #22]
 80093a0:	3302      	adds	r3, #2
 80093a2:	82fb      	strh	r3, [r7, #22]
 80093a4:	8afa      	ldrh	r2, [r7, #22]
 80093a6:	8abb      	ldrh	r3, [r7, #20]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d3ef      	bcc.n	800938c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	701a      	strb	r2, [r3, #0]
  }
}
 80093b2:	bf00      	nop
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	7812      	ldrb	r2, [r2, #0]
 80093d0:	4413      	add	r3, r2
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4413      	add	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093e4:	68fb      	ldr	r3, [r7, #12]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	4613      	mov	r3, r2
 80093fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009400:	2301      	movs	r3, #1
 8009402:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	789b      	ldrb	r3, [r3, #2]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d002      	beq.n	8009412 <USBH_CtlReq+0x20>
 800940c:	2b02      	cmp	r3, #2
 800940e:	d00f      	beq.n	8009430 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009410:	e027      	b.n	8009462 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2202      	movs	r2, #2
 8009428:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800942a:	2301      	movs	r3, #1
 800942c:	75fb      	strb	r3, [r7, #23]
      break;
 800942e:	e018      	b.n	8009462 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f81b 	bl	800946c <USBH_HandleControl>
 8009436:	4603      	mov	r3, r0
 8009438:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <USBH_CtlReq+0x54>
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	2b03      	cmp	r3, #3
 8009444:	d106      	bne.n	8009454 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	761a      	strb	r2, [r3, #24]
      break;
 8009452:	e005      	b.n	8009460 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d102      	bne.n	8009460 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	709a      	strb	r2, [r3, #2]
      break;
 8009460:	bf00      	nop
  }
  return status;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009474:	2301      	movs	r3, #1
 8009476:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009478:	2300      	movs	r3, #0
 800947a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7e1b      	ldrb	r3, [r3, #24]
 8009480:	3b01      	subs	r3, #1
 8009482:	2b0a      	cmp	r3, #10
 8009484:	f200 8156 	bhi.w	8009734 <USBH_HandleControl+0x2c8>
 8009488:	a201      	add	r2, pc, #4	@ (adr r2, 8009490 <USBH_HandleControl+0x24>)
 800948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948e:	bf00      	nop
 8009490:	080094bd 	.word	0x080094bd
 8009494:	080094d7 	.word	0x080094d7
 8009498:	08009541 	.word	0x08009541
 800949c:	08009567 	.word	0x08009567
 80094a0:	0800959f 	.word	0x0800959f
 80094a4:	080095c9 	.word	0x080095c9
 80094a8:	0800961b 	.word	0x0800961b
 80094ac:	0800963d 	.word	0x0800963d
 80094b0:	08009679 	.word	0x08009679
 80094b4:	0800969f 	.word	0x0800969f
 80094b8:	080096dd 	.word	0x080096dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f103 0110 	add.w	r1, r3, #16
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	795b      	ldrb	r3, [r3, #5]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f943 	bl	8009754 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2202      	movs	r2, #2
 80094d2:	761a      	strb	r2, [r3, #24]
      break;
 80094d4:	e139      	b.n	800974a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	795b      	ldrb	r3, [r3, #5]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f005 fd05 	bl	800eeec <USBH_LL_GetURBState>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d11e      	bne.n	800952a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7c1b      	ldrb	r3, [r3, #16]
 80094f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80094f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8adb      	ldrh	r3, [r3, #22]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80094fe:	7b7b      	ldrb	r3, [r7, #13]
 8009500:	2b80      	cmp	r3, #128	@ 0x80
 8009502:	d103      	bne.n	800950c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2203      	movs	r2, #3
 8009508:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800950a:	e115      	b.n	8009738 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2205      	movs	r2, #5
 8009510:	761a      	strb	r2, [r3, #24]
      break;
 8009512:	e111      	b.n	8009738 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009514:	7b7b      	ldrb	r3, [r7, #13]
 8009516:	2b80      	cmp	r3, #128	@ 0x80
 8009518:	d103      	bne.n	8009522 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2209      	movs	r2, #9
 800951e:	761a      	strb	r2, [r3, #24]
      break;
 8009520:	e10a      	b.n	8009738 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2207      	movs	r2, #7
 8009526:	761a      	strb	r2, [r3, #24]
      break;
 8009528:	e106      	b.n	8009738 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b04      	cmp	r3, #4
 800952e:	d003      	beq.n	8009538 <USBH_HandleControl+0xcc>
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	2b02      	cmp	r3, #2
 8009534:	f040 8100 	bne.w	8009738 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	220b      	movs	r2, #11
 800953c:	761a      	strb	r2, [r3, #24]
      break;
 800953e:	e0fb      	b.n	8009738 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6899      	ldr	r1, [r3, #8]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	899a      	ldrh	r2, [r3, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	791b      	ldrb	r3, [r3, #4]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f93a 	bl	80097d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2204      	movs	r2, #4
 8009562:	761a      	strb	r2, [r3, #24]
      break;
 8009564:	e0f1      	b.n	800974a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	791b      	ldrb	r3, [r3, #4]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f005 fcbd 	bl	800eeec <USBH_LL_GetURBState>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d102      	bne.n	8009582 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2209      	movs	r2, #9
 8009580:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b05      	cmp	r3, #5
 8009586:	d102      	bne.n	800958e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009588:	2303      	movs	r3, #3
 800958a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800958c:	e0d6      	b.n	800973c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b04      	cmp	r3, #4
 8009592:	f040 80d3 	bne.w	800973c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	220b      	movs	r2, #11
 800959a:	761a      	strb	r2, [r3, #24]
      break;
 800959c:	e0ce      	b.n	800973c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6899      	ldr	r1, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	899a      	ldrh	r2, [r3, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	795b      	ldrb	r3, [r3, #5]
 80095aa:	2001      	movs	r0, #1
 80095ac:	9000      	str	r0, [sp, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f8ea 	bl	8009788 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2206      	movs	r2, #6
 80095c4:	761a      	strb	r2, [r3, #24]
      break;
 80095c6:	e0c0      	b.n	800974a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	795b      	ldrb	r3, [r3, #5]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f005 fc8c 	bl	800eeec <USBH_LL_GetURBState>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d103      	bne.n	80095e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2207      	movs	r2, #7
 80095e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095e4:	e0ac      	b.n	8009740 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b05      	cmp	r3, #5
 80095ea:	d105      	bne.n	80095f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	220c      	movs	r2, #12
 80095f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80095f2:	2303      	movs	r3, #3
 80095f4:	73fb      	strb	r3, [r7, #15]
      break;
 80095f6:	e0a3      	b.n	8009740 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d103      	bne.n	8009606 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2205      	movs	r2, #5
 8009602:	761a      	strb	r2, [r3, #24]
      break;
 8009604:	e09c      	b.n	8009740 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b04      	cmp	r3, #4
 800960a:	f040 8099 	bne.w	8009740 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	220b      	movs	r2, #11
 8009612:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009614:	2302      	movs	r3, #2
 8009616:	73fb      	strb	r3, [r7, #15]
      break;
 8009618:	e092      	b.n	8009740 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	791b      	ldrb	r3, [r3, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f8d5 	bl	80097d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800962e:	b29a      	uxth	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2208      	movs	r2, #8
 8009638:	761a      	strb	r2, [r3, #24]

      break;
 800963a:	e086      	b.n	800974a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	791b      	ldrb	r3, [r3, #4]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f005 fc52 	bl	800eeec <USBH_LL_GetURBState>
 8009648:	4603      	mov	r3, r0
 800964a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d105      	bne.n	800965e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	220d      	movs	r2, #13
 8009656:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800965c:	e072      	b.n	8009744 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b04      	cmp	r3, #4
 8009662:	d103      	bne.n	800966c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	220b      	movs	r2, #11
 8009668:	761a      	strb	r2, [r3, #24]
      break;
 800966a:	e06b      	b.n	8009744 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b05      	cmp	r3, #5
 8009670:	d168      	bne.n	8009744 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009672:	2303      	movs	r3, #3
 8009674:	73fb      	strb	r3, [r7, #15]
      break;
 8009676:	e065      	b.n	8009744 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	795b      	ldrb	r3, [r3, #5]
 800967c:	2201      	movs	r2, #1
 800967e:	9200      	str	r2, [sp, #0]
 8009680:	2200      	movs	r2, #0
 8009682:	2100      	movs	r1, #0
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f87f 	bl	8009788 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009690:	b29a      	uxth	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	220a      	movs	r2, #10
 800969a:	761a      	strb	r2, [r3, #24]
      break;
 800969c:	e055      	b.n	800974a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	795b      	ldrb	r3, [r3, #5]
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f005 fc21 	bl	800eeec <USBH_LL_GetURBState>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d105      	bne.n	80096c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	220d      	movs	r2, #13
 80096bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096be:	e043      	b.n	8009748 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d103      	bne.n	80096ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2209      	movs	r2, #9
 80096ca:	761a      	strb	r2, [r3, #24]
      break;
 80096cc:	e03c      	b.n	8009748 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d139      	bne.n	8009748 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	220b      	movs	r2, #11
 80096d8:	761a      	strb	r2, [r3, #24]
      break;
 80096da:	e035      	b.n	8009748 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7e5b      	ldrb	r3, [r3, #25]
 80096e0:	3301      	adds	r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	765a      	strb	r2, [r3, #25]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7e5b      	ldrb	r3, [r3, #25]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d806      	bhi.n	80096fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80096fc:	e025      	b.n	800974a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009704:	2106      	movs	r1, #6
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	795b      	ldrb	r3, [r3, #5]
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f90c 	bl	8009934 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	791b      	ldrb	r3, [r3, #4]
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f906 	bl	8009934 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800972e:	2302      	movs	r3, #2
 8009730:	73fb      	strb	r3, [r7, #15]
      break;
 8009732:	e00a      	b.n	800974a <USBH_HandleControl+0x2de>

    default:
      break;
 8009734:	bf00      	nop
 8009736:	e008      	b.n	800974a <USBH_HandleControl+0x2de>
      break;
 8009738:	bf00      	nop
 800973a:	e006      	b.n	800974a <USBH_HandleControl+0x2de>
      break;
 800973c:	bf00      	nop
 800973e:	e004      	b.n	800974a <USBH_HandleControl+0x2de>
      break;
 8009740:	bf00      	nop
 8009742:	e002      	b.n	800974a <USBH_HandleControl+0x2de>
      break;
 8009744:	bf00      	nop
 8009746:	e000      	b.n	800974a <USBH_HandleControl+0x2de>
      break;
 8009748:	bf00      	nop
  }

  return status;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af04      	add	r7, sp, #16
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009762:	79f9      	ldrb	r1, [r7, #7]
 8009764:	2300      	movs	r3, #0
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	2308      	movs	r3, #8
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	2300      	movs	r3, #0
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	2300      	movs	r3, #0
 8009776:	2200      	movs	r2, #0
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f005 fb86 	bl	800ee8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af04      	add	r7, sp, #16
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4611      	mov	r1, r2
 8009794:	461a      	mov	r2, r3
 8009796:	460b      	mov	r3, r1
 8009798:	80fb      	strh	r3, [r7, #6]
 800979a:	4613      	mov	r3, r2
 800979c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097ac:	7979      	ldrb	r1, [r7, #5]
 80097ae:	7e3b      	ldrb	r3, [r7, #24]
 80097b0:	9303      	str	r3, [sp, #12]
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	2301      	movs	r3, #1
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	2200      	movs	r2, #0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f005 fb61 	bl	800ee8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b088      	sub	sp, #32
 80097d6:	af04      	add	r7, sp, #16
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	4611      	mov	r1, r2
 80097de:	461a      	mov	r2, r3
 80097e0:	460b      	mov	r3, r1
 80097e2:	80fb      	strh	r3, [r7, #6]
 80097e4:	4613      	mov	r3, r2
 80097e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097e8:	7979      	ldrb	r1, [r7, #5]
 80097ea:	2300      	movs	r3, #0
 80097ec:	9303      	str	r3, [sp, #12]
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	9302      	str	r3, [sp, #8]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	2301      	movs	r3, #1
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	2300      	movs	r3, #0
 80097fc:	2201      	movs	r2, #1
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f005 fb43 	bl	800ee8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009804:	2300      	movs	r3, #0

}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b088      	sub	sp, #32
 8009812:	af04      	add	r7, sp, #16
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	60b9      	str	r1, [r7, #8]
 8009818:	4611      	mov	r1, r2
 800981a:	461a      	mov	r2, r3
 800981c:	460b      	mov	r3, r1
 800981e:	80fb      	strh	r3, [r7, #6]
 8009820:	4613      	mov	r3, r2
 8009822:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009832:	7979      	ldrb	r1, [r7, #5]
 8009834:	7e3b      	ldrb	r3, [r7, #24]
 8009836:	9303      	str	r3, [sp, #12]
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	9302      	str	r3, [sp, #8]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	2301      	movs	r3, #1
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	2302      	movs	r3, #2
 8009846:	2200      	movs	r2, #0
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f005 fb1e 	bl	800ee8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af04      	add	r7, sp, #16
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4611      	mov	r1, r2
 8009864:	461a      	mov	r2, r3
 8009866:	460b      	mov	r3, r1
 8009868:	80fb      	strh	r3, [r7, #6]
 800986a:	4613      	mov	r3, r2
 800986c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800986e:	7979      	ldrb	r1, [r7, #5]
 8009870:	2300      	movs	r3, #0
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	88fb      	ldrh	r3, [r7, #6]
 8009876:	9302      	str	r3, [sp, #8]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	2301      	movs	r3, #1
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2302      	movs	r3, #2
 8009882:	2201      	movs	r2, #1
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f005 fb00 	bl	800ee8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af04      	add	r7, sp, #16
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	4608      	mov	r0, r1
 800989e:	4611      	mov	r1, r2
 80098a0:	461a      	mov	r2, r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	70fb      	strb	r3, [r7, #3]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70bb      	strb	r3, [r7, #2]
 80098aa:	4613      	mov	r3, r2
 80098ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80098ae:	7878      	ldrb	r0, [r7, #1]
 80098b0:	78ba      	ldrb	r2, [r7, #2]
 80098b2:	78f9      	ldrb	r1, [r7, #3]
 80098b4:	8b3b      	ldrh	r3, [r7, #24]
 80098b6:	9302      	str	r3, [sp, #8]
 80098b8:	7d3b      	ldrb	r3, [r7, #20]
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	7c3b      	ldrb	r3, [r7, #16]
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	4603      	mov	r3, r0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f005 fa93 	bl	800edee <USBH_LL_OpenPipe>

  return USBH_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f005 fab2 	bl	800ee4c <USBH_LL_ClosePipe>

  return USBH_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f836 	bl	8009970 <USBH_GetFreePipe>
 8009904:	4603      	mov	r3, r0
 8009906:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009908:	89fb      	ldrh	r3, [r7, #14]
 800990a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800990e:	4293      	cmp	r3, r2
 8009910:	d00a      	beq.n	8009928 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	89fb      	ldrh	r3, [r7, #14]
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	33e0      	adds	r3, #224	@ 0xe0
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009928:	89fb      	ldrh	r3, [r7, #14]
 800992a:	b2db      	uxtb	r3, r3
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	2b0f      	cmp	r3, #15
 8009944:	d80d      	bhi.n	8009962 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	33e0      	adds	r3, #224	@ 0xe0
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	33e0      	adds	r3, #224	@ 0xe0
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
 8009980:	e00f      	b.n	80099a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	33e0      	adds	r3, #224	@ 0xe0
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d102      	bne.n	800999c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	b29b      	uxth	r3, r3
 800999a:	e007      	b.n	80099ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	3301      	adds	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	2b0f      	cmp	r3, #15
 80099a6:	d9ec      	bls.n	8009982 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80099a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	4a08      	ldr	r2, [pc, #32]	@ (80099e8 <disk_status+0x30>)
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	79fa      	ldrb	r2, [r7, #7]
 80099d0:	4905      	ldr	r1, [pc, #20]	@ (80099e8 <disk_status+0x30>)
 80099d2:	440a      	add	r2, r1
 80099d4:	7a12      	ldrb	r2, [r2, #8]
 80099d6:	4610      	mov	r0, r2
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	20002750 	.word	0x20002750

080099ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	4a0e      	ldr	r2, [pc, #56]	@ (8009a38 <disk_initialize+0x4c>)
 80099fe:	5cd3      	ldrb	r3, [r2, r3]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d114      	bne.n	8009a2e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	4a0c      	ldr	r2, [pc, #48]	@ (8009a38 <disk_initialize+0x4c>)
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	79fa      	ldrb	r2, [r7, #7]
 8009a12:	4909      	ldr	r1, [pc, #36]	@ (8009a38 <disk_initialize+0x4c>)
 8009a14:	440a      	add	r2, r1
 8009a16:	7a12      	ldrb	r2, [r2, #8]
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d103      	bne.n	8009a2e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	4a03      	ldr	r2, [pc, #12]	@ (8009a38 <disk_initialize+0x4c>)
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	20002750 	.word	0x20002750

08009a3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8009a78 <disk_read+0x3c>)
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	689c      	ldr	r4, [r3, #8]
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	4a07      	ldr	r2, [pc, #28]	@ (8009a78 <disk_read+0x3c>)
 8009a5c:	4413      	add	r3, r2
 8009a5e:	7a18      	ldrb	r0, [r3, #8]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	47a0      	blx	r4
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd90      	pop	{r4, r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20002750 	.word	0x20002750

08009a7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8009ab8 <disk_write+0x3c>)
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	68dc      	ldr	r4, [r3, #12]
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4a07      	ldr	r2, [pc, #28]	@ (8009ab8 <disk_write+0x3c>)
 8009a9c:	4413      	add	r3, r2
 8009a9e:	7a18      	ldrb	r0, [r3, #8]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	47a0      	blx	r4
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd90      	pop	{r4, r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20002750 	.word	0x20002750

08009abc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	603a      	str	r2, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	4a09      	ldr	r2, [pc, #36]	@ (8009af4 <disk_ioctl+0x38>)
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	79fa      	ldrb	r2, [r7, #7]
 8009ada:	4906      	ldr	r1, [pc, #24]	@ (8009af4 <disk_ioctl+0x38>)
 8009adc:	440a      	add	r2, r1
 8009ade:	7a10      	ldrb	r0, [r2, #8]
 8009ae0:	79b9      	ldrb	r1, [r7, #6]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	4798      	blx	r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20002750 	.word	0x20002750

08009af8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3301      	adds	r3, #1
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009b08:	89fb      	ldrh	r3, [r7, #14]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	b21a      	sxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b21b      	sxth	r3, r3
 8009b14:	4313      	orrs	r3, r2
 8009b16:	b21b      	sxth	r3, r3
 8009b18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009b1a:	89fb      	ldrh	r3, [r7, #14]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3303      	adds	r3, #3
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	3202      	adds	r2, #2
 8009b40:	7812      	ldrb	r2, [r2, #0]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	3201      	adds	r2, #1
 8009b4e:	7812      	ldrb	r2, [r2, #0]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	7812      	ldrb	r2, [r2, #0]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009b6e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009b72:	b09d      	sub	sp, #116	@ 0x74
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8009b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b7a:	3307      	adds	r3, #7
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2200      	movs	r2, #0
 8009b82:	469a      	mov	sl, r3
 8009b84:	4693      	mov	fp, r2
 8009b86:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8009b8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009b8e:	f04f 0000 	mov.w	r0, #0
 8009b92:	f04f 0100 	mov.w	r1, #0
 8009b96:	0219      	lsls	r1, r3, #8
 8009b98:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009b9c:	0210      	lsls	r0, r2, #8
 8009b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ba0:	3306      	adds	r3, #6
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	461c      	mov	r4, r3
 8009baa:	4615      	mov	r5, r2
 8009bac:	ea40 0804 	orr.w	r8, r0, r4
 8009bb0:	ea41 0905 	orr.w	r9, r1, r5
 8009bb4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8009bb8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009bbc:	f04f 0000 	mov.w	r0, #0
 8009bc0:	f04f 0100 	mov.w	r1, #0
 8009bc4:	0219      	lsls	r1, r3, #8
 8009bc6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009bca:	0210      	lsls	r0, r2, #8
 8009bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bce:	3305      	adds	r3, #5
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bd8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009bda:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009bde:	4623      	mov	r3, r4
 8009be0:	4303      	orrs	r3, r0
 8009be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009be4:	462b      	mov	r3, r5
 8009be6:	430b      	orrs	r3, r1
 8009be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009bee:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8009bf2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009bf6:	f04f 0000 	mov.w	r0, #0
 8009bfa:	f04f 0100 	mov.w	r1, #0
 8009bfe:	0219      	lsls	r1, r3, #8
 8009c00:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009c04:	0210      	lsls	r0, r2, #8
 8009c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c08:	3304      	adds	r3, #4
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2200      	movs	r2, #0
 8009c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c12:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c14:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8009c18:	4623      	mov	r3, r4
 8009c1a:	4303      	orrs	r3, r0
 8009c1c:	623b      	str	r3, [r7, #32]
 8009c1e:	462b      	mov	r3, r5
 8009c20:	430b      	orrs	r3, r1
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009c28:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8009c2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009c30:	f04f 0000 	mov.w	r0, #0
 8009c34:	f04f 0100 	mov.w	r1, #0
 8009c38:	0219      	lsls	r1, r3, #8
 8009c3a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009c3e:	0210      	lsls	r0, r2, #8
 8009c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c42:	3303      	adds	r3, #3
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2200      	movs	r2, #0
 8009c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c4c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009c4e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009c52:	4623      	mov	r3, r4
 8009c54:	4303      	orrs	r3, r0
 8009c56:	61bb      	str	r3, [r7, #24]
 8009c58:	462b      	mov	r3, r5
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	61fb      	str	r3, [r7, #28]
 8009c5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009c62:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8009c66:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009c6a:	f04f 0000 	mov.w	r0, #0
 8009c6e:	f04f 0100 	mov.w	r1, #0
 8009c72:	0219      	lsls	r1, r3, #8
 8009c74:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009c78:	0210      	lsls	r0, r2, #8
 8009c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2200      	movs	r2, #0
 8009c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c86:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c88:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	4303      	orrs	r3, r0
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	462b      	mov	r3, r5
 8009c94:	430b      	orrs	r3, r1
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009c9c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8009ca0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	020b      	lsls	r3, r1, #8
 8009cae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cb2:	0202      	lsls	r2, r0, #8
 8009cb4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009cb6:	3101      	adds	r1, #1
 8009cb8:	7809      	ldrb	r1, [r1, #0]
 8009cba:	b2c9      	uxtb	r1, r1
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cc0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009cc2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4311      	orrs	r1, r2
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4319      	orrs	r1, r3
 8009cd0:	60f9      	str	r1, [r7, #12]
 8009cd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009cd6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8009cda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009cde:	f04f 0200 	mov.w	r2, #0
 8009ce2:	f04f 0300 	mov.w	r3, #0
 8009ce6:	020b      	lsls	r3, r1, #8
 8009ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cec:	0202      	lsls	r2, r0, #8
 8009cee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009cf0:	7809      	ldrb	r1, [r1, #0]
 8009cf2:	b2c9      	uxtb	r1, r1
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	6339      	str	r1, [r7, #48]	@ 0x30
 8009cf8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009cfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4311      	orrs	r1, r2
 8009d02:	6039      	str	r1, [r7, #0]
 8009d04:	4629      	mov	r1, r5
 8009d06:	4319      	orrs	r1, r3
 8009d08:	6079      	str	r1, [r7, #4]
 8009d0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009d0e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8009d12:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8009d16:	4610      	mov	r0, r2
 8009d18:	4619      	mov	r1, r3
 8009d1a:	3774      	adds	r7, #116	@ 0x74
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009d22:	4770      	bx	lr

08009d24 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	887a      	ldrh	r2, [r7, #2]
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	887b      	ldrh	r3, [r7, #2]
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	887a      	ldrh	r2, [r7, #2]
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	701a      	strb	r2, [r3, #0]
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	0a1b      	lsrs	r3, r3, #8
 8009d74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	0a1b      	lsrs	r3, r3, #8
 8009d86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	b2d2      	uxtb	r2, r2
 8009d92:	701a      	strb	r2, [r3, #0]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	0a1b      	lsrs	r3, r3, #8
 8009d98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	60fa      	str	r2, [r7, #12]
 8009dc4:	783a      	ldrb	r2, [r7, #0]
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	0a02      	lsrs	r2, r0, #8
 8009dd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009dda:	0a0b      	lsrs	r3, r1, #8
 8009ddc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	60fa      	str	r2, [r7, #12]
 8009de6:	783a      	ldrb	r2, [r7, #0]
 8009de8:	701a      	strb	r2, [r3, #0]
 8009dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dee:	f04f 0200 	mov.w	r2, #0
 8009df2:	f04f 0300 	mov.w	r3, #0
 8009df6:	0a02      	lsrs	r2, r0, #8
 8009df8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009dfc:	0a0b      	lsrs	r3, r1, #8
 8009dfe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	60fa      	str	r2, [r7, #12]
 8009e08:	783a      	ldrb	r2, [r7, #0]
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	0a02      	lsrs	r2, r0, #8
 8009e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e1e:	0a0b      	lsrs	r3, r1, #8
 8009e20:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	60fa      	str	r2, [r7, #12]
 8009e2a:	783a      	ldrb	r2, [r7, #0]
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	0a02      	lsrs	r2, r0, #8
 8009e3c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e40:	0a0b      	lsrs	r3, r1, #8
 8009e42:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	60fa      	str	r2, [r7, #12]
 8009e4c:	783a      	ldrb	r2, [r7, #0]
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	0a02      	lsrs	r2, r0, #8
 8009e5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e62:	0a0b      	lsrs	r3, r1, #8
 8009e64:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	60fa      	str	r2, [r7, #12]
 8009e6e:	783a      	ldrb	r2, [r7, #0]
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e76:	f04f 0200 	mov.w	r2, #0
 8009e7a:	f04f 0300 	mov.w	r3, #0
 8009e7e:	0a02      	lsrs	r2, r0, #8
 8009e80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e84:	0a0b      	lsrs	r3, r1, #8
 8009e86:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	60fa      	str	r2, [r7, #12]
 8009e90:	783a      	ldrb	r2, [r7, #0]
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e98:	f04f 0200 	mov.w	r2, #0
 8009e9c:	f04f 0300 	mov.w	r3, #0
 8009ea0:	0a02      	lsrs	r2, r0, #8
 8009ea2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009ea6:	0a0b      	lsrs	r3, r1, #8
 8009ea8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	60fa      	str	r2, [r7, #12]
 8009eb2:	783a      	ldrb	r2, [r7, #0]
 8009eb4:	701a      	strb	r2, [r3, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ec2:	b480      	push	{r7}
 8009ec4:	b087      	sub	sp, #28
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00d      	beq.n	8009ef8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	1c53      	adds	r3, r2, #1
 8009ee0:	613b      	str	r3, [r7, #16]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	1c59      	adds	r1, r3, #1
 8009ee6:	6179      	str	r1, [r7, #20]
 8009ee8:	7812      	ldrb	r2, [r2, #0]
 8009eea:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	607b      	str	r3, [r7, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f1      	bne.n	8009edc <mem_cpy+0x1a>
	}
}
 8009ef8:	bf00      	nop
 8009efa:	371c      	adds	r7, #28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	617a      	str	r2, [r7, #20]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	b2d2      	uxtb	r2, r2
 8009f1e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	607b      	str	r3, [r7, #4]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f3      	bne.n	8009f14 <mem_set+0x10>
}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f3a:	b480      	push	{r7}
 8009f3c:	b089      	sub	sp, #36	@ 0x24
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	60f8      	str	r0, [r7, #12]
 8009f42:	60b9      	str	r1, [r7, #8]
 8009f44:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	61fb      	str	r3, [r7, #28]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	61fa      	str	r2, [r7, #28]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	61ba      	str	r2, [r7, #24]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	1acb      	subs	r3, r1, r3
 8009f66:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <mem_cmp+0x40>
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0eb      	beq.n	8009f52 <mem_cmp+0x18>

	return r;
 8009f7a:	697b      	ldr	r3, [r7, #20]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3724      	adds	r7, #36	@ 0x24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f92:	e002      	b.n	8009f9a <chk_chr+0x12>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3301      	adds	r3, #1
 8009f98:	607b      	str	r3, [r7, #4]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <chk_chr+0x26>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d1f2      	bne.n	8009f94 <chk_chr+0xc>
	return *str;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e029      	b.n	800a028 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009fd4:	4a27      	ldr	r2, [pc, #156]	@ (800a074 <chk_lock+0xb4>)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	4413      	add	r3, r2
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01d      	beq.n	800a01e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fe2:	4a24      	ldr	r2, [pc, #144]	@ (800a074 <chk_lock+0xb4>)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	011b      	lsls	r3, r3, #4
 8009fe8:	4413      	add	r3, r2
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d116      	bne.n	800a022 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ff4:	4a1f      	ldr	r2, [pc, #124]	@ (800a074 <chk_lock+0xb4>)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a004:	429a      	cmp	r2, r3
 800a006:	d10c      	bne.n	800a022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a008:	4a1a      	ldr	r2, [pc, #104]	@ (800a074 <chk_lock+0xb4>)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	011b      	lsls	r3, r3, #4
 800a00e:	4413      	add	r3, r2
 800a010:	3308      	adds	r3, #8
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800a018:	429a      	cmp	r2, r3
 800a01a:	d102      	bne.n	800a022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a01c:	e007      	b.n	800a02e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a01e:	2301      	movs	r3, #1
 800a020:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3301      	adds	r3, #1
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d9d2      	bls.n	8009fd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b02      	cmp	r3, #2
 800a032:	d109      	bne.n	800a048 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <chk_lock+0x80>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d101      	bne.n	800a044 <chk_lock+0x84>
 800a040:	2300      	movs	r3, #0
 800a042:	e010      	b.n	800a066 <chk_lock+0xa6>
 800a044:	2312      	movs	r3, #18
 800a046:	e00e      	b.n	800a066 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d108      	bne.n	800a060 <chk_lock+0xa0>
 800a04e:	4a09      	ldr	r2, [pc, #36]	@ (800a074 <chk_lock+0xb4>)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	4413      	add	r3, r2
 800a056:	330c      	adds	r3, #12
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a05e:	d101      	bne.n	800a064 <chk_lock+0xa4>
 800a060:	2310      	movs	r3, #16
 800a062:	e000      	b.n	800a066 <chk_lock+0xa6>
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	200022d0 	.word	0x200022d0

0800a078 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a07e:	2300      	movs	r3, #0
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	e002      	b.n	800a08a <enq_lock+0x12>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3301      	adds	r3, #1
 800a088:	607b      	str	r3, [r7, #4]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d806      	bhi.n	800a09e <enq_lock+0x26>
 800a090:	4a09      	ldr	r2, [pc, #36]	@ (800a0b8 <enq_lock+0x40>)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	4413      	add	r3, r2
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1f2      	bne.n	800a084 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	bf14      	ite	ne
 800a0a4:	2301      	movne	r3, #1
 800a0a6:	2300      	moveq	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	200022d0 	.word	0x200022d0

0800a0bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
 800a0ca:	e01f      	b.n	800a10c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a0cc:	4a41      	ldr	r2, [pc, #260]	@ (800a1d4 <inc_lock+0x118>)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	4413      	add	r3, r2
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d113      	bne.n	800a106 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a0de:	4a3d      	ldr	r2, [pc, #244]	@ (800a1d4 <inc_lock+0x118>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d109      	bne.n	800a106 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a0f2:	4a38      	ldr	r2, [pc, #224]	@ (800a1d4 <inc_lock+0x118>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800a102:	429a      	cmp	r2, r3
 800a104:	d006      	beq.n	800a114 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d9dc      	bls.n	800a0cc <inc_lock+0x10>
 800a112:	e000      	b.n	800a116 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a114:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d132      	bne.n	800a182 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e002      	b.n	800a128 <inc_lock+0x6c>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3301      	adds	r3, #1
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d806      	bhi.n	800a13c <inc_lock+0x80>
 800a12e:	4a29      	ldr	r2, [pc, #164]	@ (800a1d4 <inc_lock+0x118>)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	4413      	add	r3, r2
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f2      	bne.n	800a122 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d101      	bne.n	800a146 <inc_lock+0x8a>
 800a142:	2300      	movs	r3, #0
 800a144:	e040      	b.n	800a1c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4922      	ldr	r1, [pc, #136]	@ (800a1d4 <inc_lock+0x118>)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	440b      	add	r3, r1
 800a152:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	491e      	ldr	r1, [pc, #120]	@ (800a1d4 <inc_lock+0x118>)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	440b      	add	r3, r1
 800a160:	3304      	adds	r3, #4
 800a162:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a168:	491a      	ldr	r1, [pc, #104]	@ (800a1d4 <inc_lock+0x118>)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	440b      	add	r3, r1
 800a170:	3308      	adds	r3, #8
 800a172:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a174:	4a17      	ldr	r2, [pc, #92]	@ (800a1d4 <inc_lock+0x118>)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	4413      	add	r3, r2
 800a17c:	330c      	adds	r3, #12
 800a17e:	2200      	movs	r2, #0
 800a180:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <inc_lock+0xe0>
 800a188:	4a12      	ldr	r2, [pc, #72]	@ (800a1d4 <inc_lock+0x118>)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	4413      	add	r3, r2
 800a190:	330c      	adds	r3, #12
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <inc_lock+0xe0>
 800a198:	2300      	movs	r3, #0
 800a19a:	e015      	b.n	800a1c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d108      	bne.n	800a1b4 <inc_lock+0xf8>
 800a1a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d4 <inc_lock+0x118>)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	4413      	add	r3, r2
 800a1aa:	330c      	adds	r3, #12
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	e001      	b.n	800a1b8 <inc_lock+0xfc>
 800a1b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1b8:	4906      	ldr	r1, [pc, #24]	@ (800a1d4 <inc_lock+0x118>)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	440b      	add	r3, r1
 800a1c0:	330c      	adds	r3, #12
 800a1c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3301      	adds	r3, #1
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	200022d0 	.word	0x200022d0

0800a1d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	607b      	str	r3, [r7, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d825      	bhi.n	800a238 <dec_lock+0x60>
		n = Files[i].ctr;
 800a1ec:	4a17      	ldr	r2, [pc, #92]	@ (800a24c <dec_lock+0x74>)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	011b      	lsls	r3, r3, #4
 800a1f2:	4413      	add	r3, r2
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a1fa:	89fb      	ldrh	r3, [r7, #14]
 800a1fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a200:	d101      	bne.n	800a206 <dec_lock+0x2e>
 800a202:	2300      	movs	r3, #0
 800a204:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a206:	89fb      	ldrh	r3, [r7, #14]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <dec_lock+0x3a>
 800a20c:	89fb      	ldrh	r3, [r7, #14]
 800a20e:	3b01      	subs	r3, #1
 800a210:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a212:	4a0e      	ldr	r2, [pc, #56]	@ (800a24c <dec_lock+0x74>)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	011b      	lsls	r3, r3, #4
 800a218:	4413      	add	r3, r2
 800a21a:	330c      	adds	r3, #12
 800a21c:	89fa      	ldrh	r2, [r7, #14]
 800a21e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a220:	89fb      	ldrh	r3, [r7, #14]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <dec_lock+0x5a>
 800a226:	4a09      	ldr	r2, [pc, #36]	@ (800a24c <dec_lock+0x74>)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	4413      	add	r3, r2
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	737b      	strb	r3, [r7, #13]
 800a236:	e001      	b.n	800a23c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a238:	2302      	movs	r3, #2
 800a23a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a23c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	200022d0 	.word	0x200022d0

0800a250 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e010      	b.n	800a280 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a25e:	4a0d      	ldr	r2, [pc, #52]	@ (800a294 <clear_lock+0x44>)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	4413      	add	r3, r2
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d105      	bne.n	800a27a <clear_lock+0x2a>
 800a26e:	4a09      	ldr	r2, [pc, #36]	@ (800a294 <clear_lock+0x44>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	4413      	add	r3, r2
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d9eb      	bls.n	800a25e <clear_lock+0xe>
	}
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	200022d0 	.word	0x200022d0

0800a298 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	78db      	ldrb	r3, [r3, #3]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d034      	beq.n	800a316 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7858      	ldrb	r0, [r3, #1]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a2bc:	2301      	movs	r3, #1
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	f7ff fbdc 	bl	8009a7c <disk_write>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	73fb      	strb	r3, [r7, #15]
 800a2ce:	e022      	b.n	800a316 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	1ad2      	subs	r2, r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d217      	bcs.n	800a316 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	789b      	ldrb	r3, [r3, #2]
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	e010      	b.n	800a310 <sync_window+0x78>
					wsect += fs->fsize;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7858      	ldrb	r0, [r3, #1]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a302:	2301      	movs	r3, #1
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	f7ff fbb9 	bl	8009a7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d8eb      	bhi.n	800a2ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d01b      	beq.n	800a370 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff ffad 	bl	800a298 <sync_window>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d113      	bne.n	800a370 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7858      	ldrb	r0, [r3, #1]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a352:	2301      	movs	r3, #1
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	f7ff fb71 	bl	8009a3c <disk_read>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a360:	f04f 33ff 	mov.w	r3, #4294967295
 800a364:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a366:	2301      	movs	r3, #1
 800a368:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff ff87 	bl	800a298 <sync_window>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d159      	bne.n	800a448 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d149      	bne.n	800a430 <sync_fs+0xb4>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	791b      	ldrb	r3, [r3, #4]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d145      	bne.n	800a430 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	899b      	ldrh	r3, [r3, #12]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	f7ff fda7 	bl	8009f04 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	333c      	adds	r3, #60	@ 0x3c
 800a3ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a3be:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fcae 	bl	8009d24 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	333c      	adds	r3, #60	@ 0x3c
 800a3cc:	4921      	ldr	r1, [pc, #132]	@ (800a454 <sync_fs+0xd8>)
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fcc3 	bl	8009d5a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	333c      	adds	r3, #60	@ 0x3c
 800a3d8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a3dc:	491e      	ldr	r1, [pc, #120]	@ (800a458 <sync_fs+0xdc>)
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fcbb 	bl	8009d5a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	333c      	adds	r3, #60	@ 0x3c
 800a3e8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	f7ff fcb1 	bl	8009d5a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	333c      	adds	r3, #60	@ 0x3c
 800a3fc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7ff fca7 	bl	8009d5a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	7858      	ldrb	r0, [r3, #1]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a424:	2301      	movs	r3, #1
 800a426:	f7ff fb29 	bl	8009a7c <disk_write>
			fs->fsi_flag = 0;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2200      	movs	r2, #0
 800a436:	2100      	movs	r1, #0
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff fb3f 	bl	8009abc <disk_ioctl>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <sync_fs+0xcc>
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	41615252 	.word	0x41615252
 800a458:	61417272 	.word	0x61417272

0800a45c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	3b02      	subs	r3, #2
 800a46a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	3b02      	subs	r3, #2
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d301      	bcc.n	800a47c <clust2sect+0x20>
 800a478:	2300      	movs	r3, #0
 800a47a:	e008      	b.n	800a48e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	895b      	ldrh	r3, [r3, #10]
 800a480:	461a      	mov	r2, r3
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	fb03 f202 	mul.w	r2, r3, r2
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a48c:	4413      	add	r3, r2
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
	...

0800a49c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a49c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a4a0:	b088      	sub	sp, #32
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d904      	bls.n	800a4be <get_fat+0x22>
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d302      	bcc.n	800a4c4 <get_fat+0x28>
		val = 1;	/* Internal error */
 800a4be:	2301      	movs	r3, #1
 800a4c0:	61fb      	str	r3, [r7, #28]
 800a4c2:	e139      	b.n	800a738 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c8:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	f200 8125 	bhi.w	800a720 <get_fat+0x284>
 800a4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4dc <get_fat+0x40>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4ed 	.word	0x0800a4ed
 800a4e0:	0800a599 	.word	0x0800a599
 800a4e4:	0800a5e5 	.word	0x0800a5e5
 800a4e8:	0800a635 	.word	0x0800a635
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	899b      	ldrh	r3, [r3, #12]
 800a502:	4619      	mov	r1, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	fbb3 f3f1 	udiv	r3, r3, r1
 800a50a:	4413      	add	r3, r2
 800a50c:	4619      	mov	r1, r3
 800a50e:	69b8      	ldr	r0, [r7, #24]
 800a510:	f7ff ff06 	bl	800a320 <move_window>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	f040 8105 	bne.w	800a726 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	60fa      	str	r2, [r7, #12]
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	8992      	ldrh	r2, [r2, #12]
 800a526:	fbb3 f1f2 	udiv	r1, r3, r2
 800a52a:	fb01 f202 	mul.w	r2, r1, r2
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	4413      	add	r3, r2
 800a534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a538:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	899b      	ldrh	r3, [r3, #12]
 800a542:	4619      	mov	r1, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	fbb3 f3f1 	udiv	r3, r3, r1
 800a54a:	4413      	add	r3, r2
 800a54c:	4619      	mov	r1, r3
 800a54e:	69b8      	ldr	r0, [r7, #24]
 800a550:	f7ff fee6 	bl	800a320 <move_window>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 80e7 	bne.w	800a72a <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	899b      	ldrh	r3, [r3, #12]
 800a560:	461a      	mov	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	fbb3 f1f2 	udiv	r1, r3, r2
 800a568:	fb01 f202 	mul.w	r2, r1, r2
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	4413      	add	r3, r2
 800a572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <get_fat+0xf2>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	091b      	lsrs	r3, r3, #4
 800a58c:	e002      	b.n	800a594 <get_fat+0xf8>
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a594:	61fb      	str	r3, [r7, #28]
			break;
 800a596:	e0cf      	b.n	800a738 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	899b      	ldrh	r3, [r3, #12]
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5ac:	4413      	add	r3, r2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	69b8      	ldr	r0, [r7, #24]
 800a5b2:	f7ff feb5 	bl	800a320 <move_window>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 80b8 	bne.w	800a72e <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	8992      	ldrh	r2, [r2, #12]
 800a5cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5d0:	fb00 f202 	mul.w	r2, r0, r2
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	440b      	add	r3, r1
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff fa8d 	bl	8009af8 <ld_word>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	61fb      	str	r3, [r7, #28]
			break;
 800a5e2:	e0a9      	b.n	800a738 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	899b      	ldrh	r3, [r3, #12]
 800a5ec:	089b      	lsrs	r3, r3, #2
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5f8:	4413      	add	r3, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	69b8      	ldr	r0, [r7, #24]
 800a5fe:	f7ff fe8f 	bl	800a320 <move_window>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	f040 8094 	bne.w	800a732 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	69ba      	ldr	r2, [r7, #24]
 800a616:	8992      	ldrh	r2, [r2, #12]
 800a618:	fbb3 f0f2 	udiv	r0, r3, r2
 800a61c:	fb00 f202 	mul.w	r2, r0, r2
 800a620:	1a9b      	subs	r3, r3, r2
 800a622:	440b      	add	r3, r1
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fa7f 	bl	8009b28 <ld_dword>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a630:	61fb      	str	r3, [r7, #28]
			break;
 800a632:	e081      	b.n	800a738 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	d070      	beq.n	800a720 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a64e:	1e54      	subs	r4, r2, #1
 800a650:	f143 35ff 	adc.w	r5, r3, #4294967295
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	899b      	ldrh	r3, [r3, #12]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	2200      	movs	r2, #0
 800a65c:	4698      	mov	r8, r3
 800a65e:	4691      	mov	r9, r2
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f6 f920 	bl	80008ac <__aeabi_uldivmod>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	895b      	ldrh	r3, [r3, #10]
 800a674:	fbb2 f3f3 	udiv	r3, r2, r3
 800a678:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	79db      	ldrb	r3, [r3, #7]
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d10e      	bne.n	800a6a0 <get_fat+0x204>
					if (cofs <= clen) {
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	429a      	cmp	r2, r3
 800a688:	d80a      	bhi.n	800a6a0 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d002      	beq.n	800a698 <get_fat+0x1fc>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	e001      	b.n	800a69c <get_fat+0x200>
 800a698:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a69c:	61fb      	str	r3, [r7, #28]
						break;
 800a69e:	e04b      	b.n	800a738 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	79db      	ldrb	r3, [r3, #7]
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d108      	bne.n	800a6ba <get_fat+0x21e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d203      	bcs.n	800a6ba <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	61fb      	str	r3, [r7, #28]
					break;
 800a6b8:	e03e      	b.n	800a738 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	79db      	ldrb	r3, [r3, #7]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d02e      	beq.n	800a720 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a6ca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a6ce:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a6d0:	e032      	b.n	800a738 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	899b      	ldrh	r3, [r3, #12]
 800a6da:	089b      	lsrs	r3, r3, #2
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	4619      	mov	r1, r3
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6e6:	4413      	add	r3, r2
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	69b8      	ldr	r0, [r7, #24]
 800a6ec:	f7ff fe18 	bl	800a320 <move_window>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d11f      	bne.n	800a736 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	8992      	ldrh	r2, [r2, #12]
 800a704:	fbb3 f0f2 	udiv	r0, r3, r2
 800a708:	fb00 f202 	mul.w	r2, r0, r2
 800a70c:	1a9b      	subs	r3, r3, r2
 800a70e:	440b      	add	r3, r1
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff fa09 	bl	8009b28 <ld_dword>
 800a716:	4603      	mov	r3, r0
 800a718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a71c:	61fb      	str	r3, [r7, #28]
					break;
 800a71e:	e00b      	b.n	800a738 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a720:	2301      	movs	r3, #1
 800a722:	61fb      	str	r3, [r7, #28]
 800a724:	e008      	b.n	800a738 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a726:	bf00      	nop
 800a728:	e006      	b.n	800a738 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a72a:	bf00      	nop
 800a72c:	e004      	b.n	800a738 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a736:	bf00      	nop
		}
	}

	return val;
 800a738:	69fb      	ldr	r3, [r7, #28]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a744 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a744:	b590      	push	{r4, r7, lr}
 800a746:	b089      	sub	sp, #36	@ 0x24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a750:	2302      	movs	r3, #2
 800a752:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b01      	cmp	r3, #1
 800a758:	f240 810d 	bls.w	800a976 <put_fat+0x232>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	f080 8107 	bcs.w	800a976 <put_fat+0x232>
		switch (fs->fs_type) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	f300 8102 	bgt.w	800a976 <put_fat+0x232>
 800a772:	2b03      	cmp	r3, #3
 800a774:	f280 80b3 	bge.w	800a8de <put_fat+0x19a>
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d003      	beq.n	800a784 <put_fat+0x40>
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	f000 8083 	beq.w	800a888 <put_fat+0x144>
 800a782:	e0f8      	b.n	800a976 <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	61bb      	str	r3, [r7, #24]
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	4413      	add	r3, r2
 800a790:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	4619      	mov	r1, r3
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fdba 	bl	800a320 <move_window>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7b0:	7ffb      	ldrb	r3, [r7, #31]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 80d8 	bne.w	800a968 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	61ba      	str	r2, [r7, #24]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	8992      	ldrh	r2, [r2, #12]
 800a7c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7cc:	fb00 f202 	mul.w	r2, r0, r2
 800a7d0:	1a9b      	subs	r3, r3, r2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00d      	beq.n	800a7fc <put_fat+0xb8>
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	f003 030f 	and.w	r3, r3, #15
 800a7ea:	b25a      	sxtb	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	011b      	lsls	r3, r3, #4
 800a7f2:	b25b      	sxtb	r3, r3
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	b25b      	sxtb	r3, r3
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	e001      	b.n	800a800 <put_fat+0xbc>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2201      	movs	r2, #1
 800a808:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	899b      	ldrh	r3, [r3, #12]
 800a812:	4619      	mov	r1, r3
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	fbb3 f3f1 	udiv	r3, r3, r1
 800a81a:	4413      	add	r3, r2
 800a81c:	4619      	mov	r1, r3
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7ff fd7e 	bl	800a320 <move_window>
 800a824:	4603      	mov	r3, r0
 800a826:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a828:	7ffb      	ldrb	r3, [r7, #31]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f040 809e 	bne.w	800a96c <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	899b      	ldrh	r3, [r3, #12]
 800a83a:	461a      	mov	r2, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a842:	fb00 f202 	mul.w	r2, r0, r2
 800a846:	1a9b      	subs	r3, r3, r2
 800a848:	440b      	add	r3, r1
 800a84a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <put_fat+0x11a>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	091b      	lsrs	r3, r3, #4
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	e00e      	b.n	800a87c <put_fat+0x138>
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b25b      	sxtb	r3, r3
 800a864:	f023 030f 	bic.w	r3, r3, #15
 800a868:	b25a      	sxtb	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	0a1b      	lsrs	r3, r3, #8
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	f003 030f 	and.w	r3, r3, #15
 800a874:	b25b      	sxtb	r3, r3
 800a876:	4313      	orrs	r3, r2
 800a878:	b25b      	sxtb	r3, r3
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	70da      	strb	r2, [r3, #3]
			break;
 800a886:	e076      	b.n	800a976 <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	899b      	ldrh	r3, [r3, #12]
 800a890:	085b      	lsrs	r3, r3, #1
 800a892:	b29b      	uxth	r3, r3
 800a894:	4619      	mov	r1, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	fbb3 f3f1 	udiv	r3, r3, r1
 800a89c:	4413      	add	r3, r2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7ff fd3d 	bl	800a320 <move_window>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8aa:	7ffb      	ldrb	r3, [r7, #31]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d15f      	bne.n	800a970 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	8992      	ldrh	r2, [r2, #12]
 800a8be:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8c2:	fb00 f202 	mul.w	r2, r0, r2
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	440b      	add	r3, r1
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	b292      	uxth	r2, r2
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fa27 	bl	8009d24 <st_word>
			fs->wflag = 1;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	70da      	strb	r2, [r3, #3]
			break;
 800a8dc:	e04b      	b.n	800a976 <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	899b      	ldrh	r3, [r3, #12]
 800a8e6:	089b      	lsrs	r3, r3, #2
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8f2:	4413      	add	r3, r2
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fd12 	bl	800a320 <move_window>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a900:	7ffb      	ldrb	r3, [r7, #31]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d136      	bne.n	800a974 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d017      	beq.n	800a93e <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	8992      	ldrh	r2, [r2, #12]
 800a922:	fbb3 f0f2 	udiv	r0, r3, r2
 800a926:	fb00 f202 	mul.w	r2, r0, r2
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	440b      	add	r3, r1
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff f8fa 	bl	8009b28 <ld_dword>
 800a934:	4603      	mov	r3, r0
 800a936:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a93a:	4323      	orrs	r3, r4
 800a93c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	8992      	ldrh	r2, [r2, #12]
 800a94c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a950:	fb00 f202 	mul.w	r2, r0, r2
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	440b      	add	r3, r1
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff f9fd 	bl	8009d5a <st_dword>
			fs->wflag = 1;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2201      	movs	r2, #1
 800a964:	70da      	strb	r2, [r3, #3]
			break;
 800a966:	e006      	b.n	800a976 <put_fat+0x232>
			if (res != FR_OK) break;
 800a968:	bf00      	nop
 800a96a:	e004      	b.n	800a976 <put_fat+0x232>
			if (res != FR_OK) break;
 800a96c:	bf00      	nop
 800a96e:	e002      	b.n	800a976 <put_fat+0x232>
			if (res != FR_OK) break;
 800a970:	bf00      	nop
 800a972:	e000      	b.n	800a976 <put_fat+0x232>
			if (res != FR_OK) break;
 800a974:	bf00      	nop
		}
	}
	return res;
 800a976:	7ffb      	ldrb	r3, [r7, #31]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3724      	adds	r7, #36	@ 0x24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd90      	pop	{r4, r7, pc}

0800a980 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08a      	sub	sp, #40	@ 0x28
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	3b02      	subs	r3, #2
 800a990:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	3b02      	subs	r3, #2
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d301      	bcc.n	800a9a2 <find_bitmap+0x22>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	61fb      	str	r3, [r7, #28]
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	61bb      	str	r3, [r7, #24]
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	08db      	lsrs	r3, r3, #3
 800a9b6:	68f9      	ldr	r1, [r7, #12]
 800a9b8:	8989      	ldrh	r1, [r1, #12]
 800a9ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9be:	4413      	add	r3, r2
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fcac 	bl	800a320 <move_window>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <find_bitmap+0x54>
 800a9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d2:	e058      	b.n	800aa86 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	08db      	lsrs	r3, r3, #3
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	8992      	ldrh	r2, [r2, #12]
 800a9dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9e0:	fb01 f202 	mul.w	r2, r1, r2
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	623b      	str	r3, [r7, #32]
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	333c      	adds	r3, #60	@ 0x3c
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa06:	4013      	ands	r3, r2
 800aa08:	74fb      	strb	r3, [r7, #19]
 800aa0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	3301      	adds	r3, #1
 800aa18:	61fb      	str	r3, [r7, #28]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	3b02      	subs	r3, #2
 800aa20:	69fa      	ldr	r2, [r7, #28]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d307      	bcc.n	800aa36 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800aa26:	2300      	movs	r3, #0
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	899b      	ldrh	r3, [r3, #12]
 800aa34:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800aa36:	7cfb      	ldrb	r3, [r7, #19]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d106      	bne.n	800aa58 <find_bitmap+0xd8>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	3302      	adds	r3, #2
 800aa4e:	e01a      	b.n	800aa86 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	61bb      	str	r3, [r7, #24]
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d101      	bne.n	800aa64 <find_bitmap+0xe4>
 800aa60:	2300      	movs	r3, #0
 800aa62:	e010      	b.n	800aa86 <find_bitmap+0x106>
			} while (bm);
 800aa64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1c5      	bne.n	800a9f8 <find_bitmap+0x78>
			bm = 1;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	3301      	adds	r3, #1
 800aa76:	623b      	str	r3, [r7, #32]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	899b      	ldrh	r3, [r3, #12]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d3b9      	bcc.n	800a9f8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800aa84:	e793      	b.n	800a9ae <find_bitmap+0x2e>
	}
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3728      	adds	r7, #40	@ 0x28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b088      	sub	sp, #32
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	607a      	str	r2, [r7, #4]
 800aa9a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	3b02      	subs	r3, #2
 800aaa0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	08db      	lsrs	r3, r3, #3
 800aaaa:	68f9      	ldr	r1, [r7, #12]
 800aaac:	8989      	ldrh	r1, [r1, #12]
 800aaae:	fbb3 f3f1 	udiv	r3, r3, r1
 800aab2:	4413      	add	r3, r2
 800aab4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	08db      	lsrs	r3, r3, #3
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	8992      	ldrh	r2, [r2, #12]
 800aabe:	fbb3 f1f2 	udiv	r1, r3, r2
 800aac2:	fb01 f202 	mul.w	r2, r1, r2
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	2201      	movs	r2, #1
 800aad2:	fa02 f303 	lsl.w	r3, r2, r3
 800aad6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	617a      	str	r2, [r7, #20]
 800aade:	4619      	mov	r1, r3
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f7ff fc1d 	bl	800a320 <move_window>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <change_bitmap+0x62>
 800aaec:	2301      	movs	r3, #1
 800aaee:	e03f      	b.n	800ab70 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	333c      	adds	r3, #60	@ 0x3c
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	7ffb      	ldrb	r3, [r7, #31]
 800aafc:	4013      	ands	r3, r2
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bf14      	ite	ne
 800ab04:	2301      	movne	r3, #1
 800ab06:	2300      	moveq	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d101      	bne.n	800ab16 <change_bitmap+0x88>
 800ab12:	2302      	movs	r3, #2
 800ab14:	e02c      	b.n	800ab70 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	333c      	adds	r3, #60	@ 0x3c
 800ab1e:	781a      	ldrb	r2, [r3, #0]
 800ab20:	7ffb      	ldrb	r3, [r7, #31]
 800ab22:	4053      	eors	r3, r2
 800ab24:	b2d9      	uxtb	r1, r3
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	333c      	adds	r3, #60	@ 0x3c
 800ab2e:	460a      	mov	r2, r1
 800ab30:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2201      	movs	r2, #1
 800ab36:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	607b      	str	r3, [r7, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <change_bitmap+0xba>
 800ab44:	2300      	movs	r3, #0
 800ab46:	e013      	b.n	800ab70 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800ab48:	7ffb      	ldrb	r3, [r7, #31]
 800ab4a:	005b      	lsls	r3, r3, #1
 800ab4c:	77fb      	strb	r3, [r7, #31]
 800ab4e:	7ffb      	ldrb	r3, [r7, #31]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1cd      	bne.n	800aaf0 <change_bitmap+0x62>
			bm = 1;
 800ab54:	2301      	movs	r3, #1
 800ab56:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	61bb      	str	r3, [r7, #24]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	899b      	ldrh	r3, [r3, #12]
 800ab62:	461a      	mov	r2, r3
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d3c2      	bcc.n	800aaf0 <change_bitmap+0x62>
		i = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ab6e:	e7b3      	b.n	800aad8 <change_bitmap+0x4a>
	}
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3720      	adds	r7, #32
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	79db      	ldrb	r3, [r3, #7]
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d121      	bne.n	800abcc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	617b      	str	r3, [r7, #20]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	613b      	str	r3, [r7, #16]
 800ab94:	e014      	b.n	800abc0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6979      	ldr	r1, [r7, #20]
 800aba2:	f7ff fdcf 	bl	800a744 <put_fat>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <fill_first_frag+0x3c>
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	e00c      	b.n	800abce <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	3301      	adds	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e7      	bne.n	800ab96 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b086      	sub	sp, #24
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800abe2:	e020      	b.n	800ac26 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	1c59      	adds	r1, r3, #1
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d905      	bls.n	800ac06 <fill_last_frag+0x30>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	3302      	adds	r3, #2
 800ac04:	e000      	b.n	800ac08 <fill_last_frag+0x32>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f7ff fd9b 	bl	800a744 <put_fat>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <fill_last_frag+0x46>
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	e009      	b.n	800ac30 <fill_last_frag+0x5a>
		obj->n_frag--;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	1e5a      	subs	r2, r3, #1
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1da      	bne.n	800abe4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	@ 0x28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d904      	bls.n	800ac66 <remove_chain+0x2e>
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d301      	bcc.n	800ac6a <remove_chain+0x32>
 800ac66:	2302      	movs	r3, #2
 800ac68:	e096      	b.n	800ad98 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d014      	beq.n	800ac9a <remove_chain+0x62>
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b04      	cmp	r3, #4
 800ac76:	d103      	bne.n	800ac80 <remove_chain+0x48>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	79db      	ldrb	r3, [r3, #7]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d00c      	beq.n	800ac9a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ac80:	f04f 32ff 	mov.w	r2, #4294967295
 800ac84:	6879      	ldr	r1, [r7, #4]
 800ac86:	69b8      	ldr	r0, [r7, #24]
 800ac88:	f7ff fd5c 	bl	800a744 <put_fat>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ac90:	7ffb      	ldrb	r3, [r7, #31]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <remove_chain+0x62>
 800ac96:	7ffb      	ldrb	r3, [r7, #31]
 800ac98:	e07e      	b.n	800ad98 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ac9a:	68b9      	ldr	r1, [r7, #8]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f7ff fbfd 	bl	800a49c <get_fat>
 800aca2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d055      	beq.n	800ad56 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <remove_chain+0x7c>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e071      	b.n	800ad98 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acba:	d101      	bne.n	800acc0 <remove_chain+0x88>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e06b      	b.n	800ad98 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d00b      	beq.n	800ace0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800acc8:	2200      	movs	r2, #0
 800acca:	68b9      	ldr	r1, [r7, #8]
 800accc:	69b8      	ldr	r0, [r7, #24]
 800acce:	f7ff fd39 	bl	800a744 <put_fat>
 800acd2:	4603      	mov	r3, r0
 800acd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800acd6:	7ffb      	ldrb	r3, [r7, #31]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <remove_chain+0xa8>
 800acdc:	7ffb      	ldrb	r3, [r7, #31]
 800acde:	e05b      	b.n	800ad98 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	69da      	ldr	r2, [r3, #28]
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	3b02      	subs	r3, #2
 800acea:	429a      	cmp	r2, r3
 800acec:	d20b      	bcs.n	800ad06 <remove_chain+0xce>
			fs->free_clst++;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	791b      	ldrb	r3, [r3, #4]
 800acfc:	f043 0301 	orr.w	r3, r3, #1
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d102      	bne.n	800ad16 <remove_chain+0xde>
			ecl = nxt;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	623b      	str	r3, [r7, #32]
 800ad14:	e017      	b.n	800ad46 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d10f      	bne.n	800ad3e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800ad1e:	6a3a      	ldr	r2, [r7, #32]
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	2300      	movs	r3, #0
 800ad28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad2a:	69b8      	ldr	r0, [r7, #24]
 800ad2c:	f7ff feaf 	bl	800aa8e <change_bitmap>
 800ad30:	4603      	mov	r3, r0
 800ad32:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ad34:	7ffb      	ldrb	r3, [r7, #31]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <remove_chain+0x106>
 800ad3a:	7ffb      	ldrb	r3, [r7, #31]
 800ad3c:	e02c      	b.n	800ad98 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	623b      	str	r3, [r7, #32]
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d3a2      	bcc.n	800ac9a <remove_chain+0x62>
 800ad54:	e000      	b.n	800ad58 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800ad56:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d11a      	bne.n	800ad96 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d103      	bne.n	800ad6e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	71da      	strb	r2, [r3, #7]
 800ad6c:	e013      	b.n	800ad96 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	79db      	ldrb	r3, [r3, #7]
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d10f      	bne.n	800ad96 <remove_chain+0x15e>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d30a      	bcc.n	800ad96 <remove_chain+0x15e>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	4413      	add	r3, r2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d802      	bhi.n	800ad96 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2202      	movs	r2, #2
 800ad94:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3728      	adds	r7, #40	@ 0x28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10d      	bne.n	800add2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d004      	beq.n	800adcc <create_chain+0x2c>
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d31b      	bcc.n	800ae04 <create_chain+0x64>
 800adcc:	2301      	movs	r3, #1
 800adce:	61bb      	str	r3, [r7, #24]
 800add0:	e018      	b.n	800ae04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff fb61 	bl	800a49c <get_fat>
 800adda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d801      	bhi.n	800ade6 <create_chain+0x46>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e0d9      	b.n	800af9a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adec:	d101      	bne.n	800adf2 <create_chain+0x52>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	e0d3      	b.n	800af9a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d201      	bcs.n	800ae00 <create_chain+0x60>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	e0cc      	b.n	800af9a <create_chain+0x1fa>
		scl = clst;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d164      	bne.n	800aed6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	69b9      	ldr	r1, [r7, #24]
 800ae10:	6938      	ldr	r0, [r7, #16]
 800ae12:	f7ff fdb5 	bl	800a980 <find_bitmap>
 800ae16:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <create_chain+0x86>
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae24:	d101      	bne.n	800ae2a <create_chain+0x8a>
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	e0b7      	b.n	800af9a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	69f9      	ldr	r1, [r7, #28]
 800ae30:	6938      	ldr	r0, [r7, #16]
 800ae32:	f7ff fe2c 	bl	800aa8e <change_bitmap>
 800ae36:	4603      	mov	r3, r0
 800ae38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d101      	bne.n	800ae44 <create_chain+0xa4>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e0aa      	b.n	800af9a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d102      	bne.n	800ae50 <create_chain+0xb0>
 800ae4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4e:	e0a4      	b.n	800af9a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2202      	movs	r2, #2
 800ae5a:	71da      	strb	r2, [r3, #7]
 800ae5c:	e011      	b.n	800ae82 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	79db      	ldrb	r3, [r3, #7]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d10d      	bne.n	800ae82 <create_chain+0xe2>
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d008      	beq.n	800ae82 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2203      	movs	r2, #3
 800ae80:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	79db      	ldrb	r3, [r3, #7]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d064      	beq.n	800af54 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d10b      	bne.n	800aeac <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d003      	beq.n	800aea4 <create_chain+0x104>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	3301      	adds	r3, #1
 800aea2:	e000      	b.n	800aea6 <create_chain+0x106>
 800aea4:	2302      	movs	r3, #2
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	61d3      	str	r3, [r2, #28]
 800aeaa:	e053      	b.n	800af54 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d102      	bne.n	800aeba <create_chain+0x11a>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fe89 	bl	800abd6 <fill_last_frag>
 800aec4:	4603      	mov	r3, r0
 800aec6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d142      	bne.n	800af54 <create_chain+0x1b4>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	61da      	str	r2, [r3, #28]
 800aed4:	e03e      	b.n	800af54 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	3301      	adds	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	69fa      	ldr	r2, [r7, #28]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d307      	bcc.n	800aefa <create_chain+0x15a>
				ncl = 2;
 800aeea:	2302      	movs	r3, #2
 800aeec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aeee:	69fa      	ldr	r2, [r7, #28]
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d901      	bls.n	800aefa <create_chain+0x15a>
 800aef6:	2300      	movs	r3, #0
 800aef8:	e04f      	b.n	800af9a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aefa:	69f9      	ldr	r1, [r7, #28]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff facd 	bl	800a49c <get_fat>
 800af02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d003      	beq.n	800af18 <create_chain+0x178>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d101      	bne.n	800af1c <create_chain+0x17c>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	e03e      	b.n	800af9a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800af1c:	69fa      	ldr	r2, [r7, #28]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	d1da      	bne.n	800aeda <create_chain+0x13a>
 800af24:	2300      	movs	r3, #0
 800af26:	e038      	b.n	800af9a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800af28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af2a:	f04f 32ff 	mov.w	r2, #4294967295
 800af2e:	69f9      	ldr	r1, [r7, #28]
 800af30:	6938      	ldr	r0, [r7, #16]
 800af32:	f7ff fc07 	bl	800a744 <put_fat>
 800af36:	4603      	mov	r3, r0
 800af38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d109      	bne.n	800af54 <create_chain+0x1b4>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d006      	beq.n	800af54 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6938      	ldr	r0, [r7, #16]
 800af4c:	f7ff fbfa 	bl	800a744 <put_fat>
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d116      	bne.n	800af88 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	69fa      	ldr	r2, [r7, #28]
 800af5e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	69da      	ldr	r2, [r3, #28]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	3b02      	subs	r3, #2
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d804      	bhi.n	800af78 <create_chain+0x1d8>
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	1e5a      	subs	r2, r3, #1
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	791b      	ldrb	r3, [r3, #4]
 800af7c:	f043 0301 	orr.w	r3, r3, #1
 800af80:	b2da      	uxtb	r2, r3
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	711a      	strb	r2, [r3, #4]
 800af86:	e007      	b.n	800af98 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d102      	bne.n	800af94 <create_chain+0x1f4>
 800af8e:	f04f 33ff 	mov.w	r3, #4294967295
 800af92:	e000      	b.n	800af96 <create_chain+0x1f6>
 800af94:	2301      	movs	r3, #1
 800af96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800af98:	69fb      	ldr	r3, [r7, #28]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800afa2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afba:	3304      	adds	r3, #4
 800afbc:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	899b      	ldrh	r3, [r3, #12]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	2200      	movs	r2, #0
 800afc6:	4698      	mov	r8, r3
 800afc8:	4691      	mov	r9, r2
 800afca:	4642      	mov	r2, r8
 800afcc:	464b      	mov	r3, r9
 800afce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afd2:	f7f5 fc6b 	bl	80008ac <__aeabi_uldivmod>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4610      	mov	r0, r2
 800afdc:	4619      	mov	r1, r3
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	895b      	ldrh	r3, [r3, #10]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	2200      	movs	r2, #0
 800afe6:	461c      	mov	r4, r3
 800afe8:	4615      	mov	r5, r2
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	f7f5 fc5d 	bl	80008ac <__aeabi_uldivmod>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4613      	mov	r3, r2
 800aff8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	1d1a      	adds	r2, r3, #4
 800affe:	61ba      	str	r2, [r7, #24]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <clmt_clust+0x6c>
 800b00a:	2300      	movs	r3, #0
 800b00c:	e010      	b.n	800b030 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800b00e:	69fa      	ldr	r2, [r7, #28]
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	429a      	cmp	r2, r3
 800b014:	d307      	bcc.n	800b026 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	3304      	adds	r3, #4
 800b022:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b024:	e7e9      	b.n	800affa <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800b026:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	4413      	add	r3, r2
}
 800b030:	4618      	mov	r0, r3
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b03a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b086      	sub	sp, #24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d102      	bne.n	800b058 <dir_sdi+0x1e>
 800b052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b056:	e001      	b.n	800b05c <dir_sdi+0x22>
 800b058:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d904      	bls.n	800b06c <dir_sdi+0x32>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	f003 031f 	and.w	r3, r3, #31
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b06c:	2302      	movs	r3, #2
 800b06e:	e074      	b.n	800b15a <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d109      	bne.n	800b096 <dir_sdi+0x5c>
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b02      	cmp	r3, #2
 800b088:	d905      	bls.n	800b096 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b08e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10c      	bne.n	800b0b6 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	095b      	lsrs	r3, r3, #5
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	8912      	ldrh	r2, [r2, #8]
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d301      	bcc.n	800b0ac <dir_sdi+0x72>
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	e056      	b.n	800b15a <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0b4:	e02d      	b.n	800b112 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	895b      	ldrh	r3, [r3, #10]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	899b      	ldrh	r3, [r3, #12]
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
 800b0c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0c6:	e019      	b.n	800b0fc <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6979      	ldr	r1, [r7, #20]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff f9e5 	bl	800a49c <get_fat>
 800b0d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0da:	d101      	bne.n	800b0e0 <dir_sdi+0xa6>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e03c      	b.n	800b15a <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d904      	bls.n	800b0f0 <dir_sdi+0xb6>
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d301      	bcc.n	800b0f4 <dir_sdi+0xba>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e032      	b.n	800b15a <dir_sdi+0x120>
			ofs -= csz;
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	429a      	cmp	r2, r3
 800b102:	d2e1      	bcs.n	800b0c8 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b104:	6979      	ldr	r1, [r7, #20]
 800b106:	6938      	ldr	r0, [r7, #16]
 800b108:	f7ff f9a8 	bl	800a45c <clust2sect>
 800b10c:	4602      	mov	r2, r0
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <dir_sdi+0xea>
 800b120:	2302      	movs	r3, #2
 800b122:	e01a      	b.n	800b15a <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	899b      	ldrh	r3, [r3, #12]
 800b12c:	4619      	mov	r1, r3
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	fbb3 f3f1 	udiv	r3, r3, r1
 800b134:	441a      	add	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	899b      	ldrh	r3, [r3, #12]
 800b144:	461a      	mov	r2, r3
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	fbb3 f0f2 	udiv	r0, r3, r2
 800b14c:	fb00 f202 	mul.w	r2, r0, r2
 800b150:	1a9b      	subs	r3, r3, r2
 800b152:	18ca      	adds	r2, r1, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b086      	sub	sp, #24
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b176:	3320      	adds	r3, #32
 800b178:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00b      	beq.n	800b19a <dir_next+0x38>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b04      	cmp	r3, #4
 800b188:	d102      	bne.n	800b190 <dir_next+0x2e>
 800b18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b18e:	e001      	b.n	800b194 <dir_next+0x32>
 800b190:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	429a      	cmp	r2, r3
 800b198:	d801      	bhi.n	800b19e <dir_next+0x3c>
 800b19a:	2304      	movs	r3, #4
 800b19c:	e0c3      	b.n	800b326 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	899b      	ldrh	r3, [r3, #12]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1aa:	fb01 f202 	mul.w	r2, r1, r2
 800b1ae:	1a9b      	subs	r3, r3, r2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f040 80a5 	bne.w	800b300 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10b      	bne.n	800b1e0 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	095b      	lsrs	r3, r3, #5
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	8912      	ldrh	r2, [r2, #8]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	f0c0 8095 	bcc.w	800b300 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	639a      	str	r2, [r3, #56]	@ 0x38
 800b1dc:	2304      	movs	r3, #4
 800b1de:	e0a2      	b.n	800b326 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	899b      	ldrh	r3, [r3, #12]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	8952      	ldrh	r2, [r2, #10]
 800b1f0:	3a01      	subs	r2, #1
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f040 8083 	bne.w	800b300 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7ff f94a 	bl	800a49c <get_fat>
 800b208:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d801      	bhi.n	800b214 <dir_next+0xb2>
 800b210:	2302      	movs	r3, #2
 800b212:	e088      	b.n	800b326 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21a:	d101      	bne.n	800b220 <dir_next+0xbe>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e082      	b.n	800b326 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	429a      	cmp	r2, r3
 800b228:	d360      	bcc.n	800b2ec <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	639a      	str	r2, [r3, #56]	@ 0x38
 800b236:	2304      	movs	r3, #4
 800b238:	e075      	b.n	800b326 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b240:	4619      	mov	r1, r3
 800b242:	4610      	mov	r0, r2
 800b244:	f7ff fdac 	bl	800ada0 <create_chain>
 800b248:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <dir_next+0xf2>
 800b250:	2307      	movs	r3, #7
 800b252:	e068      	b.n	800b326 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d101      	bne.n	800b25e <dir_next+0xfc>
 800b25a:	2302      	movs	r3, #2
 800b25c:	e063      	b.n	800b326 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b264:	d101      	bne.n	800b26a <dir_next+0x108>
 800b266:	2301      	movs	r3, #1
 800b268:	e05d      	b.n	800b326 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	79db      	ldrb	r3, [r3, #7]
 800b26e:	f043 0304 	orr.w	r3, r3, #4
 800b272:	b2da      	uxtb	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7ff f80d 	bl	800a298 <sync_window>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <dir_next+0x126>
 800b284:	2301      	movs	r3, #1
 800b286:	e04e      	b.n	800b326 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	899b      	ldrh	r3, [r3, #12]
 800b292:	461a      	mov	r2, r3
 800b294:	2100      	movs	r1, #0
 800b296:	f7fe fe35 	bl	8009f04 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b29a:	2300      	movs	r3, #0
 800b29c:	613b      	str	r3, [r7, #16]
 800b29e:	6979      	ldr	r1, [r7, #20]
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff f8db 	bl	800a45c <clust2sect>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	639a      	str	r2, [r3, #56]	@ 0x38
 800b2ac:	e012      	b.n	800b2d4 <dir_next+0x172>
						fs->wflag = 1;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f7fe ffef 	bl	800a298 <sync_window>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <dir_next+0x162>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e030      	b.n	800b326 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	613b      	str	r3, [r7, #16]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ce:	1c5a      	adds	r2, r3, #1
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	895b      	ldrh	r3, [r3, #10]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d3e6      	bcc.n	800b2ae <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	1ad2      	subs	r2, r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff f8b1 	bl	800a45c <clust2sect>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	899b      	ldrh	r3, [r3, #12]
 800b310:	461a      	mov	r2, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	fbb3 f0f2 	udiv	r0, r3, r2
 800b318:	fb00 f202 	mul.w	r2, r0, r2
 800b31c:	1a9b      	subs	r3, r3, r2
 800b31e:	18ca      	adds	r2, r1, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3718      	adds	r7, #24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b086      	sub	sp, #24
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b33e:	2100      	movs	r1, #0
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff fe7a 	bl	800b03a <dir_sdi>
 800b346:	4603      	mov	r3, r0
 800b348:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d140      	bne.n	800b3d2 <dir_alloc+0xa4>
		n = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b358:	4619      	mov	r1, r3
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7fe ffe0 	bl	800a320 <move_window>
 800b360:	4603      	mov	r3, r0
 800b362:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d132      	bne.n	800b3d0 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d108      	bne.n	800b384 <dir_alloc+0x56>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	b25b      	sxtb	r3, r3
 800b37a:	43db      	mvns	r3, r3
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	09db      	lsrs	r3, r3, #7
 800b380:	b2db      	uxtb	r3, r3
 800b382:	e00f      	b.n	800b3a4 <dir_alloc+0x76>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2be5      	cmp	r3, #229	@ 0xe5
 800b38c:	d004      	beq.n	800b398 <dir_alloc+0x6a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <dir_alloc+0x6e>
 800b398:	2301      	movs	r3, #1
 800b39a:	e000      	b.n	800b39e <dir_alloc+0x70>
 800b39c:	2300      	movs	r3, #0
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	613b      	str	r3, [r7, #16]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d102      	bne.n	800b3bc <dir_alloc+0x8e>
 800b3b6:	e00c      	b.n	800b3d2 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b3bc:	2101      	movs	r1, #1
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff fecf 	bl	800b162 <dir_next>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0c2      	beq.n	800b354 <dir_alloc+0x26>
 800b3ce:	e000      	b.n	800b3d2 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b3d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d101      	bne.n	800b3dc <dir_alloc+0xae>
 800b3d8:	2307      	movs	r3, #7
 800b3da:	75fb      	strb	r3, [r7, #23]
	return res;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	331a      	adds	r3, #26
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fe fb7f 	bl	8009af8 <ld_word>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b03      	cmp	r3, #3
 800b404:	d109      	bne.n	800b41a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	3314      	adds	r3, #20
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fb74 	bl	8009af8 <ld_word>
 800b410:	4603      	mov	r3, r0
 800b412:	041b      	lsls	r3, r3, #16
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b41a:	68fb      	ldr	r3, [r7, #12]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	331a      	adds	r3, #26
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	b292      	uxth	r2, r2
 800b438:	4611      	mov	r1, r2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fc72 	bl	8009d24 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b03      	cmp	r3, #3
 800b446:	d109      	bne.n	800b45c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f103 0214 	add.w	r2, r3, #20
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	0c1b      	lsrs	r3, r3, #16
 800b452:	b29b      	uxth	r3, r3
 800b454:	4619      	mov	r1, r3
 800b456:	4610      	mov	r0, r2
 800b458:	f7fe fc64 	bl	8009d24 <st_word>
	}
}
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	331a      	adds	r3, #26
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe fb40 	bl	8009af8 <ld_word>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <cmp_lfn+0x1e>
 800b47e:	2300      	movs	r3, #0
 800b480:	e059      	b.n	800b536 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b48a:	1e5a      	subs	r2, r3, #1
 800b48c:	4613      	mov	r3, r2
 800b48e:	005b      	lsls	r3, r3, #1
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b498:	2301      	movs	r3, #1
 800b49a:	81fb      	strh	r3, [r7, #14]
 800b49c:	2300      	movs	r3, #0
 800b49e:	613b      	str	r3, [r7, #16]
 800b4a0:	e033      	b.n	800b50a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b4a2:	4a27      	ldr	r2, [pc, #156]	@ (800b540 <cmp_lfn+0xdc>)
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fb21 	bl	8009af8 <ld_word>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b4ba:	89fb      	ldrh	r3, [r7, #14]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01a      	beq.n	800b4f6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4c4:	d812      	bhi.n	800b4ec <cmp_lfn+0x88>
 800b4c6:	89bb      	ldrh	r3, [r7, #12]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f003 fa23 	bl	800e914 <ff_wtoupper>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	461c      	mov	r4, r3
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	617a      	str	r2, [r7, #20]
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	4413      	add	r3, r2
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f003 fa17 	bl	800e914 <ff_wtoupper>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	429c      	cmp	r4, r3
 800b4ea:	d001      	beq.n	800b4f0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	e022      	b.n	800b536 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b4f0:	89bb      	ldrh	r3, [r7, #12]
 800b4f2:	81fb      	strh	r3, [r7, #14]
 800b4f4:	e006      	b.n	800b504 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4f6:	89bb      	ldrh	r3, [r7, #12]
 800b4f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d001      	beq.n	800b504 <cmp_lfn+0xa0>
 800b500:	2300      	movs	r3, #0
 800b502:	e018      	b.n	800b536 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	3301      	adds	r3, #1
 800b508:	613b      	str	r3, [r7, #16]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2b0c      	cmp	r3, #12
 800b50e:	d9c8      	bls.n	800b4a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <cmp_lfn+0xd0>
 800b51c:	89fb      	ldrh	r3, [r7, #14]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d008      	beq.n	800b534 <cmp_lfn+0xd0>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	4413      	add	r3, r2
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <cmp_lfn+0xd0>
 800b530:	2300      	movs	r3, #0
 800b532:	e000      	b.n	800b536 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b534:	2301      	movs	r3, #1
}
 800b536:	4618      	mov	r0, r3
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd90      	pop	{r4, r7, pc}
 800b53e:	bf00      	nop
 800b540:	08010034 	.word	0x08010034

0800b544 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	331a      	adds	r3, #26
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fad0 	bl	8009af8 <ld_word>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <pick_lfn+0x1e>
 800b55e:	2300      	movs	r3, #0
 800b560:	e04d      	b.n	800b5fe <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b56a:	1e5a      	subs	r2, r3, #1
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b578:	2301      	movs	r3, #1
 800b57a:	81fb      	strh	r3, [r7, #14]
 800b57c:	2300      	movs	r3, #0
 800b57e:	613b      	str	r3, [r7, #16]
 800b580:	e028      	b.n	800b5d4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b582:	4a21      	ldr	r2, [pc, #132]	@ (800b608 <pick_lfn+0xc4>)
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	4413      	add	r3, r2
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	4413      	add	r3, r2
 800b590:	4618      	mov	r0, r3
 800b592:	f7fe fab1 	bl	8009af8 <ld_word>
 800b596:	4603      	mov	r3, r0
 800b598:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b59a:	89fb      	ldrh	r3, [r7, #14]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00f      	beq.n	800b5c0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b5a4:	d901      	bls.n	800b5aa <pick_lfn+0x66>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e029      	b.n	800b5fe <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b5aa:	89bb      	ldrh	r3, [r7, #12]
 800b5ac:	81fb      	strh	r3, [r7, #14]
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	617a      	str	r2, [r7, #20]
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	89fa      	ldrh	r2, [r7, #14]
 800b5bc:	801a      	strh	r2, [r3, #0]
 800b5be:	e006      	b.n	800b5ce <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b5c0:	89bb      	ldrh	r3, [r7, #12]
 800b5c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d001      	beq.n	800b5ce <pick_lfn+0x8a>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e017      	b.n	800b5fe <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2b0c      	cmp	r3, #12
 800b5d8:	d9d3      	bls.n	800b582 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00a      	beq.n	800b5fc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2bfe      	cmp	r3, #254	@ 0xfe
 800b5ea:	d901      	bls.n	800b5f0 <pick_lfn+0xac>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e006      	b.n	800b5fe <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b5fc:	2301      	movs	r3, #1
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	08010034 	.word	0x08010034

0800b60c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4611      	mov	r1, r2
 800b618:	461a      	mov	r2, r3
 800b61a:	460b      	mov	r3, r1
 800b61c:	71fb      	strb	r3, [r7, #7]
 800b61e:	4613      	mov	r3, r2
 800b620:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	330d      	adds	r3, #13
 800b626:	79ba      	ldrb	r2, [r7, #6]
 800b628:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	330b      	adds	r3, #11
 800b62e:	220f      	movs	r2, #15
 800b630:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	330c      	adds	r3, #12
 800b636:	2200      	movs	r2, #0
 800b638:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	331a      	adds	r3, #26
 800b63e:	2100      	movs	r1, #0
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fb6f 	bl	8009d24 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	1e5a      	subs	r2, r3, #1
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	82fb      	strh	r3, [r7, #22]
 800b65a:	2300      	movs	r3, #0
 800b65c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b65e:	8afb      	ldrh	r3, [r7, #22]
 800b660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b664:	4293      	cmp	r3, r2
 800b666:	d007      	beq.n	800b678 <put_lfn+0x6c>
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	61fa      	str	r2, [r7, #28]
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	4413      	add	r3, r2
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b678:	4a17      	ldr	r2, [pc, #92]	@ (800b6d8 <put_lfn+0xcc>)
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	4413      	add	r3, r2
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	4413      	add	r3, r2
 800b686:	8afa      	ldrh	r2, [r7, #22]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fb4a 	bl	8009d24 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b690:	8afb      	ldrh	r3, [r7, #22]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <put_lfn+0x90>
 800b696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b69a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	61bb      	str	r3, [r7, #24]
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	2b0c      	cmp	r3, #12
 800b6a6:	d9da      	bls.n	800b65e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b6a8:	8afb      	ldrh	r3, [r7, #22]
 800b6aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d006      	beq.n	800b6c0 <put_lfn+0xb4>
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d103      	bne.n	800b6c8 <put_lfn+0xbc>
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	79fa      	ldrb	r2, [r7, #7]
 800b6cc:	701a      	strb	r2, [r3, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	3720      	adds	r7, #32
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	08010034 	.word	0x08010034

0800b6dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	@ 0x30
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b6ea:	220b      	movs	r2, #11
 800b6ec:	68b9      	ldr	r1, [r7, #8]
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7fe fbe7 	bl	8009ec2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b05      	cmp	r3, #5
 800b6f8:	d92b      	bls.n	800b752 <gen_numname+0x76>
		sr = seq;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b6fe:	e022      	b.n	800b746 <gen_numname+0x6a>
			wc = *lfn++;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	1c9a      	adds	r2, r3, #2
 800b704:	607a      	str	r2, [r7, #4]
 800b706:	881b      	ldrh	r3, [r3, #0]
 800b708:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b70a:	2300      	movs	r3, #0
 800b70c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b70e:	e017      	b.n	800b740 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	005a      	lsls	r2, r3, #1
 800b714:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	4413      	add	r3, r2
 800b71c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b71e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <gen_numname+0x5e>
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b734:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b738:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73c:	3301      	adds	r3, #1
 800b73e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	2b0f      	cmp	r3, #15
 800b744:	d9e4      	bls.n	800b710 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1d8      	bne.n	800b700 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b752:	2307      	movs	r3, #7
 800b754:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	f003 030f 	and.w	r3, r3, #15
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	3330      	adds	r3, #48	@ 0x30
 800b762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b766:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b76a:	2b39      	cmp	r3, #57	@ 0x39
 800b76c:	d904      	bls.n	800b778 <gen_numname+0x9c>
 800b76e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b772:	3307      	adds	r3, #7
 800b774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77a:	1e5a      	subs	r2, r3, #1
 800b77c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b77e:	3330      	adds	r3, #48	@ 0x30
 800b780:	443b      	add	r3, r7
 800b782:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b786:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	091b      	lsrs	r3, r3, #4
 800b78e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1df      	bne.n	800b756 <gen_numname+0x7a>
	ns[i] = '~';
 800b796:	f107 0214 	add.w	r2, r7, #20
 800b79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b79c:	4413      	add	r3, r2
 800b79e:	227e      	movs	r2, #126	@ 0x7e
 800b7a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7a6:	e002      	b.n	800b7ae <gen_numname+0xd2>
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d205      	bcs.n	800b7c2 <gen_numname+0xe6>
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ba:	4413      	add	r3, r2
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b20      	cmp	r3, #32
 800b7c0:	d1f2      	bne.n	800b7a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c4:	2b07      	cmp	r3, #7
 800b7c6:	d807      	bhi.n	800b7d8 <gen_numname+0xfc>
 800b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b7ce:	3330      	adds	r3, #48	@ 0x30
 800b7d0:	443b      	add	r3, r7
 800b7d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b7d6:	e000      	b.n	800b7da <gen_numname+0xfe>
 800b7d8:	2120      	movs	r1, #32
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	627a      	str	r2, [r7, #36]	@ 0x24
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	460a      	mov	r2, r1
 800b7e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	2b07      	cmp	r3, #7
 800b7ec:	d9e9      	bls.n	800b7c2 <gen_numname+0xe6>
}
 800b7ee:	bf00      	nop
 800b7f0:	bf00      	nop
 800b7f2:	3730      	adds	r7, #48	@ 0x30
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b804:	230b      	movs	r3, #11
 800b806:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	0852      	lsrs	r2, r2, #1
 800b80e:	01db      	lsls	r3, r3, #7
 800b810:	4313      	orrs	r3, r2
 800b812:	b2da      	uxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	1c59      	adds	r1, r3, #1
 800b818:	6079      	str	r1, [r7, #4]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	4413      	add	r3, r2
 800b81e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	3b01      	subs	r3, #1
 800b824:	60bb      	str	r3, [r7, #8]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1ed      	bne.n	800b808 <sum_sfn+0x10>
	return sum;
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b087      	sub	sp, #28
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3301      	adds	r3, #1
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	3301      	adds	r3, #1
 800b84a:	015b      	lsls	r3, r3, #5
 800b84c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b84e:	2300      	movs	r3, #0
 800b850:	827b      	strh	r3, [r7, #18]
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	e017      	b.n	800b888 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d103      	bne.n	800b866 <xdir_sum+0x2c>
			i++;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	3301      	adds	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e00d      	b.n	800b882 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b866:	8a7b      	ldrh	r3, [r7, #18]
 800b868:	03db      	lsls	r3, r3, #15
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	8a7b      	ldrh	r3, [r7, #18]
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	b29b      	uxth	r3, r3
 800b872:	4413      	add	r3, r2
 800b874:	b29b      	uxth	r3, r3
 800b876:	6879      	ldr	r1, [r7, #4]
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	440a      	add	r2, r1
 800b87c:	7812      	ldrb	r2, [r2, #0]
 800b87e:	4413      	add	r3, r2
 800b880:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	3301      	adds	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d3e3      	bcc.n	800b858 <xdir_sum+0x1e>
		}
	}
	return sum;
 800b890:	8a7b      	ldrh	r3, [r7, #18]
}
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b8aa:	e01f      	b.n	800b8ec <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b8ac:	89bb      	ldrh	r3, [r7, #12]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f003 f830 	bl	800e914 <ff_wtoupper>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b8b8:	89fb      	ldrh	r3, [r7, #14]
 800b8ba:	03db      	lsls	r3, r3, #15
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	89fb      	ldrh	r3, [r7, #14]
 800b8c0:	085b      	lsrs	r3, r3, #1
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	89bb      	ldrh	r3, [r7, #12]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	4413      	add	r3, r2
 800b8d0:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b8d2:	89fb      	ldrh	r3, [r7, #14]
 800b8d4:	03db      	lsls	r3, r3, #15
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	89fb      	ldrh	r3, [r7, #14]
 800b8da:	085b      	lsrs	r3, r3, #1
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	4413      	add	r3, r2
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	89bb      	ldrh	r3, [r7, #12]
 800b8e4:	0a1b      	lsrs	r3, r3, #8
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	1c9a      	adds	r2, r3, #2
 800b8f0:	607a      	str	r2, [r7, #4]
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	81bb      	strh	r3, [r7, #12]
 800b8f6:	89bb      	ldrh	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1d7      	bne.n	800b8ac <xname_sum+0xe>
	}
	return sum;
 800b8fc:	89fb      	ldrh	r3, [r7, #14]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b086      	sub	sp, #24
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b914:	2340      	movs	r3, #64	@ 0x40
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	e02c      	b.n	800b978 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f003 031f 	and.w	r3, r3, #31
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <get_xdir_info+0x28>
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3302      	adds	r3, #2
 800b92c:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	4413      	add	r3, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe f8df 	bl	8009af8 <ld_word>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2100      	movs	r1, #0
 800b93e:	4618      	mov	r0, r3
 800b940:	f002 ffac 	bl	800e89c <ff_convert>
 800b944:	4603      	mov	r3, r0
 800b946:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800b948:	897b      	ldrh	r3, [r7, #10]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <get_xdir_info+0x4e>
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2bfe      	cmp	r3, #254	@ 0xfe
 800b952:	d902      	bls.n	800b95a <get_xdir_info+0x54>
 800b954:	2300      	movs	r3, #0
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	e015      	b.n	800b986 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	617a      	str	r2, [r7, #20]
 800b960:	897a      	ldrh	r2, [r7, #10]
 800b962:	b2d1      	uxtb	r1, r2
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	4413      	add	r3, r2
 800b968:	460a      	mov	r2, r1
 800b96a:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	3302      	adds	r3, #2
 800b970:	613b      	str	r3, [r7, #16]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3323      	adds	r3, #35	@ 0x23
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4293      	cmp	r3, r2
 800b984:	d3cb      	bcc.n	800b91e <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d106      	bne.n	800b99a <get_xdir_info+0x94>
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	617a      	str	r2, [r7, #20]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	4413      	add	r3, r2
 800b996:	223f      	movs	r2, #63	@ 0x3f
 800b998:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	4413      	add	r3, r2
 800b9a0:	331a      	adds	r3, #26
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	791a      	ldrb	r2, [r3, #4]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	7b1b      	ldrb	r3, [r3, #12]
 800b9b8:	f003 0310 	and.w	r3, r3, #16
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d107      	bne.n	800b9d0 <get_xdir_info+0xca>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3338      	adds	r3, #56	@ 0x38
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe f8d2 	bl	8009b6e <ld_qword>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	e003      	b.n	800b9d8 <get_xdir_info+0xd2>
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	f04f 0300 	mov.w	r3, #0
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe f888 	bl	8009af8 <ld_word>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	330e      	adds	r3, #14
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe f87f 	bl	8009af8 <ld_word>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	811a      	strh	r2, [r3, #8]
}
 800ba02:	bf00      	nop
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ba0c:	b590      	push	{r4, r7, lr}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba24:	4619      	mov	r1, r3
 800ba26:	4610      	mov	r0, r2
 800ba28:	f7fe fc7a 	bl	800a320 <move_window>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <load_xdir+0x2e>
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	e09f      	b.n	800bb7a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b85      	cmp	r3, #133	@ 0x85
 800ba42:	d001      	beq.n	800ba48 <load_xdir+0x3c>
 800ba44:	2302      	movs	r3, #2
 800ba46:	e098      	b.n	800bb7a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6938      	ldr	r0, [r7, #16]
 800ba52:	f7fe fa36 	bl	8009ec2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	015b      	lsls	r3, r3, #5
 800ba60:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b5f      	cmp	r3, #95	@ 0x5f
 800ba66:	d903      	bls.n	800ba70 <load_xdir+0x64>
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800ba6e:	d901      	bls.n	800ba74 <load_xdir+0x68>
 800ba70:	2302      	movs	r3, #2
 800ba72:	e082      	b.n	800bb7a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800ba74:	2100      	movs	r1, #0
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff fb73 	bl	800b162 <dir_next>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <load_xdir+0x7e>
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	e077      	b.n	800bb7a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba92:	4619      	mov	r1, r3
 800ba94:	4610      	mov	r0, r2
 800ba96:	f7fe fc43 	bl	800a320 <move_window>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <load_xdir+0x9c>
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	e068      	b.n	800bb7a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2bc0      	cmp	r3, #192	@ 0xc0
 800bab0:	d001      	beq.n	800bab6 <load_xdir+0xaa>
 800bab2:	2302      	movs	r3, #2
 800bab4:	e061      	b.n	800bb7a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	f103 0020 	add.w	r0, r3, #32
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bac0:	2220      	movs	r2, #32
 800bac2:	4619      	mov	r1, r3
 800bac4:	f7fe f9fd 	bl	8009ec2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	3323      	adds	r3, #35	@ 0x23
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	332c      	adds	r3, #44	@ 0x2c
 800bad0:	4a2c      	ldr	r2, [pc, #176]	@ (800bb84 <load_xdir+0x178>)
 800bad2:	fba2 2303 	umull	r2, r3, r2, r3
 800bad6:	08db      	lsrs	r3, r3, #3
 800bad8:	015b      	lsls	r3, r3, #5
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	429a      	cmp	r2, r3
 800bade:	d201      	bcs.n	800bae4 <load_xdir+0xd8>
 800bae0:	2302      	movs	r3, #2
 800bae2:	e04a      	b.n	800bb7a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800bae4:	2340      	movs	r3, #64	@ 0x40
 800bae6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800bae8:	2100      	movs	r1, #0
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff fb39 	bl	800b162 <dir_next>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <load_xdir+0xf2>
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	e03d      	b.n	800bb7a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7fe fc09 	bl	800a320 <move_window>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <load_xdir+0x110>
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	e02e      	b.n	800bb7a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2bc1      	cmp	r3, #193	@ 0xc1
 800bb24:	d001      	beq.n	800bb2a <load_xdir+0x11e>
 800bb26:	2302      	movs	r3, #2
 800bb28:	e027      	b.n	800bb7a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bb30:	d208      	bcs.n	800bb44 <load_xdir+0x138>
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	18d0      	adds	r0, r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	4619      	mov	r1, r3
 800bb40:	f7fe f9bf 	bl	8009ec2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3320      	adds	r3, #32
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d3ca      	bcc.n	800bae8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bb58:	d80e      	bhi.n	800bb78 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800bb5a:	6938      	ldr	r0, [r7, #16]
 800bb5c:	f7ff fe6d 	bl	800b83a <xdir_sum>
 800bb60:	4603      	mov	r3, r0
 800bb62:	461c      	mov	r4, r3
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	3302      	adds	r3, #2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fd ffc5 	bl	8009af8 <ld_word>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d001      	beq.n	800bb78 <load_xdir+0x16c>
 800bb74:	2302      	movs	r3, #2
 800bb76:	e000      	b.n	800bb7a <load_xdir+0x16e>
	}
	return FR_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	371c      	adds	r7, #28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd90      	pop	{r4, r7, pc}
 800bb82:	bf00      	nop
 800bb84:	88888889 	.word	0x88888889

0800bb88 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800bb88:	b5b0      	push	{r4, r5, r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6808      	ldr	r0, [r1, #0]
 800bb96:	6879      	ldr	r1, [r7, #4]
 800bb98:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6a08      	ldr	r0, [r1, #32]
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bba6:	b2c8      	uxtb	r0, r1
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800bbba:	2300      	movs	r3, #0
 800bbbc:	6879      	ldr	r1, [r7, #4]
 800bbbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff fa32 	bl	800b03a <dir_sdi>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d104      	bne.n	800bbea <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff ff13 	bl	800ba0c <load_xdir>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bdb0      	pop	{r4, r5, r7, pc}

0800bbf4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	1c9c      	adds	r4, r3, #2
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f7ff fe16 	bl	800b83a <xdir_sum>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4619      	mov	r1, r3
 800bc12:	4620      	mov	r0, r4
 800bc14:	f7fe f886 	bl	8009d24 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc26:	4619      	mov	r1, r3
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7ff fa06 	bl	800b03a <dir_sdi>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bc32:	e026      	b.n	800bc82 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f7fe fb6e 	bl	800a320 <move_window>
 800bc44:	4603      	mov	r3, r0
 800bc46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d11d      	bne.n	800bc8a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc52:	2220      	movs	r2, #32
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe f933 	bl	8009ec2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2201      	movs	r2, #1
 800bc62:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	613b      	str	r3, [r7, #16]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00e      	beq.n	800bc8e <store_xdir+0x9a>
		dirb += SZDIRE;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3320      	adds	r3, #32
 800bc74:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bc76:	2100      	movs	r1, #0
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff fa72 	bl	800b162 <dir_next>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0d5      	beq.n	800bc34 <store_xdir+0x40>
 800bc88:	e002      	b.n	800bc90 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bc8a:	bf00      	nop
 800bc8c:	e000      	b.n	800bc90 <store_xdir+0x9c>
		if (--nent == 0) break;
 800bc8e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d002      	beq.n	800bc9c <store_xdir+0xa8>
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d101      	bne.n	800bca0 <store_xdir+0xac>
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	e000      	b.n	800bca2 <store_xdir+0xae>
 800bca0:	2302      	movs	r3, #2
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd90      	pop	{r4, r7, pc}

0800bcaa <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800bcaa:	b590      	push	{r4, r7, lr}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800bcb4:	2240      	movs	r2, #64	@ 0x40
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7fe f923 	bl	8009f04 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2285      	movs	r2, #133	@ 0x85
 800bcc2:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3320      	adds	r3, #32
 800bcc8:	22c0      	movs	r2, #192	@ 0xc0
 800bcca:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800bccc:	2300      	movs	r3, #0
 800bcce:	72bb      	strb	r3, [r7, #10]
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	72fb      	strb	r3, [r7, #11]
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	813b      	strh	r3, [r7, #8]
 800bcd8:	2340      	movs	r3, #64	@ 0x40
 800bcda:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	60fa      	str	r2, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	4413      	add	r3, r2
 800bce6:	22c1      	movs	r2, #193	@ 0xc1
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	60fa      	str	r2, [r7, #12]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800bcf8:	893b      	ldrh	r3, [r7, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <create_xdir+0x6c>
 800bcfe:	7abb      	ldrb	r3, [r7, #10]
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	4413      	add	r3, r2
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	813b      	strh	r3, [r7, #8]
 800bd0a:	893b      	ldrh	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <create_xdir+0x6c>
 800bd10:	7abb      	ldrb	r3, [r7, #10]
 800bd12:	3301      	adds	r3, #1
 800bd14:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	893a      	ldrh	r2, [r7, #8]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fd ffff 	bl	8009d24 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3302      	adds	r3, #2
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f003 031f 	and.w	r3, r3, #31
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e0      	bne.n	800bcf8 <create_xdir+0x4e>
		nb++;
 800bd36:	7afb      	ldrb	r3, [r7, #11]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800bd3c:	7abb      	ldrb	r3, [r7, #10]
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	4413      	add	r3, r2
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1c8      	bne.n	800bcdc <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3323      	adds	r3, #35	@ 0x23
 800bd4e:	7aba      	ldrb	r2, [r7, #10]
 800bd50:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3301      	adds	r3, #1
 800bd56:	7afa      	ldrb	r2, [r7, #11]
 800bd58:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800bd60:	6838      	ldr	r0, [r7, #0]
 800bd62:	f7ff fd9c 	bl	800b89e <xname_sum>
 800bd66:	4603      	mov	r3, r0
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f7fd ffda 	bl	8009d24 <st_word>
}
 800bd70:	bf00      	nop
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd90      	pop	{r4, r7, pc}

0800bd78 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bd82:	2304      	movs	r3, #4
 800bd84:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bd8c:	23ff      	movs	r3, #255	@ 0xff
 800bd8e:	757b      	strb	r3, [r7, #21]
 800bd90:	23ff      	movs	r3, #255	@ 0xff
 800bd92:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bd94:	e09f      	b.n	800bed6 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6938      	ldr	r0, [r7, #16]
 800bd9e:	f7fe fabf 	bl	800a320 <move_window>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f040 809a 	bne.w	800bee2 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bdb6:	7dbb      	ldrb	r3, [r7, #22]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d102      	bne.n	800bdc2 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	75fb      	strb	r3, [r7, #23]
 800bdc0:	e096      	b.n	800bef0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	d118      	bne.n	800bdfc <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800bdca:	7dbb      	ldrb	r3, [r7, #22]
 800bdcc:	2b85      	cmp	r3, #133	@ 0x85
 800bdce:	d179      	bne.n	800bec4 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff fe17 	bl	800ba0c <load_xdir>
 800bdde:	4603      	mov	r3, r0
 800bde0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d17e      	bne.n	800bee6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	3304      	adds	r3, #4
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800bdfa:	e074      	b.n	800bee6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be00:	330b      	adds	r3, #11
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be08:	73fb      	strb	r3, [r7, #15]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7bfa      	ldrb	r2, [r7, #15]
 800be0e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800be10:	7dbb      	ldrb	r3, [r7, #22]
 800be12:	2be5      	cmp	r3, #229	@ 0xe5
 800be14:	d00e      	beq.n	800be34 <dir_read+0xbc>
 800be16:	7dbb      	ldrb	r3, [r7, #22]
 800be18:	2b2e      	cmp	r3, #46	@ 0x2e
 800be1a:	d00b      	beq.n	800be34 <dir_read+0xbc>
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	f023 0320 	bic.w	r3, r3, #32
 800be22:	2b08      	cmp	r3, #8
 800be24:	bf0c      	ite	eq
 800be26:	2301      	moveq	r3, #1
 800be28:	2300      	movne	r3, #0
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	4293      	cmp	r3, r2
 800be32:	d002      	beq.n	800be3a <dir_read+0xc2>
				ord = 0xFF;
 800be34:	23ff      	movs	r3, #255	@ 0xff
 800be36:	757b      	strb	r3, [r7, #21]
 800be38:	e044      	b.n	800bec4 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	2b0f      	cmp	r3, #15
 800be3e:	d12f      	bne.n	800bea0 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800be40:	7dbb      	ldrb	r3, [r7, #22]
 800be42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00d      	beq.n	800be66 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be4e:	7b5b      	ldrb	r3, [r3, #13]
 800be50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800be52:	7dbb      	ldrb	r3, [r7, #22]
 800be54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be58:	75bb      	strb	r3, [r7, #22]
 800be5a:	7dbb      	ldrb	r3, [r7, #22]
 800be5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800be66:	7dba      	ldrb	r2, [r7, #22]
 800be68:	7d7b      	ldrb	r3, [r7, #21]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d115      	bne.n	800be9a <dir_read+0x122>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be72:	330d      	adds	r3, #13
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	7d3a      	ldrb	r2, [r7, #20]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d10e      	bne.n	800be9a <dir_read+0x122>
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	691a      	ldr	r2, [r3, #16]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be84:	4619      	mov	r1, r3
 800be86:	4610      	mov	r0, r2
 800be88:	f7ff fb5c 	bl	800b544 <pick_lfn>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <dir_read+0x122>
 800be92:	7d7b      	ldrb	r3, [r7, #21]
 800be94:	3b01      	subs	r3, #1
 800be96:	b2db      	uxtb	r3, r3
 800be98:	e000      	b.n	800be9c <dir_read+0x124>
 800be9a:	23ff      	movs	r3, #255	@ 0xff
 800be9c:	757b      	strb	r3, [r7, #21]
 800be9e:	e011      	b.n	800bec4 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bea0:	7d7b      	ldrb	r3, [r7, #21]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d109      	bne.n	800beba <dir_read+0x142>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fca4 	bl	800b7f8 <sum_sfn>
 800beb0:	4603      	mov	r3, r0
 800beb2:	461a      	mov	r2, r3
 800beb4:	7d3b      	ldrb	r3, [r7, #20]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d017      	beq.n	800beea <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f04f 32ff 	mov.w	r2, #4294967295
 800bec0:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800bec2:	e012      	b.n	800beea <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bec4:	2100      	movs	r1, #0
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff f94b 	bl	800b162 <dir_next>
 800becc:	4603      	mov	r3, r0
 800bece:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <dir_read+0x176>
	while (dp->sect) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f47f af5b 	bne.w	800bd96 <dir_read+0x1e>
 800bee0:	e006      	b.n	800bef0 <dir_read+0x178>
		if (res != FR_OK) break;
 800bee2:	bf00      	nop
 800bee4:	e004      	b.n	800bef0 <dir_read+0x178>
					break;
 800bee6:	bf00      	nop
 800bee8:	e002      	b.n	800bef0 <dir_read+0x178>
					break;
 800beea:	bf00      	nop
 800beec:	e000      	b.n	800bef0 <dir_read+0x178>
		if (res != FR_OK) break;
 800beee:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <dir_read+0x184>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bf06:	b590      	push	{r4, r7, lr}
 800bf08:	b089      	sub	sp, #36	@ 0x24
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf14:	2100      	movs	r1, #0
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff f88f 	bl	800b03a <dir_sdi>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800bf20:	7ffb      	ldrb	r3, [r7, #31]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <dir_find+0x24>
 800bf26:	7ffb      	ldrb	r3, [r7, #31]
 800bf28:	e113      	b.n	800c152 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d165      	bne.n	800bffe <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff fcb1 	bl	800b89e <xname_sum>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bf40:	e050      	b.n	800bfe4 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	3324      	adds	r3, #36	@ 0x24
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fd fdd5 	bl	8009af8 <ld_word>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	461a      	mov	r2, r3
 800bf52:	893b      	ldrh	r3, [r7, #8]
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d144      	bne.n	800bfe2 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800bf60:	76fb      	strb	r3, [r7, #27]
 800bf62:	2340      	movs	r3, #64	@ 0x40
 800bf64:	617b      	str	r3, [r7, #20]
 800bf66:	2300      	movs	r3, #0
 800bf68:	613b      	str	r3, [r7, #16]
 800bf6a:	e029      	b.n	800bfc0 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f003 031f 	and.w	r3, r3, #31
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <dir_find+0x76>
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	3302      	adds	r3, #2
 800bf7a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	695a      	ldr	r2, [r3, #20]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	4413      	add	r3, r2
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fd fdb7 	bl	8009af8 <ld_word>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f002 fcc1 	bl	800e914 <ff_wtoupper>
 800bf92:	4603      	mov	r3, r0
 800bf94:	461c      	mov	r4, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	691a      	ldr	r2, [r3, #16]
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4413      	add	r3, r2
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f002 fcb6 	bl	800e914 <ff_wtoupper>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	429c      	cmp	r4, r3
 800bfac:	d10c      	bne.n	800bfc8 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bfae:	7efb      	ldrb	r3, [r7, #27]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	76fb      	strb	r3, [r7, #27]
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	3302      	adds	r3, #2
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	613b      	str	r3, [r7, #16]
 800bfc0:	7efb      	ldrb	r3, [r7, #27]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1d2      	bne.n	800bf6c <dir_find+0x66>
 800bfc6:	e000      	b.n	800bfca <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bfc8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bfca:	7efb      	ldrb	r3, [r7, #27]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d109      	bne.n	800bfe4 <dir_find+0xde>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	691a      	ldr	r2, [r3, #16]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	4413      	add	r3, r2
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <dir_find+0xf2>
 800bfe0:	e000      	b.n	800bfe4 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bfe2:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fec6 	bl	800bd78 <dir_read>
 800bfec:	4603      	mov	r3, r0
 800bfee:	77fb      	strb	r3, [r7, #31]
 800bff0:	7ffb      	ldrb	r3, [r7, #31]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d0a5      	beq.n	800bf42 <dir_find+0x3c>
 800bff6:	e000      	b.n	800bffa <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bff8:	bf00      	nop
		}
		return res;
 800bffa:	7ffb      	ldrb	r3, [r7, #31]
 800bffc:	e0a9      	b.n	800c152 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bffe:	23ff      	movs	r3, #255	@ 0xff
 800c000:	773b      	strb	r3, [r7, #28]
 800c002:	7f3b      	ldrb	r3, [r7, #28]
 800c004:	777b      	strb	r3, [r7, #29]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f04f 32ff 	mov.w	r2, #4294967295
 800c00c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c012:	4619      	mov	r1, r3
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7fe f983 	bl	800a320 <move_window>
 800c01a:	4603      	mov	r3, r0
 800c01c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c01e:	7ffb      	ldrb	r3, [r7, #31]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f040 8090 	bne.w	800c146 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c02e:	7fbb      	ldrb	r3, [r7, #30]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d102      	bne.n	800c03a <dir_find+0x134>
 800c034:	2304      	movs	r3, #4
 800c036:	77fb      	strb	r3, [r7, #31]
 800c038:	e08a      	b.n	800c150 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c03e:	330b      	adds	r3, #11
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c046:	72fb      	strb	r3, [r7, #11]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7afa      	ldrb	r2, [r7, #11]
 800c04c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c04e:	7fbb      	ldrb	r3, [r7, #30]
 800c050:	2be5      	cmp	r3, #229	@ 0xe5
 800c052:	d007      	beq.n	800c064 <dir_find+0x15e>
 800c054:	7afb      	ldrb	r3, [r7, #11]
 800c056:	f003 0308 	and.w	r3, r3, #8
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d009      	beq.n	800c072 <dir_find+0x16c>
 800c05e:	7afb      	ldrb	r3, [r7, #11]
 800c060:	2b0f      	cmp	r3, #15
 800c062:	d006      	beq.n	800c072 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c064:	23ff      	movs	r3, #255	@ 0xff
 800c066:	777b      	strb	r3, [r7, #29]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295
 800c06e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c070:	e05e      	b.n	800c130 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c072:	7afb      	ldrb	r3, [r7, #11]
 800c074:	2b0f      	cmp	r3, #15
 800c076:	d136      	bne.n	800c0e6 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d154      	bne.n	800c130 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c086:	7fbb      	ldrb	r3, [r7, #30]
 800c088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c094:	7b5b      	ldrb	r3, [r3, #13]
 800c096:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c098:	7fbb      	ldrb	r3, [r7, #30]
 800c09a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c09e:	77bb      	strb	r3, [r7, #30]
 800c0a0:	7fbb      	ldrb	r3, [r7, #30]
 800c0a2:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c0ac:	7fba      	ldrb	r2, [r7, #30]
 800c0ae:	7f7b      	ldrb	r3, [r7, #29]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d115      	bne.n	800c0e0 <dir_find+0x1da>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b8:	330d      	adds	r3, #13
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	7f3a      	ldrb	r2, [r7, #28]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d10e      	bne.n	800c0e0 <dir_find+0x1da>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	f7ff f9c9 	bl	800b464 <cmp_lfn>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <dir_find+0x1da>
 800c0d8:	7f7b      	ldrb	r3, [r7, #29]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	e000      	b.n	800c0e2 <dir_find+0x1dc>
 800c0e0:	23ff      	movs	r3, #255	@ 0xff
 800c0e2:	777b      	strb	r3, [r7, #29]
 800c0e4:	e024      	b.n	800c130 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c0e6:	7f7b      	ldrb	r3, [r7, #29]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d109      	bne.n	800c100 <dir_find+0x1fa>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff fb81 	bl	800b7f8 <sum_sfn>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	7f3b      	ldrb	r3, [r7, #28]
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d024      	beq.n	800c14a <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <dir_find+0x21e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3340      	adds	r3, #64	@ 0x40
 800c116:	220b      	movs	r2, #11
 800c118:	4619      	mov	r1, r3
 800c11a:	f7fd ff0e 	bl	8009f3a <mem_cmp>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d014      	beq.n	800c14e <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c124:	23ff      	movs	r3, #255	@ 0xff
 800c126:	777b      	strb	r3, [r7, #29]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f04f 32ff 	mov.w	r2, #4294967295
 800c12e:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c130:	2100      	movs	r1, #0
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff f815 	bl	800b162 <dir_next>
 800c138:	4603      	mov	r3, r0
 800c13a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c13c:	7ffb      	ldrb	r3, [r7, #31]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f43f af65 	beq.w	800c00e <dir_find+0x108>
 800c144:	e004      	b.n	800c150 <dir_find+0x24a>
		if (res != FR_OK) break;
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c14e:	bf00      	nop

	return res;
 800c150:	7ffb      	ldrb	r3, [r7, #31]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3724      	adds	r7, #36	@ 0x24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd90      	pop	{r4, r7, pc}
	...

0800c15c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c15c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c160:	b0a0      	sub	sp, #128	@ 0x80
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c172:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <dir_register+0x22>
 800c17a:	2306      	movs	r3, #6
 800c17c:	e192      	b.n	800c4a4 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c17e:	2300      	movs	r3, #0
 800c180:	677b      	str	r3, [r7, #116]	@ 0x74
 800c182:	e002      	b.n	800c18a <dir_register+0x2e>
 800c184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c186:	3301      	adds	r3, #1
 800c188:	677b      	str	r3, [r7, #116]	@ 0x74
 800c18a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c18c:	691a      	ldr	r2, [r3, #16]
 800c18e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1f4      	bne.n	800c184 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b04      	cmp	r3, #4
 800c1a0:	f040 80a3 	bne.w	800c2ea <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c1a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1a6:	330e      	adds	r3, #14
 800c1a8:	4aa4      	ldr	r2, [pc, #656]	@ (800c43c <dir_register+0x2e0>)
 800c1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ae:	08db      	lsrs	r3, r3, #3
 800c1b0:	3302      	adds	r3, #2
 800c1b2:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c1b4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff f8b9 	bl	800b32e <dir_alloc>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800c1c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d002      	beq.n	800c1d0 <dir_register+0x74>
 800c1ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c1ce:	e169      	b.n	800c4a4 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	015b      	lsls	r3, r3, #5
 800c1da:	1ad2      	subs	r2, r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d076      	beq.n	800c2d6 <dir_register+0x17a>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	79db      	ldrb	r3, [r3, #7]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d070      	beq.n	800c2d6 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c1fa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c1fc:	8949      	ldrh	r1, [r1, #10]
 800c1fe:	4608      	mov	r0, r1
 800c200:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c202:	8989      	ldrh	r1, [r1, #12]
 800c204:	fb00 f101 	mul.w	r1, r0, r1
 800c208:	2000      	movs	r0, #0
 800c20a:	460c      	mov	r4, r1
 800c20c:	4605      	mov	r5, r0
 800c20e:	eb12 0804 	adds.w	r8, r2, r4
 800c212:	eb43 0905 	adc.w	r9, r3, r5
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe fcaa 	bl	800ab78 <fill_first_frag>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c22a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <dir_register+0xdc>
 800c232:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c236:	e135      	b.n	800c4a4 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c23e:	f04f 32ff 	mov.w	r2, #4294967295
 800c242:	4619      	mov	r1, r3
 800c244:	f7fe fcc7 	bl	800abd6 <fill_last_frag>
 800c248:	4603      	mov	r3, r0
 800c24a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c24e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <dir_register+0x100>
 800c256:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c25a:	e123      	b.n	800c4a4 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f7ff fc8f 	bl	800bb88 <load_obj_dir>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c270:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <dir_register+0x122>
 800c278:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c27c:	e112      	b.n	800c4a4 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c27e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c28c:	4608      	mov	r0, r1
 800c28e:	f7fd fd90 	bl	8009db2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	f7fd fd86 	bl	8009db2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	79da      	ldrb	r2, [r3, #7]
 800c2aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	3321      	adds	r3, #33	@ 0x21
 800c2b0:	f042 0201 	orr.w	r2, r2, #1
 800c2b4:	b2d2      	uxtb	r2, r2
 800c2b6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c2b8:	f107 0308 	add.w	r3, r7, #8
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff fc99 	bl	800bbf4 <store_xdir>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c2c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <dir_register+0x17a>
 800c2d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c2d4:	e0e6      	b.n	800c4a4 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c2d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2d8:	695a      	ldr	r2, [r3, #20]
 800c2da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	f7ff fce2 	bl	800bcaa <create_xdir>
		return FR_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e0dc      	b.n	800c4a4 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c2f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c2f4:	220c      	movs	r2, #12
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fd fde3 	bl	8009ec2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c2fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b00      	cmp	r3, #0
 800c306:	d033      	beq.n	800c370 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2240      	movs	r2, #64	@ 0x40
 800c30c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800c310:	2301      	movs	r3, #1
 800c312:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c314:	e016      	b.n	800c344 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800c31c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c31e:	691a      	ldr	r2, [r3, #16]
 800c320:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800c324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c326:	f7ff f9d9 	bl	800b6dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff fdeb 	bl	800bf06 <dir_find>
 800c330:	4603      	mov	r3, r0
 800c332:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800c336:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800c33e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c340:	3301      	adds	r3, #1
 800c342:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c346:	2b63      	cmp	r3, #99	@ 0x63
 800c348:	d9e5      	bls.n	800c316 <dir_register+0x1ba>
 800c34a:	e000      	b.n	800c34e <dir_register+0x1f2>
			if (res != FR_OK) break;
 800c34c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c34e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c350:	2b64      	cmp	r3, #100	@ 0x64
 800c352:	d101      	bne.n	800c358 <dir_register+0x1fc>
 800c354:	2307      	movs	r3, #7
 800c356:	e0a5      	b.n	800c4a4 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c358:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c35c:	2b04      	cmp	r3, #4
 800c35e:	d002      	beq.n	800c366 <dir_register+0x20a>
 800c360:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c364:	e09e      	b.n	800c4a4 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c366:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c370:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d007      	beq.n	800c38c <dir_register+0x230>
 800c37c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c37e:	330c      	adds	r3, #12
 800c380:	4a2f      	ldr	r2, [pc, #188]	@ (800c440 <dir_register+0x2e4>)
 800c382:	fba2 2303 	umull	r2, r3, r2, r3
 800c386:	089b      	lsrs	r3, r3, #2
 800c388:	3301      	adds	r3, #1
 800c38a:	e000      	b.n	800c38e <dir_register+0x232>
 800c38c:	2301      	movs	r3, #1
 800c38e:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c390:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7fe ffcb 	bl	800b32e <dir_alloc>
 800c398:	4603      	mov	r3, r0
 800c39a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c39e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d14f      	bne.n	800c446 <dir_register+0x2ea>
 800c3a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800c3ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d049      	beq.n	800c446 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3b8:	015b      	lsls	r3, r3, #5
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7fe fe3b 	bl	800b03a <dir_sdi>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c3ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d139      	bne.n	800c446 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3340      	adds	r3, #64	@ 0x40
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fa0e 	bl	800b7f8 <sum_sfn>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3ea:	f7fd ff99 	bl	800a320 <move_window>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800c3f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d123      	bne.n	800c444 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c3fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3fe:	6918      	ldr	r0, [r3, #16]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c404:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c406:	b2da      	uxtb	r2, r3
 800c408:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c40c:	f7ff f8fe 	bl	800b60c <put_lfn>
				fs->wflag = 1;
 800c410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c412:	2201      	movs	r2, #1
 800c414:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c416:	2100      	movs	r1, #0
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7fe fea2 	bl	800b162 <dir_next>
 800c41e:	4603      	mov	r3, r0
 800c420:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800c424:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10c      	bne.n	800c446 <dir_register+0x2ea>
 800c42c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c42e:	3b01      	subs	r3, #1
 800c430:	673b      	str	r3, [r7, #112]	@ 0x70
 800c432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1d4      	bne.n	800c3e2 <dir_register+0x286>
 800c438:	e005      	b.n	800c446 <dir_register+0x2ea>
 800c43a:	bf00      	nop
 800c43c:	88888889 	.word	0x88888889
 800c440:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c444:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c446:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d128      	bne.n	800c4a0 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c452:	4619      	mov	r1, r3
 800c454:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c456:	f7fd ff63 	bl	800a320 <move_window>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c460:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c464:	2b00      	cmp	r3, #0
 800c466:	d11b      	bne.n	800c4a0 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c46c:	2220      	movs	r2, #32
 800c46e:	2100      	movs	r1, #0
 800c470:	4618      	mov	r0, r3
 800c472:	f7fd fd47 	bl	8009f04 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3340      	adds	r3, #64	@ 0x40
 800c47e:	220b      	movs	r2, #11
 800c480:	4619      	mov	r1, r3
 800c482:	f7fd fd1e 	bl	8009ec2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c490:	330c      	adds	r3, #12
 800c492:	f002 0218 	and.w	r2, r2, #24
 800c496:	b2d2      	uxtb	r2, r2
 800c498:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c49c:	2201      	movs	r2, #1
 800c49e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c4a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3780      	adds	r7, #128	@ 0x80
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c4ae:	bf00      	nop

0800c4b0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c4b0:	b5b0      	push	{r4, r5, r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 80d9 	beq.w	800c682 <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	d106      	bne.n	800c4e6 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7ff fa11 	bl	800b906 <get_xdir_info>
		return;
 800c4e4:	e0ce      	b.n	800c684 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	d032      	beq.n	800c556 <get_fileinfo+0xa6>
			i = j = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	61bb      	str	r3, [r7, #24]
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c4f8:	e01b      	b.n	800c532 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c4fa:	89fb      	ldrh	r3, [r7, #14]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f002 f9cc 	bl	800e89c <ff_convert>
 800c504:	4603      	mov	r3, r0
 800c506:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c508:	89fb      	ldrh	r3, [r7, #14]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <get_fileinfo+0x64>
 800c50e:	2300      	movs	r3, #0
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	e01a      	b.n	800c54a <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	2bfe      	cmp	r3, #254	@ 0xfe
 800c518:	d902      	bls.n	800c520 <get_fileinfo+0x70>
 800c51a:	2300      	movs	r3, #0
 800c51c:	61fb      	str	r3, [r7, #28]
 800c51e:	e014      	b.n	800c54a <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	61fa      	str	r2, [r7, #28]
 800c526:	89fa      	ldrh	r2, [r7, #14]
 800c528:	b2d1      	uxtb	r1, r2
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	4413      	add	r3, r2
 800c52e:	460a      	mov	r2, r1
 800c530:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	1c59      	adds	r1, r3, #1
 800c53a:	61b9      	str	r1, [r7, #24]
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	4413      	add	r3, r2
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	81fb      	strh	r3, [r7, #14]
 800c544:	89fb      	ldrh	r3, [r7, #14]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1d7      	bne.n	800c4fa <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	4413      	add	r3, r2
 800c550:	331a      	adds	r3, #26
 800c552:	2200      	movs	r2, #0
 800c554:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	61bb      	str	r3, [r7, #24]
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	4413      	add	r3, r2
 800c564:	331a      	adds	r3, #26
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c56a:	e04d      	b.n	800c608 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	1c59      	adds	r1, r3, #1
 800c574:	61f9      	str	r1, [r7, #28]
 800c576:	4413      	add	r3, r2
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	2b20      	cmp	r3, #32
 800c580:	d041      	beq.n	800c606 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c582:	7dfb      	ldrb	r3, [r7, #23]
 800c584:	2b05      	cmp	r3, #5
 800c586:	d101      	bne.n	800c58c <get_fileinfo+0xdc>
 800c588:	23e5      	movs	r3, #229	@ 0xe5
 800c58a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2b09      	cmp	r3, #9
 800c590:	d10f      	bne.n	800c5b2 <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c592:	89bb      	ldrh	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d105      	bne.n	800c5a4 <get_fileinfo+0xf4>
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	4413      	add	r3, r2
 800c59e:	331a      	adds	r3, #26
 800c5a0:	222e      	movs	r2, #46	@ 0x2e
 800c5a2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	61ba      	str	r2, [r7, #24]
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	222e      	movs	r2, #46	@ 0x2e
 800c5b0:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	330d      	adds	r3, #13
 800c5ba:	7dfa      	ldrb	r2, [r7, #23]
 800c5bc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c5be:	89bb      	ldrh	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d11c      	bne.n	800c5fe <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	2b40      	cmp	r3, #64	@ 0x40
 800c5c8:	d913      	bls.n	800c5f2 <get_fileinfo+0x142>
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
 800c5cc:	2b5a      	cmp	r3, #90	@ 0x5a
 800c5ce:	d810      	bhi.n	800c5f2 <get_fileinfo+0x142>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5d4:	330c      	adds	r3, #12
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	2b08      	cmp	r3, #8
 800c5de:	d901      	bls.n	800c5e4 <get_fileinfo+0x134>
 800c5e0:	2310      	movs	r3, #16
 800c5e2:	e000      	b.n	800c5e6 <get_fileinfo+0x136>
 800c5e4:	2308      	movs	r3, #8
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	3320      	adds	r3, #32
 800c5f0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	331a      	adds	r3, #26
 800c5fa:	7dfa      	ldrb	r2, [r7, #23]
 800c5fc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	3301      	adds	r3, #1
 800c602:	61bb      	str	r3, [r7, #24]
 800c604:	e000      	b.n	800c608 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c606:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	2b0a      	cmp	r3, #10
 800c60c:	d9ae      	bls.n	800c56c <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800c60e:	89bb      	ldrh	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10d      	bne.n	800c630 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	4413      	add	r3, r2
 800c61a:	331a      	adds	r3, #26
 800c61c:	2200      	movs	r2, #0
 800c61e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c624:	330c      	adds	r3, #12
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d101      	bne.n	800c630 <get_fileinfo+0x180>
 800c62c:	2300      	movs	r3, #0
 800c62e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	4413      	add	r3, r2
 800c636:	330d      	adds	r3, #13
 800c638:	2200      	movs	r2, #0
 800c63a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c640:	7ada      	ldrb	r2, [r3, #11]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64a:	331c      	adds	r3, #28
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fd fa6b 	bl	8009b28 <ld_dword>
 800c652:	4603      	mov	r3, r0
 800c654:	2200      	movs	r2, #0
 800c656:	461c      	mov	r4, r3
 800c658:	4615      	mov	r5, r2
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c664:	3316      	adds	r3, #22
 800c666:	4618      	mov	r0, r3
 800c668:	f7fd fa5e 	bl	8009b28 <ld_dword>
 800c66c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	b29a      	uxth	r2, r3
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	815a      	strh	r2, [r3, #10]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	0c1b      	lsrs	r3, r3, #16
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	811a      	strh	r2, [r3, #8]
 800c680:	e000      	b.n	800c684 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c682:	bf00      	nop
}
 800c684:	3720      	adds	r7, #32
 800c686:	46bd      	mov	sp, r7
 800c688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c68c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08a      	sub	sp, #40	@ 0x28
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	613b      	str	r3, [r7, #16]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	61ba      	str	r2, [r7, #24]
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c6ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6bc:	2b1f      	cmp	r3, #31
 800c6be:	d940      	bls.n	800c742 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c6c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6c4:	d006      	beq.n	800c6d4 <create_name+0x48>
 800c6c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c6ca:	d110      	bne.n	800c6ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c6cc:	e002      	b.n	800c6d4 <create_name+0x48>
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	61bb      	str	r3, [r7, #24]
 800c6d4:	693a      	ldr	r2, [r7, #16]
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	4413      	add	r3, r2
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6de:	d0f6      	beq.n	800c6ce <create_name+0x42>
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c6ea:	d0f0      	beq.n	800c6ce <create_name+0x42>
			break;
 800c6ec:	e02a      	b.n	800c744 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2bfe      	cmp	r3, #254	@ 0xfe
 800c6f2:	d901      	bls.n	800c6f8 <create_name+0x6c>
 800c6f4:	2306      	movs	r3, #6
 800c6f6:	e17d      	b.n	800c9f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c6f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c6fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c700:	2101      	movs	r1, #1
 800c702:	4618      	mov	r0, r3
 800c704:	f002 f8ca 	bl	800e89c <ff_convert>
 800c708:	4603      	mov	r3, r0
 800c70a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c70c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <create_name+0x8a>
 800c712:	2306      	movs	r3, #6
 800c714:	e16e      	b.n	800c9f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c718:	2b7f      	cmp	r3, #127	@ 0x7f
 800c71a:	d809      	bhi.n	800c730 <create_name+0xa4>
 800c71c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c71e:	4619      	mov	r1, r3
 800c720:	488d      	ldr	r0, [pc, #564]	@ (800c958 <create_name+0x2cc>)
 800c722:	f7fd fc31 	bl	8009f88 <chk_chr>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <create_name+0xa4>
 800c72c:	2306      	movs	r3, #6
 800c72e:	e161      	b.n	800c9f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	617a      	str	r2, [r7, #20]
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c73e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c740:	e7b4      	b.n	800c6ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c742:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	441a      	add	r2, r3
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c74e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c750:	2b1f      	cmp	r3, #31
 800c752:	d801      	bhi.n	800c758 <create_name+0xcc>
 800c754:	2304      	movs	r3, #4
 800c756:	e000      	b.n	800c75a <create_name+0xce>
 800c758:	2300      	movs	r3, #0
 800c75a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c75e:	e011      	b.n	800c784 <create_name+0xf8>
		w = lfn[di - 1];
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c766:	3b01      	subs	r3, #1
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	4413      	add	r3, r2
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c774:	2b20      	cmp	r3, #32
 800c776:	d002      	beq.n	800c77e <create_name+0xf2>
 800c778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c77a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c77c:	d106      	bne.n	800c78c <create_name+0x100>
		di--;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	3b01      	subs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1ea      	bne.n	800c760 <create_name+0xd4>
 800c78a:	e000      	b.n	800c78e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c78c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	2200      	movs	r2, #0
 800c798:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <create_name+0x118>
 800c7a0:	2306      	movs	r3, #6
 800c7a2:	e127      	b.n	800c9f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3340      	adds	r3, #64	@ 0x40
 800c7a8:	220b      	movs	r2, #11
 800c7aa:	2120      	movs	r1, #32
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fd fba9 	bl	8009f04 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61bb      	str	r3, [r7, #24]
 800c7b6:	e002      	b.n	800c7be <create_name+0x132>
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	61bb      	str	r3, [r7, #24]
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	2b20      	cmp	r3, #32
 800c7ca:	d0f5      	beq.n	800c7b8 <create_name+0x12c>
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7d8:	d0ee      	beq.n	800c7b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d009      	beq.n	800c7f4 <create_name+0x168>
 800c7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7e4:	f043 0303 	orr.w	r3, r3, #3
 800c7e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c7ec:	e002      	b.n	800c7f4 <create_name+0x168>
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d009      	beq.n	800c80e <create_name+0x182>
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c800:	3b01      	subs	r3, #1
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4413      	add	r3, r2
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c80c:	d1ef      	bne.n	800c7ee <create_name+0x162>

	i = b = 0; ni = 8;
 800c80e:	2300      	movs	r3, #0
 800c810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c814:	2300      	movs	r3, #0
 800c816:	623b      	str	r3, [r7, #32]
 800c818:	2308      	movs	r3, #8
 800c81a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	61ba      	str	r2, [r7, #24]
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c82c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 8090 	beq.w	800c954 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c836:	2b20      	cmp	r3, #32
 800c838:	d006      	beq.n	800c848 <create_name+0x1bc>
 800c83a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c83e:	d10a      	bne.n	800c856 <create_name+0x1ca>
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	429a      	cmp	r2, r3
 800c846:	d006      	beq.n	800c856 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c84c:	f043 0303 	orr.w	r3, r3, #3
 800c850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c854:	e07d      	b.n	800c952 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c856:	6a3a      	ldr	r2, [r7, #32]
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d203      	bcs.n	800c866 <create_name+0x1da>
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	429a      	cmp	r2, r3
 800c864:	d123      	bne.n	800c8ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	2b0b      	cmp	r3, #11
 800c86a:	d106      	bne.n	800c87a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c86c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c870:	f043 0303 	orr.w	r3, r3, #3
 800c874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c878:	e075      	b.n	800c966 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d005      	beq.n	800c88e <create_name+0x202>
 800c882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c886:	f043 0303 	orr.w	r3, r3, #3
 800c88a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	429a      	cmp	r2, r3
 800c894:	d866      	bhi.n	800c964 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	61bb      	str	r3, [r7, #24]
 800c89a:	2308      	movs	r3, #8
 800c89c:	623b      	str	r3, [r7, #32]
 800c89e:	230b      	movs	r3, #11
 800c8a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c8a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c8ac:	e051      	b.n	800c952 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c8ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8b2:	d914      	bls.n	800c8de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c8b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f001 ffef 	bl	800e89c <ff_convert>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c8c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d004      	beq.n	800c8d2 <create_name+0x246>
 800c8c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8ca:	3b80      	subs	r3, #128	@ 0x80
 800c8cc:	4a23      	ldr	r2, [pc, #140]	@ (800c95c <create_name+0x2d0>)
 800c8ce:	5cd3      	ldrb	r3, [r2, r3]
 800c8d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8d6:	f043 0302 	orr.w	r3, r3, #2
 800c8da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c8de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d007      	beq.n	800c8f4 <create_name+0x268>
 800c8e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	481d      	ldr	r0, [pc, #116]	@ (800c960 <create_name+0x2d4>)
 800c8ea:	f7fd fb4d 	bl	8009f88 <chk_chr>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d008      	beq.n	800c906 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c8f4:	235f      	movs	r3, #95	@ 0x5f
 800c8f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8fc:	f043 0303 	orr.w	r3, r3, #3
 800c900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c904:	e01b      	b.n	800c93e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c908:	2b40      	cmp	r3, #64	@ 0x40
 800c90a:	d909      	bls.n	800c920 <create_name+0x294>
 800c90c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c90e:	2b5a      	cmp	r3, #90	@ 0x5a
 800c910:	d806      	bhi.n	800c920 <create_name+0x294>
					b |= 2;
 800c912:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c916:	f043 0302 	orr.w	r3, r3, #2
 800c91a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c91e:	e00e      	b.n	800c93e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c922:	2b60      	cmp	r3, #96	@ 0x60
 800c924:	d90b      	bls.n	800c93e <create_name+0x2b2>
 800c926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c928:	2b7a      	cmp	r3, #122	@ 0x7a
 800c92a:	d808      	bhi.n	800c93e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c92c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c930:	f043 0301 	orr.w	r3, r3, #1
 800c934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c938:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c93a:	3b20      	subs	r3, #32
 800c93c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	623a      	str	r2, [r7, #32]
 800c944:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c946:	b2d1      	uxtb	r1, r2
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	4413      	add	r3, r2
 800c94c:	460a      	mov	r2, r1
 800c94e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c952:	e763      	b.n	800c81c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c954:	bf00      	nop
 800c956:	e006      	b.n	800c966 <create_name+0x2da>
 800c958:	0800ff34 	.word	0x0800ff34
 800c95c:	0800ffb4 	.word	0x0800ffb4
 800c960:	0800ff40 	.word	0x0800ff40
			if (si > di) break;			/* No extension */
 800c964:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c96c:	2be5      	cmp	r3, #229	@ 0xe5
 800c96e:	d103      	bne.n	800c978 <create_name+0x2ec>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2205      	movs	r2, #5
 800c974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	2b08      	cmp	r3, #8
 800c97c:	d104      	bne.n	800c988 <create_name+0x2fc>
 800c97e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c98c:	f003 030c 	and.w	r3, r3, #12
 800c990:	2b0c      	cmp	r3, #12
 800c992:	d005      	beq.n	800c9a0 <create_name+0x314>
 800c994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c998:	f003 0303 	and.w	r3, r3, #3
 800c99c:	2b03      	cmp	r3, #3
 800c99e:	d105      	bne.n	800c9ac <create_name+0x320>
 800c9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9a4:	f043 0302 	orr.w	r3, r3, #2
 800c9a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9b0:	f003 0302 	and.w	r3, r3, #2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d117      	bne.n	800c9e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c9b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9bc:	f003 0303 	and.w	r3, r3, #3
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d105      	bne.n	800c9d0 <create_name+0x344>
 800c9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9c8:	f043 0310 	orr.w	r3, r3, #16
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c9d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9d4:	f003 030c 	and.w	r3, r3, #12
 800c9d8:	2b04      	cmp	r3, #4
 800c9da:	d105      	bne.n	800c9e8 <create_name+0x35c>
 800c9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9e0:	f043 0308 	orr.w	r3, r3, #8
 800c9e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c9ee:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800c9f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3728      	adds	r7, #40	@ 0x28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ca10:	e002      	b.n	800ca18 <follow_path+0x1c>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	3301      	adds	r3, #1
 800ca16:	603b      	str	r3, [r7, #0]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca1e:	d0f8      	beq.n	800ca12 <follow_path+0x16>
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b5c      	cmp	r3, #92	@ 0x5c
 800ca26:	d0f4      	beq.n	800ca12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	2200      	movs	r2, #0
 800ca32:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b1f      	cmp	r3, #31
 800ca3a:	d80a      	bhi.n	800ca52 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2280      	movs	r2, #128	@ 0x80
 800ca40:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800ca44:	2100      	movs	r1, #0
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7fe faf7 	bl	800b03a <dir_sdi>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	75fb      	strb	r3, [r7, #23]
 800ca50:	e07d      	b.n	800cb4e <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca52:	463b      	mov	r3, r7
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff fe18 	bl	800c68c <create_name>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d16e      	bne.n	800cb44 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff fa4d 	bl	800bf06 <dir_find>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ca76:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ca78:	7dfb      	ldrb	r3, [r7, #23]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d161      	bne.n	800cb48 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ca84:	7afb      	ldrb	r3, [r7, #11]
 800ca86:	f003 0304 	and.w	r3, r3, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d15c      	bne.n	800cb48 <follow_path+0x14c>
 800ca8e:	2305      	movs	r3, #5
 800ca90:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ca92:	e059      	b.n	800cb48 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ca94:	7afb      	ldrb	r3, [r7, #11]
 800ca96:	f003 0304 	and.w	r3, r3, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d156      	bne.n	800cb4c <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	799b      	ldrb	r3, [r3, #6]
 800caa2:	f003 0310 	and.w	r3, r3, #16
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d102      	bne.n	800cab0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800caaa:	2305      	movs	r3, #5
 800caac:	75fb      	strb	r3, [r7, #23]
 800caae:	e04e      	b.n	800cb4e <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b04      	cmp	r3, #4
 800cab6:	d130      	bne.n	800cb1a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	689a      	ldr	r2, [r3, #8]
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cac6:	4613      	mov	r3, r2
 800cac8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	79d2      	ldrb	r2, [r2, #7]
 800cad0:	431a      	orrs	r2, r3
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	695b      	ldr	r3, [r3, #20]
 800cae2:	3334      	adds	r3, #52	@ 0x34
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fd f81f 	bl	8009b28 <ld_dword>
 800caea:	4602      	mov	r2, r0
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	3321      	adds	r3, #33	@ 0x21
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	3338      	adds	r3, #56	@ 0x38
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd f830 	bl	8009b6e <ld_qword>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	6939      	ldr	r1, [r7, #16]
 800cb14:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cb18:	e79b      	b.n	800ca52 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	8992      	ldrh	r2, [r2, #12]
 800cb28:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb2c:	fb00 f202 	mul.w	r2, r0, r2
 800cb30:	1a9b      	subs	r3, r3, r2
 800cb32:	440b      	add	r3, r1
 800cb34:	4619      	mov	r1, r3
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7fe fc55 	bl	800b3e6 <ld_clust>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb42:	e786      	b.n	800ca52 <follow_path+0x56>
			if (res != FR_OK) break;
 800cb44:	bf00      	nop
 800cb46:	e002      	b.n	800cb4e <follow_path+0x152>
				break;
 800cb48:	bf00      	nop
 800cb4a:	e000      	b.n	800cb4e <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cb4c:	bf00      	nop
			}
		}
	}

	return res;
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cb60:	f04f 33ff 	mov.w	r3, #4294967295
 800cb64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d031      	beq.n	800cbd2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	617b      	str	r3, [r7, #20]
 800cb74:	e002      	b.n	800cb7c <get_ldnumber+0x24>
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b1f      	cmp	r3, #31
 800cb82:	d903      	bls.n	800cb8c <get_ldnumber+0x34>
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb8a:	d1f4      	bne.n	800cb76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb92:	d11c      	bne.n	800cbce <get_ldnumber+0x76>
			tp = *path;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	60fa      	str	r2, [r7, #12]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	3b30      	subs	r3, #48	@ 0x30
 800cba4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b09      	cmp	r3, #9
 800cbaa:	d80e      	bhi.n	800cbca <get_ldnumber+0x72>
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d10a      	bne.n	800cbca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d107      	bne.n	800cbca <get_ldnumber+0x72>
					vol = (int)i;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	617b      	str	r3, [r7, #20]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	697a      	ldr	r2, [r7, #20]
 800cbc8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	e002      	b.n	800cbd4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cbce:	2300      	movs	r3, #0
 800cbd0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cbd2:	693b      	ldr	r3, [r7, #16]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	371c      	adds	r7, #28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	70da      	strb	r2, [r3, #3]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cbf8:	6839      	ldr	r1, [r7, #0]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7fd fb90 	bl	800a320 <move_window>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d001      	beq.n	800cc0a <check_fs+0x2a>
 800cc06:	2304      	movs	r3, #4
 800cc08:	e044      	b.n	800cc94 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	333c      	adds	r3, #60	@ 0x3c
 800cc0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fc ff70 	bl	8009af8 <ld_word>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d001      	beq.n	800cc28 <check_fs+0x48>
 800cc24:	2303      	movs	r3, #3
 800cc26:	e035      	b.n	800cc94 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc2e:	2be9      	cmp	r3, #233	@ 0xe9
 800cc30:	d009      	beq.n	800cc46 <check_fs+0x66>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc38:	2beb      	cmp	r3, #235	@ 0xeb
 800cc3a:	d11e      	bne.n	800cc7a <check_fs+0x9a>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc42:	2b90      	cmp	r3, #144	@ 0x90
 800cc44:	d119      	bne.n	800cc7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	333c      	adds	r3, #60	@ 0x3c
 800cc4a:	3336      	adds	r3, #54	@ 0x36
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fc ff6b 	bl	8009b28 <ld_dword>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cc58:	4a10      	ldr	r2, [pc, #64]	@ (800cc9c <check_fs+0xbc>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d101      	bne.n	800cc62 <check_fs+0x82>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e018      	b.n	800cc94 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	333c      	adds	r3, #60	@ 0x3c
 800cc66:	3352      	adds	r3, #82	@ 0x52
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fc ff5d 	bl	8009b28 <ld_dword>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4a0b      	ldr	r2, [pc, #44]	@ (800cca0 <check_fs+0xc0>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d101      	bne.n	800cc7a <check_fs+0x9a>
 800cc76:	2300      	movs	r3, #0
 800cc78:	e00c      	b.n	800cc94 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	333c      	adds	r3, #60	@ 0x3c
 800cc7e:	220b      	movs	r2, #11
 800cc80:	4908      	ldr	r1, [pc, #32]	@ (800cca4 <check_fs+0xc4>)
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd f959 	bl	8009f3a <mem_cmp>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <check_fs+0xb2>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e000      	b.n	800cc94 <check_fs+0xb4>
#endif
	return 2;
 800cc92:	2302      	movs	r3, #2
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	00544146 	.word	0x00544146
 800cca0:	33544146 	.word	0x33544146
 800cca4:	0800ff48 	.word	0x0800ff48

0800cca8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccac:	b09c      	sub	sp, #112	@ 0x70
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	61f8      	str	r0, [r7, #28]
 800ccb2:	61b9      	str	r1, [r7, #24]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ccbe:	69f8      	ldr	r0, [r7, #28]
 800ccc0:	f7ff ff4a 	bl	800cb58 <get_ldnumber>
 800ccc4:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	da01      	bge.n	800ccd0 <find_volume+0x28>
 800cccc:	230b      	movs	r3, #11
 800ccce:	e376      	b.n	800d3be <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ccd0:	4aa6      	ldr	r2, [pc, #664]	@ (800cf6c <find_volume+0x2c4>)
 800ccd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ccda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <find_volume+0x3c>
 800cce0:	230c      	movs	r3, #12
 800cce2:	e36c      	b.n	800d3be <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cce8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	f023 0301 	bic.w	r3, r3, #1
 800ccf0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ccf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d01a      	beq.n	800cd30 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800ccfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccfc:	785b      	ldrb	r3, [r3, #1]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fc fe5a 	bl	80099b8 <disk_status>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10c      	bne.n	800cd30 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d007      	beq.n	800cd2c <find_volume+0x84>
 800cd1c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cd20:	f003 0304 	and.w	r3, r3, #4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800cd28:	230a      	movs	r3, #10
 800cd2a:	e348      	b.n	800d3be <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e346      	b.n	800d3be <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cd30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cd36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd3c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cd3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd40:	785b      	ldrb	r3, [r3, #1]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fc fe52 	bl	80099ec <disk_initialize>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e32f      	b.n	800d3be <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d007      	beq.n	800cd74 <find_volume+0xcc>
 800cd64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d001      	beq.n	800cd74 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800cd70:	230a      	movs	r3, #10
 800cd72:	e324      	b.n	800d3be <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cd74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd76:	7858      	ldrb	r0, [r3, #1]
 800cd78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd7a:	330c      	adds	r3, #12
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	2102      	movs	r1, #2
 800cd80:	f7fc fe9c 	bl	8009abc <disk_ioctl>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <find_volume+0xe6>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e317      	b.n	800d3be <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd90:	899b      	ldrh	r3, [r3, #12]
 800cd92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd96:	d80d      	bhi.n	800cdb4 <find_volume+0x10c>
 800cd98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd9a:	899b      	ldrh	r3, [r3, #12]
 800cd9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cda0:	d308      	bcc.n	800cdb4 <find_volume+0x10c>
 800cda2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cda4:	899b      	ldrh	r3, [r3, #12]
 800cda6:	461a      	mov	r2, r3
 800cda8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdaa:	899b      	ldrh	r3, [r3, #12]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	4013      	ands	r3, r2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <find_volume+0x110>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e302      	b.n	800d3be <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cdbc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cdbe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cdc0:	f7ff ff0e 	bl	800cbe0 <check_fs>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cdca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d14d      	bne.n	800ce6e <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdd6:	e020      	b.n	800ce1a <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cdd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdda:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800cdde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cde0:	011b      	lsls	r3, r3, #4
 800cde2:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cde6:	4413      	add	r3, r2
 800cde8:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cdea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdec:	3304      	adds	r3, #4
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d006      	beq.n	800ce02 <find_volume+0x15a>
 800cdf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fc fe95 	bl	8009b28 <ld_dword>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	e000      	b.n	800ce04 <find_volume+0x15c>
 800ce02:	2200      	movs	r2, #0
 800ce04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	3360      	adds	r3, #96	@ 0x60
 800ce0a:	f107 0110 	add.w	r1, r7, #16
 800ce0e:	440b      	add	r3, r1
 800ce10:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce16:	3301      	adds	r3, #1
 800ce18:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d9db      	bls.n	800cdd8 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ce20:	2300      	movs	r3, #0
 800ce22:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800ce24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d002      	beq.n	800ce30 <find_volume+0x188>
 800ce2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ce30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	3360      	adds	r3, #96	@ 0x60
 800ce36:	f107 0210 	add.w	r2, r7, #16
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ce40:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <find_volume+0x1ac>
 800ce48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ce4a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ce4c:	f7ff fec8 	bl	800cbe0 <check_fs>
 800ce50:	4603      	mov	r3, r0
 800ce52:	e000      	b.n	800ce56 <find_volume+0x1ae>
 800ce54:	2303      	movs	r3, #3
 800ce56:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ce5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d905      	bls.n	800ce6e <find_volume+0x1c6>
 800ce62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce64:	3301      	adds	r3, #1
 800ce66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d9e0      	bls.n	800ce30 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ce6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce72:	2b04      	cmp	r3, #4
 800ce74:	d101      	bne.n	800ce7a <find_volume+0x1d2>
 800ce76:	2301      	movs	r3, #1
 800ce78:	e2a1      	b.n	800d3be <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d901      	bls.n	800ce86 <find_volume+0x1de>
 800ce82:	230d      	movs	r3, #13
 800ce84:	e29b      	b.n	800d3be <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ce86:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	f040 8101 	bne.w	800d092 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ce90:	230b      	movs	r3, #11
 800ce92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce94:	e002      	b.n	800ce9c <find_volume+0x1f4>
 800ce96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce98:	3301      	adds	r3, #1
 800ce9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce9e:	2b3f      	cmp	r3, #63	@ 0x3f
 800cea0:	d806      	bhi.n	800ceb0 <find_volume+0x208>
 800cea2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cea6:	4413      	add	r3, r2
 800cea8:	333c      	adds	r3, #60	@ 0x3c
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0f2      	beq.n	800ce96 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ceb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ceb2:	2b3f      	cmp	r3, #63	@ 0x3f
 800ceb4:	d801      	bhi.n	800ceba <find_volume+0x212>
 800ceb6:	230d      	movs	r3, #13
 800ceb8:	e281      	b.n	800d3be <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ceba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cebc:	333c      	adds	r3, #60	@ 0x3c
 800cebe:	3368      	adds	r3, #104	@ 0x68
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fc fe19 	bl	8009af8 <ld_word>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cecc:	d001      	beq.n	800ced2 <find_volume+0x22a>
 800cece:	230d      	movs	r3, #13
 800ced0:	e275      	b.n	800d3be <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ced2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ced4:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800ced8:	461a      	mov	r2, r3
 800ceda:	2301      	movs	r3, #1
 800cedc:	4093      	lsls	r3, r2
 800cede:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cee0:	8992      	ldrh	r2, [r2, #12]
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d001      	beq.n	800ceea <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800cee6:	230d      	movs	r3, #13
 800cee8:	e269      	b.n	800d3be <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ceea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceec:	333c      	adds	r3, #60	@ 0x3c
 800ceee:	3348      	adds	r3, #72	@ 0x48
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fc fe3c 	bl	8009b6e <ld_qword>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cefc:	2000      	movs	r0, #0
 800cefe:	60b9      	str	r1, [r7, #8]
 800cf00:	60f8      	str	r0, [r7, #12]
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	1851      	adds	r1, r2, r1
 800cf06:	6039      	str	r1, [r7, #0]
 800cf08:	68f9      	ldr	r1, [r7, #12]
 800cf0a:	eb43 0101 	adc.w	r1, r3, r1
 800cf0e:	6079      	str	r1, [r7, #4]
 800cf10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf14:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cf18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d301      	bcc.n	800cf24 <find_volume+0x27c>
 800cf20:	230d      	movs	r3, #13
 800cf22:	e24c      	b.n	800d3be <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cf24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf26:	333c      	adds	r3, #60	@ 0x3c
 800cf28:	3354      	adds	r3, #84	@ 0x54
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fc fdfc 	bl	8009b28 <ld_dword>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf34:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cf36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf38:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800cf3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cf40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf42:	789b      	ldrb	r3, [r3, #2]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d001      	beq.n	800cf4c <find_volume+0x2a4>
 800cf48:	230d      	movs	r3, #13
 800cf4a:	e238      	b.n	800d3be <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4e:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800cf52:	461a      	mov	r2, r3
 800cf54:	2301      	movs	r3, #1
 800cf56:	4093      	lsls	r3, r2
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cf5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf60:	895b      	ldrh	r3, [r3, #10]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d104      	bne.n	800cf70 <find_volume+0x2c8>
 800cf66:	230d      	movs	r3, #13
 800cf68:	e229      	b.n	800d3be <find_volume+0x716>
 800cf6a:	bf00      	nop
 800cf6c:	200022c8 	.word	0x200022c8

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cf70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf72:	333c      	adds	r3, #60	@ 0x3c
 800cf74:	335c      	adds	r3, #92	@ 0x5c
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fc fdd6 	bl	8009b28 <ld_dword>
 800cf7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cf7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf80:	4a99      	ldr	r2, [pc, #612]	@ (800d1e8 <find_volume+0x540>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d901      	bls.n	800cf8a <find_volume+0x2e2>
 800cf86:	230d      	movs	r3, #13
 800cf88:	e219      	b.n	800d3be <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800cf8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf8c:	1c9a      	adds	r2, r3, #2
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf90:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cf92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf96:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cf98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf9a:	333c      	adds	r3, #60	@ 0x3c
 800cf9c:	3358      	adds	r3, #88	@ 0x58
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fc fdc2 	bl	8009b28 <ld_dword>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfa8:	441a      	add	r2, r3
 800cfaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfac:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cfae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfb0:	333c      	adds	r3, #60	@ 0x3c
 800cfb2:	3350      	adds	r3, #80	@ 0x50
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fc fdb7 	bl	8009b28 <ld_dword>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfbe:	441a      	add	r2, r3
 800cfc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc2:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cfc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfc8:	2200      	movs	r2, #0
 800cfca:	469a      	mov	sl, r3
 800cfcc:	4693      	mov	fp, r2
 800cfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd0:	895b      	ldrh	r3, [r3, #10]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd6:	fb02 f303 	mul.w	r3, r2, r3
 800cfda:	2200      	movs	r2, #0
 800cfdc:	4698      	mov	r8, r3
 800cfde:	4691      	mov	r9, r2
 800cfe0:	eb1a 0408 	adds.w	r4, sl, r8
 800cfe4:	eb4b 0509 	adc.w	r5, fp, r9
 800cfe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cfec:	42a2      	cmp	r2, r4
 800cfee:	41ab      	sbcs	r3, r5
 800cff0:	d201      	bcs.n	800cff6 <find_volume+0x34e>
 800cff2:	230d      	movs	r3, #13
 800cff4:	e1e3      	b.n	800d3be <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800cff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cff8:	333c      	adds	r3, #60	@ 0x3c
 800cffa:	3360      	adds	r3, #96	@ 0x60
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fc fd93 	bl	8009b28 <ld_dword>
 800d002:	4602      	mov	r2, r0
 800d004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d006:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d00c:	4619      	mov	r1, r3
 800d00e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d010:	f7fd fa24 	bl	800a45c <clust2sect>
 800d014:	4603      	mov	r3, r0
 800d016:	4619      	mov	r1, r3
 800d018:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d01a:	f7fd f981 	bl	800a320 <move_window>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <find_volume+0x380>
 800d024:	2301      	movs	r3, #1
 800d026:	e1ca      	b.n	800d3be <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d028:	2300      	movs	r3, #0
 800d02a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d02c:	e015      	b.n	800d05a <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d02e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d032:	4413      	add	r3, r2
 800d034:	333c      	adds	r3, #60	@ 0x3c
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b81      	cmp	r3, #129	@ 0x81
 800d03a:	d10b      	bne.n	800d054 <find_volume+0x3ac>
 800d03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d03e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d044:	3314      	adds	r3, #20
 800d046:	4413      	add	r3, r2
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fc fd6d 	bl	8009b28 <ld_dword>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b02      	cmp	r3, #2
 800d052:	d009      	beq.n	800d068 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d056:	3320      	adds	r3, #32
 800d058:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d05c:	899b      	ldrh	r3, [r3, #12]
 800d05e:	461a      	mov	r2, r3
 800d060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d062:	4293      	cmp	r3, r2
 800d064:	d3e3      	bcc.n	800d02e <find_volume+0x386>
 800d066:	e000      	b.n	800d06a <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d068:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d06c:	899b      	ldrh	r3, [r3, #12]
 800d06e:	461a      	mov	r2, r3
 800d070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d072:	4293      	cmp	r3, r2
 800d074:	d101      	bne.n	800d07a <find_volume+0x3d2>
 800d076:	230d      	movs	r3, #13
 800d078:	e1a1      	b.n	800d3be <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d07c:	f04f 32ff 	mov.w	r2, #4294967295
 800d080:	61da      	str	r2, [r3, #28]
 800d082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d084:	69da      	ldr	r2, [r3, #28]
 800d086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d088:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d08a:	2304      	movs	r3, #4
 800d08c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800d090:	e17d      	b.n	800d38e <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d094:	333c      	adds	r3, #60	@ 0x3c
 800d096:	330b      	adds	r3, #11
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fc fd2d 	bl	8009af8 <ld_word>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a4:	899b      	ldrh	r3, [r3, #12]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d001      	beq.n	800d0ae <find_volume+0x406>
 800d0aa:	230d      	movs	r3, #13
 800d0ac:	e187      	b.n	800d3be <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0b0:	333c      	adds	r3, #60	@ 0x3c
 800d0b2:	3316      	adds	r3, #22
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fc fd1f 	bl	8009af8 <ld_word>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d0be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d106      	bne.n	800d0d2 <find_volume+0x42a>
 800d0c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0c6:	333c      	adds	r3, #60	@ 0x3c
 800d0c8:	3324      	adds	r3, #36	@ 0x24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fc fd2c 	bl	8009b28 <ld_dword>
 800d0d0:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800d0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0d6:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d0d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0da:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800d0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e4:	789b      	ldrb	r3, [r3, #2]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d005      	beq.n	800d0f6 <find_volume+0x44e>
 800d0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ec:	789b      	ldrb	r3, [r3, #2]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d001      	beq.n	800d0f6 <find_volume+0x44e>
 800d0f2:	230d      	movs	r3, #13
 800d0f4:	e163      	b.n	800d3be <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0f8:	789b      	ldrb	r3, [r3, #2]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d106:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800d10a:	461a      	mov	r2, r3
 800d10c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d10e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d112:	895b      	ldrh	r3, [r3, #10]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d008      	beq.n	800d12a <find_volume+0x482>
 800d118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d11a:	895b      	ldrh	r3, [r3, #10]
 800d11c:	461a      	mov	r2, r3
 800d11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d120:	895b      	ldrh	r3, [r3, #10]
 800d122:	3b01      	subs	r3, #1
 800d124:	4013      	ands	r3, r2
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <find_volume+0x486>
 800d12a:	230d      	movs	r3, #13
 800d12c:	e147      	b.n	800d3be <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d130:	333c      	adds	r3, #60	@ 0x3c
 800d132:	3311      	adds	r3, #17
 800d134:	4618      	mov	r0, r3
 800d136:	f7fc fcdf 	bl	8009af8 <ld_word>
 800d13a:	4603      	mov	r3, r0
 800d13c:	461a      	mov	r2, r3
 800d13e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d140:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d144:	891b      	ldrh	r3, [r3, #8]
 800d146:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d148:	8992      	ldrh	r2, [r2, #12]
 800d14a:	0952      	lsrs	r2, r2, #5
 800d14c:	b292      	uxth	r2, r2
 800d14e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d152:	fb01 f202 	mul.w	r2, r1, r2
 800d156:	1a9b      	subs	r3, r3, r2
 800d158:	b29b      	uxth	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <find_volume+0x4ba>
 800d15e:	230d      	movs	r3, #13
 800d160:	e12d      	b.n	800d3be <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d164:	333c      	adds	r3, #60	@ 0x3c
 800d166:	3313      	adds	r3, #19
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fc fcc5 	bl	8009af8 <ld_word>
 800d16e:	4603      	mov	r3, r0
 800d170:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d174:	2b00      	cmp	r3, #0
 800d176:	d106      	bne.n	800d186 <find_volume+0x4de>
 800d178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d17a:	333c      	adds	r3, #60	@ 0x3c
 800d17c:	3320      	adds	r3, #32
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fc fcd2 	bl	8009b28 <ld_dword>
 800d184:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d188:	333c      	adds	r3, #60	@ 0x3c
 800d18a:	330e      	adds	r3, #14
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fc fcb3 	bl	8009af8 <ld_word>
 800d192:	4603      	mov	r3, r0
 800d194:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d198:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <find_volume+0x4fc>
 800d1a0:	230d      	movs	r3, #13
 800d1a2:	e10c      	b.n	800d3be <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d1a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d1a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1aa:	4413      	add	r3, r2
 800d1ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1ae:	8911      	ldrh	r1, [r2, #8]
 800d1b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1b2:	8992      	ldrh	r2, [r2, #12]
 800d1b4:	0952      	lsrs	r2, r2, #5
 800d1b6:	b292      	uxth	r2, r2
 800d1b8:	fbb1 f2f2 	udiv	r2, r1, r2
 800d1bc:	b292      	uxth	r2, r2
 800d1be:	4413      	add	r3, r2
 800d1c0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d1c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d1c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d201      	bcs.n	800d1ce <find_volume+0x526>
 800d1ca:	230d      	movs	r3, #13
 800d1cc:	e0f7      	b.n	800d3be <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d1ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d1d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1d6:	8952      	ldrh	r2, [r2, #10]
 800d1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d103      	bne.n	800d1ec <find_volume+0x544>
 800d1e4:	230d      	movs	r3, #13
 800d1e6:	e0ea      	b.n	800d3be <find_volume+0x716>
 800d1e8:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d802      	bhi.n	800d202 <find_volume+0x55a>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d204:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d208:	4293      	cmp	r3, r2
 800d20a:	d802      	bhi.n	800d212 <find_volume+0x56a>
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d214:	1c9a      	adds	r2, r3, #2
 800d216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d218:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d21c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d21e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d220:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d224:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d226:	441a      	add	r2, r3
 800d228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d22a:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d22c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d230:	441a      	add	r2, r3
 800d232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d234:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800d236:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d23a:	2b03      	cmp	r3, #3
 800d23c:	d11e      	bne.n	800d27c <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d240:	333c      	adds	r3, #60	@ 0x3c
 800d242:	332a      	adds	r3, #42	@ 0x2a
 800d244:	4618      	mov	r0, r3
 800d246:	f7fc fc57 	bl	8009af8 <ld_word>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <find_volume+0x5ac>
 800d250:	230d      	movs	r3, #13
 800d252:	e0b4      	b.n	800d3be <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d256:	891b      	ldrh	r3, [r3, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <find_volume+0x5b8>
 800d25c:	230d      	movs	r3, #13
 800d25e:	e0ae      	b.n	800d3be <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d262:	333c      	adds	r3, #60	@ 0x3c
 800d264:	332c      	adds	r3, #44	@ 0x2c
 800d266:	4618      	mov	r0, r3
 800d268:	f7fc fc5e 	bl	8009b28 <ld_dword>
 800d26c:	4602      	mov	r2, r0
 800d26e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d270:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d27a:	e01f      	b.n	800d2bc <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d27e:	891b      	ldrh	r3, [r3, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <find_volume+0x5e0>
 800d284:	230d      	movs	r3, #13
 800d286:	e09a      	b.n	800d3be <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d28c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d28e:	441a      	add	r2, r3
 800d290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d292:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d294:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d103      	bne.n	800d2a4 <find_volume+0x5fc>
 800d29c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	e00a      	b.n	800d2ba <find_volume+0x612>
 800d2a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2a6:	6a1a      	ldr	r2, [r3, #32]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	4413      	add	r3, r2
 800d2ae:	085a      	lsrs	r2, r3, #1
 800d2b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2b2:	6a1b      	ldr	r3, [r3, #32]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d2ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2c2:	899b      	ldrh	r3, [r3, #12]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2c8:	440b      	add	r3, r1
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2ce:	8989      	ldrh	r1, [r1, #12]
 800d2d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d201      	bcs.n	800d2dc <find_volume+0x634>
 800d2d8:	230d      	movs	r3, #13
 800d2da:	e070      	b.n	800d3be <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d2dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2de:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e2:	61da      	str	r2, [r3, #28]
 800d2e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e6:	69da      	ldr	r2, [r3, #28]
 800d2e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d2ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ee:	2280      	movs	r2, #128	@ 0x80
 800d2f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d2f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d149      	bne.n	800d38e <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2fc:	333c      	adds	r3, #60	@ 0x3c
 800d2fe:	3330      	adds	r3, #48	@ 0x30
 800d300:	4618      	mov	r0, r3
 800d302:	f7fc fbf9 	bl	8009af8 <ld_word>
 800d306:	4603      	mov	r3, r0
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d140      	bne.n	800d38e <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d30c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d30e:	3301      	adds	r3, #1
 800d310:	4619      	mov	r1, r3
 800d312:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d314:	f7fd f804 	bl	800a320 <move_window>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d137      	bne.n	800d38e <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800d31e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d320:	2200      	movs	r2, #0
 800d322:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d326:	333c      	adds	r3, #60	@ 0x3c
 800d328:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fc fbe3 	bl	8009af8 <ld_word>
 800d332:	4603      	mov	r3, r0
 800d334:	461a      	mov	r2, r3
 800d336:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d127      	bne.n	800d38e <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d340:	333c      	adds	r3, #60	@ 0x3c
 800d342:	4618      	mov	r0, r3
 800d344:	f7fc fbf0 	bl	8009b28 <ld_dword>
 800d348:	4603      	mov	r3, r0
 800d34a:	4a1f      	ldr	r2, [pc, #124]	@ (800d3c8 <find_volume+0x720>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d11e      	bne.n	800d38e <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d352:	333c      	adds	r3, #60	@ 0x3c
 800d354:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fc fbe5 	bl	8009b28 <ld_dword>
 800d35e:	4603      	mov	r3, r0
 800d360:	4a1a      	ldr	r2, [pc, #104]	@ (800d3cc <find_volume+0x724>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d113      	bne.n	800d38e <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d368:	333c      	adds	r3, #60	@ 0x3c
 800d36a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fc fbda 	bl	8009b28 <ld_dword>
 800d374:	4602      	mov	r2, r0
 800d376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d378:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d37a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d37c:	333c      	adds	r3, #60	@ 0x3c
 800d37e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d382:	4618      	mov	r0, r3
 800d384:	f7fc fbd0 	bl	8009b28 <ld_dword>
 800d388:	4602      	mov	r2, r0
 800d38a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d38c:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d390:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d394:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d396:	4b0e      	ldr	r3, [pc, #56]	@ (800d3d0 <find_volume+0x728>)
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	3301      	adds	r3, #1
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d0 <find_volume+0x728>)
 800d3a0:	801a      	strh	r2, [r3, #0]
 800d3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d3d0 <find_volume+0x728>)
 800d3a4:	881a      	ldrh	r2, [r3, #0]
 800d3a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3a8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d3aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ac:	4a09      	ldr	r2, [pc, #36]	@ (800d3d4 <find_volume+0x72c>)
 800d3ae:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b2:	4a09      	ldr	r2, [pc, #36]	@ (800d3d8 <find_volume+0x730>)
 800d3b4:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d3b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d3b8:	f7fc ff4a 	bl	800a250 <clear_lock>
#endif
	return FR_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3770      	adds	r7, #112	@ 0x70
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3c8:	41615252 	.word	0x41615252
 800d3cc:	61417272 	.word	0x61417272
 800d3d0:	200022cc 	.word	0x200022cc
 800d3d4:	20002550 	.word	0x20002550
 800d3d8:	200022f0 	.word	0x200022f0

0800d3dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d3e6:	2309      	movs	r3, #9
 800d3e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01c      	beq.n	800d42a <validate+0x4e>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d018      	beq.n	800d42a <validate+0x4e>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d013      	beq.n	800d42a <validate+0x4e>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	889a      	ldrh	r2, [r3, #4]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	88db      	ldrh	r3, [r3, #6]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d10c      	bne.n	800d42a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	785b      	ldrb	r3, [r3, #1]
 800d416:	4618      	mov	r0, r3
 800d418:	f7fc face 	bl	80099b8 <disk_status>
 800d41c:	4603      	mov	r3, r0
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <validate+0x4e>
			res = FR_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d102      	bne.n	800d436 <validate+0x5a>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	e000      	b.n	800d438 <validate+0x5c>
 800d436:	2300      	movs	r3, #0
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	6013      	str	r3, [r2, #0]
	return res;
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
	...

0800d448 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d45a:	f107 0310 	add.w	r3, r7, #16
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff fb7a 	bl	800cb58 <get_ldnumber>
 800d464:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	da01      	bge.n	800d470 <f_mount+0x28>
 800d46c:	230b      	movs	r3, #11
 800d46e:	e02b      	b.n	800d4c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d470:	4a17      	ldr	r2, [pc, #92]	@ (800d4d0 <f_mount+0x88>)
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d478:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d005      	beq.n	800d48c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d480:	69b8      	ldr	r0, [r7, #24]
 800d482:	f7fc fee5 	bl	800a250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2200      	movs	r2, #0
 800d496:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	490d      	ldr	r1, [pc, #52]	@ (800d4d0 <f_mount+0x88>)
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <f_mount+0x66>
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d001      	beq.n	800d4b2 <f_mount+0x6a>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e00a      	b.n	800d4c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d4b2:	f107 010c 	add.w	r1, r7, #12
 800d4b6:	f107 0308 	add.w	r3, r7, #8
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff fbf3 	bl	800cca8 <find_volume>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3720      	adds	r7, #32
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	200022c8 	.word	0x200022c8

0800d4d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4d8:	b0a8      	sub	sp, #160	@ 0xa0
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4de:	6239      	str	r1, [r7, #32]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <f_open+0x1a>
 800d4ea:	2309      	movs	r3, #9
 800d4ec:	e2bc      	b.n	800da68 <f_open+0x594>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d4ee:	7ffb      	ldrb	r3, [r7, #31]
 800d4f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4f4:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d4f6:	7ffb      	ldrb	r3, [r7, #31]
 800d4f8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d4fc:	f107 0020 	add.w	r0, r7, #32
 800d500:	461a      	mov	r2, r3
 800d502:	f7ff fbd1 	bl	800cca8 <find_volume>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800d50c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d510:	2b00      	cmp	r3, #0
 800d512:	f040 82a0 	bne.w	800da56 <f_open+0x582>
		dj.obj.fs = fs;
 800d516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d518:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d51a:	6a3b      	ldr	r3, [r7, #32]
 800d51c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d520:	4619      	mov	r1, r3
 800d522:	4610      	mov	r0, r2
 800d524:	f7ff fa6a 	bl	800c9fc <follow_path>
 800d528:	4603      	mov	r3, r0
 800d52a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d52e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d532:	2b00      	cmp	r3, #0
 800d534:	d118      	bne.n	800d568 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d536:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800d53a:	b25b      	sxtb	r3, r3
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	da03      	bge.n	800d548 <f_open+0x74>
				res = FR_INVALID_NAME;
 800d540:	2306      	movs	r3, #6
 800d542:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d546:	e00f      	b.n	800d568 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d548:	7ffb      	ldrb	r3, [r7, #31]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	bf8c      	ite	hi
 800d54e:	2301      	movhi	r3, #1
 800d550:	2300      	movls	r3, #0
 800d552:	b2db      	uxtb	r3, r3
 800d554:	461a      	mov	r2, r3
 800d556:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d55a:	4611      	mov	r1, r2
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fc fd2f 	bl	8009fc0 <chk_lock>
 800d562:	4603      	mov	r3, r0
 800d564:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d568:	7ffb      	ldrb	r3, [r7, #31]
 800d56a:	f003 031c 	and.w	r3, r3, #28
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 8117 	beq.w	800d7a2 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800d574:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d017      	beq.n	800d5ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d57c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d580:	2b04      	cmp	r3, #4
 800d582:	d10e      	bne.n	800d5a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d584:	f7fc fd78 	bl	800a078 <enq_lock>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <f_open+0xc8>
 800d58e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe fde2 	bl	800c15c <dir_register>
 800d598:	4603      	mov	r3, r0
 800d59a:	e000      	b.n	800d59e <f_open+0xca>
 800d59c:	2312      	movs	r3, #18
 800d59e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d5a2:	7ffb      	ldrb	r3, [r7, #31]
 800d5a4:	f043 0308 	orr.w	r3, r3, #8
 800d5a8:	77fb      	strb	r3, [r7, #31]
 800d5aa:	e011      	b.n	800d5d0 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d5ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d5b0:	f003 0311 	and.w	r3, r3, #17
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <f_open+0xec>
					res = FR_DENIED;
 800d5b8:	2307      	movs	r3, #7
 800d5ba:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d5be:	e007      	b.n	800d5d0 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d5c0:	7ffb      	ldrb	r3, [r7, #31]
 800d5c2:	f003 0304 	and.w	r3, r3, #4
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <f_open+0xfc>
 800d5ca:	2308      	movs	r3, #8
 800d5cc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d5d0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f040 8100 	bne.w	800d7da <f_open+0x306>
 800d5da:	7ffb      	ldrb	r3, [r7, #31]
 800d5dc:	f003 0308 	and.w	r3, r3, #8
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 80fa 	beq.w	800d7da <f_open+0x306>
				dw = GET_FATTIME();
 800d5e6:	f7f8 fffb 	bl	80065e0 <get_fattime>
 800d5ea:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	2b04      	cmp	r3, #4
 800d5f4:	f040 8085 	bne.w	800d702 <f_open+0x22e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d5f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	3334      	adds	r3, #52	@ 0x34
 800d604:	4618      	mov	r0, r3
 800d606:	f7fc fa8f 	bl	8009b28 <ld_dword>
 800d60a:	4602      	mov	r2, r0
 800d60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	3338      	adds	r3, #56	@ 0x38
 800d616:	4618      	mov	r0, r3
 800d618:	f7fc faa9 	bl	8009b6e <ld_qword>
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	3321      	adds	r3, #33	@ 0x21
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d632:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	2200      	movs	r2, #0
 800d638:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	3308      	adds	r3, #8
 800d640:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d644:	4618      	mov	r0, r3
 800d646:	f7fc fb88 	bl	8009d5a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	f103 0214 	add.w	r2, r3, #20
 800d652:	2300      	movs	r3, #0
 800d654:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	330c      	adds	r3, #12
 800d65c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d660:	4618      	mov	r0, r3
 800d662:	f7fc fb7a 	bl	8009d5a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	f103 0215 	add.w	r2, r3, #21
 800d66e:	2300      	movs	r3, #0
 800d670:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	1d1a      	adds	r2, r3, #4
 800d678:	2320      	movs	r3, #32
 800d67a:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	3334      	adds	r3, #52	@ 0x34
 800d682:	2100      	movs	r1, #0
 800d684:	4618      	mov	r0, r3
 800d686:	f7fc fb68 	bl	8009d5a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	f04f 0300 	mov.w	r3, #0
 800d69a:	4608      	mov	r0, r1
 800d69c:	f7fc fb89 	bl	8009db2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a2:	695b      	ldr	r3, [r3, #20]
 800d6a4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d6a8:	f04f 0200 	mov.w	r2, #0
 800d6ac:	f04f 0300 	mov.w	r3, #0
 800d6b0:	4608      	mov	r0, r1
 800d6b2:	f7fc fb7e 	bl	8009db2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800d6be:	2301      	movs	r3, #1
 800d6c0:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800d6c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe fa94 	bl	800bbf4 <store_xdir>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d6d2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d17f      	bne.n	800d7da <f_open+0x306>
 800d6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d07b      	beq.n	800d7da <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d6e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	f7fd faa4 	bl	800ac38 <remove_chain>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	6193      	str	r3, [r2, #24]
 800d700:	e06b      	b.n	800d7da <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d704:	330e      	adds	r3, #14
 800d706:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fc fb25 	bl	8009d5a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d712:	3316      	adds	r3, #22
 800d714:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fc fb1e 	bl	8009d5a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d71e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d720:	f103 020b 	add.w	r2, r3, #11
 800d724:	2320      	movs	r3, #32
 800d726:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d72a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7fd fe59 	bl	800b3e6 <ld_clust>
 800d734:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d738:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d73a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d73c:	2200      	movs	r2, #0
 800d73e:	4619      	mov	r1, r3
 800d740:	f7fd fe70 	bl	800b424 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d746:	331c      	adds	r3, #28
 800d748:	2100      	movs	r1, #0
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fc fb05 	bl	8009d5a <st_dword>
					fs->wflag = 1;
 800d750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d752:	2301      	movs	r3, #1
 800d754:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d756:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d03d      	beq.n	800d7da <f_open+0x306>
						dw = fs->winsect;
 800d75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d762:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800d766:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d770:	4618      	mov	r0, r3
 800d772:	f7fd fa61 	bl	800ac38 <remove_chain>
 800d776:	4603      	mov	r3, r0
 800d778:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800d77c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d780:	2b00      	cmp	r3, #0
 800d782:	d12a      	bne.n	800d7da <f_open+0x306>
							res = move_window(fs, dw);
 800d784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d786:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fc fdc8 	bl	800a320 <move_window>
 800d790:	4603      	mov	r3, r0
 800d792:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d79c:	3b01      	subs	r3, #1
 800d79e:	6193      	str	r3, [r2, #24]
 800d7a0:	e01b      	b.n	800d7da <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d7a2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d117      	bne.n	800d7da <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d7aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d7ae:	f003 0310 	and.w	r3, r3, #16
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <f_open+0x2ea>
					res = FR_NO_FILE;
 800d7b6:	2304      	movs	r3, #4
 800d7b8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d7bc:	e00d      	b.n	800d7da <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d7be:	7ffb      	ldrb	r3, [r7, #31]
 800d7c0:	f003 0302 	and.w	r3, r3, #2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d008      	beq.n	800d7da <f_open+0x306>
 800d7c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <f_open+0x306>
						res = FR_DENIED;
 800d7d4:	2307      	movs	r3, #7
 800d7d6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d7da:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d126      	bne.n	800d830 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d7e2:	7ffb      	ldrb	r3, [r7, #31]
 800d7e4:	f003 0308 	and.w	r3, r3, #8
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <f_open+0x320>
				mode |= FA_MODIFIED;
 800d7ec:	7ffb      	ldrb	r3, [r7, #31]
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7f2:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fa:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800d7fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d800:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d802:	7ffb      	ldrb	r3, [r7, #31]
 800d804:	2b01      	cmp	r3, #1
 800d806:	bf8c      	ite	hi
 800d808:	2301      	movhi	r3, #1
 800d80a:	2300      	movls	r3, #0
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	461a      	mov	r2, r3
 800d810:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f7fc fc50 	bl	800a0bc <inc_lock>
 800d81c:	4602      	mov	r2, r0
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <f_open+0x35c>
 800d82a:	2302      	movs	r3, #2
 800d82c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d830:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d834:	2b00      	cmp	r3, #0
 800d836:	f040 810e 	bne.w	800da56 <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b04      	cmp	r3, #4
 800d840:	d12d      	bne.n	800d89e <f_open+0x3ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d84c:	4613      	mov	r3, r2
 800d84e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d852:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d856:	431a      	orrs	r2, r3
 800d858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85a:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d85c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d860:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	3334      	adds	r3, #52	@ 0x34
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fc f95d 	bl	8009b28 <ld_dword>
 800d86e:	4602      	mov	r2, r0
 800d870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d872:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	3338      	adds	r3, #56	@ 0x38
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fc f977 	bl	8009b6e <ld_qword>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d886:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	3321      	adds	r3, #33	@ 0x21
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	f003 0302 	and.w	r3, r3, #2
 800d896:	b2da      	uxtb	r2, r3
 800d898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89a:	71da      	strb	r2, [r3, #7]
 800d89c:	e016      	b.n	800d8cc <f_open+0x3f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d89e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	f7fd fd9e 	bl	800b3e6 <ld_clust>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d8b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8b2:	331c      	adds	r3, #28
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fc f937 	bl	8009b28 <ld_dword>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2200      	movs	r2, #0
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	617a      	str	r2, [r7, #20]
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d8c8:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d8d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8da:	88da      	ldrh	r2, [r3, #6]
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8de:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e2:	7ffa      	ldrb	r2, [r7, #31]
 800d8e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d8f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8f8:	f04f 0200 	mov.w	r2, #0
 800d8fc:	f04f 0300 	mov.w	r3, #0
 800d900:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d906:	3354      	adds	r3, #84	@ 0x54
 800d908:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fc faf8 	bl	8009f04 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d914:	7ffb      	ldrb	r3, [r7, #31]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 809b 	beq.w	800da56 <f_open+0x582>
 800d920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d922:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d926:	4313      	orrs	r3, r2
 800d928:	f000 8095 	beq.w	800da56 <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d934:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93a:	895b      	ldrh	r3, [r3, #10]
 800d93c:	461a      	mov	r2, r3
 800d93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d940:	899b      	ldrh	r3, [r3, #12]
 800d942:	fb02 f303 	mul.w	r3, r2, r3
 800d946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d954:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d958:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800d95c:	e023      	b.n	800d9a6 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800d964:	4618      	mov	r0, r3
 800d966:	f7fc fd99 	bl	800a49c <get_fat>
 800d96a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800d96e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d972:	2b01      	cmp	r3, #1
 800d974:	d802      	bhi.n	800d97c <f_open+0x4a8>
 800d976:	2302      	movs	r3, #2
 800d978:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d97c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d984:	d102      	bne.n	800d98c <f_open+0x4b8>
 800d986:	2301      	movs	r3, #1
 800d988:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d98c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d990:	2200      	movs	r2, #0
 800d992:	4698      	mov	r8, r3
 800d994:	4691      	mov	r9, r2
 800d996:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800d99a:	ebb2 0a08 	subs.w	sl, r2, r8
 800d99e:	eb63 0b09 	sbc.w	fp, r3, r9
 800d9a2:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
 800d9a6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10a      	bne.n	800d9c4 <f_open+0x4f0>
 800d9ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	461c      	mov	r4, r3
 800d9b6:	4615      	mov	r5, r2
 800d9b8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800d9bc:	4294      	cmp	r4, r2
 800d9be:	eb75 0303 	sbcs.w	r3, r5, r3
 800d9c2:	d3cc      	bcc.n	800d95e <f_open+0x48a>
				}
				fp->clust = clst;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d9ca:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d9cc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d140      	bne.n	800da56 <f_open+0x582>
 800d9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d6:	899b      	ldrh	r3, [r3, #12]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	2200      	movs	r2, #0
 800d9dc:	60bb      	str	r3, [r7, #8]
 800d9de:	60fa      	str	r2, [r7, #12]
 800d9e0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800d9e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d9e8:	f7f2 ff60 	bl	80008ac <__aeabi_uldivmod>
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	d032      	beq.n	800da56 <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fc fd30 	bl	800a45c <clust2sect>
 800d9fc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800da00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800da04:	2b00      	cmp	r3, #0
 800da06:	d103      	bne.n	800da10 <f_open+0x53c>
						res = FR_INT_ERR;
 800da08:	2302      	movs	r3, #2
 800da0a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800da0e:	e022      	b.n	800da56 <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	899b      	ldrh	r3, [r3, #12]
 800da14:	b29b      	uxth	r3, r3
 800da16:	2200      	movs	r2, #0
 800da18:	603b      	str	r3, [r7, #0]
 800da1a:	607a      	str	r2, [r7, #4]
 800da1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da20:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800da24:	f7f2 ff42 	bl	80008ac <__aeabi_uldivmod>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800da30:	441a      	add	r2, r3
 800da32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da34:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800da36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da38:	7858      	ldrb	r0, [r3, #1]
 800da3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800da40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da44:	2301      	movs	r3, #1
 800da46:	f7fb fff9 	bl	8009a3c <disk_read>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <f_open+0x582>
 800da50:	2301      	movs	r3, #1
 800da52:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800da56:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <f_open+0x590>
 800da5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da60:	2200      	movs	r2, #0
 800da62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800da64:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800da68:	4618      	mov	r0, r3
 800da6a:	37a0      	adds	r7, #160	@ 0xa0
 800da6c:	46bd      	mov	sp, r7
 800da6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800da72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800da72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da76:	b091      	sub	sp, #68	@ 0x44
 800da78:	af00      	add	r7, sp, #0
 800da7a:	61f8      	str	r0, [r7, #28]
 800da7c:	61b9      	str	r1, [r7, #24]
 800da7e:	617a      	str	r2, [r7, #20]
 800da80:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	f107 0220 	add.w	r2, r7, #32
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff fca1 	bl	800d3dc <validate>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800daa0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d108      	bne.n	800daba <f_write+0x48>
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800daae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dab2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <f_write+0x4e>
 800daba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dabe:	e1aa      	b.n	800de16 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dac6:	f003 0302 	and.w	r3, r3, #2
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <f_write+0x60>
 800dace:	2307      	movs	r3, #7
 800dad0:	e1a1      	b.n	800de16 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b04      	cmp	r3, #4
 800dad8:	f000 818d 	beq.w	800ddf6 <f_write+0x384>
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	18d1      	adds	r1, r2, r3
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800daec:	4613      	mov	r3, r2
 800daee:	4299      	cmp	r1, r3
 800daf0:	f080 8181 	bcs.w	800ddf6 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dafa:	4613      	mov	r3, r2
 800dafc:	43db      	mvns	r3, r3
 800dafe:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800db00:	e179      	b.n	800ddf6 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	899b      	ldrh	r3, [r3, #12]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	2200      	movs	r2, #0
 800db10:	461d      	mov	r5, r3
 800db12:	4616      	mov	r6, r2
 800db14:	462a      	mov	r2, r5
 800db16:	4633      	mov	r3, r6
 800db18:	f7f2 fec8 	bl	80008ac <__aeabi_uldivmod>
 800db1c:	4313      	orrs	r3, r2
 800db1e:	f040 810a 	bne.w	800dd36 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800db28:	6a3b      	ldr	r3, [r7, #32]
 800db2a:	899b      	ldrh	r3, [r3, #12]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	2200      	movs	r2, #0
 800db30:	60bb      	str	r3, [r7, #8]
 800db32:	60fa      	str	r2, [r7, #12]
 800db34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db38:	f7f2 feb8 	bl	80008ac <__aeabi_uldivmod>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	895b      	ldrh	r3, [r3, #10]
 800db44:	3b01      	subs	r3, #1
 800db46:	4013      	ands	r3, r2
 800db48:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800db4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d146      	bne.n	800dbde <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db56:	4313      	orrs	r3, r2
 800db58:	d10c      	bne.n	800db74 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800db60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db62:	2b00      	cmp	r3, #0
 800db64:	d11a      	bne.n	800db9c <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	2100      	movs	r1, #0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fd f918 	bl	800ada0 <create_chain>
 800db70:	63b8      	str	r0, [r7, #56]	@ 0x38
 800db72:	e013      	b.n	800db9c <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d007      	beq.n	800db8c <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db82:	69f8      	ldr	r0, [r7, #28]
 800db84:	f7fd fa0d 	bl	800afa2 <clmt_clust>
 800db88:	63b8      	str	r0, [r7, #56]	@ 0x38
 800db8a:	e007      	b.n	800db9c <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800db8c:	69fa      	ldr	r2, [r7, #28]
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f7fd f903 	bl	800ada0 <create_chain>
 800db9a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800db9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 812e 	beq.w	800de00 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d105      	bne.n	800dbb6 <f_write+0x144>
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	2202      	movs	r2, #2
 800dbae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dbb2:	2302      	movs	r3, #2
 800dbb4:	e12f      	b.n	800de16 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d105      	bne.n	800dbca <f_write+0x158>
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e125      	b.n	800de16 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbce:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d102      	bne.n	800dbde <f_write+0x16c>
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbdc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dbe4:	b25b      	sxtb	r3, r3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	da1b      	bge.n	800dc22 <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	7858      	ldrb	r0, [r3, #1]
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f7fb ff3f 	bl	8009a7c <disk_write>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d005      	beq.n	800dc10 <f_write+0x19e>
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e102      	b.n	800de16 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dc22:	6a3a      	ldr	r2, [r7, #32]
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc28:	4619      	mov	r1, r3
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	f7fc fc16 	bl	800a45c <clust2sect>
 800dc30:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d105      	bne.n	800dc44 <f_write+0x1d2>
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc40:	2302      	movs	r3, #2
 800dc42:	e0e8      	b.n	800de16 <f_write+0x3a4>
			sect += csect;
 800dc44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc48:	4413      	add	r3, r2
 800dc4a:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	899b      	ldrh	r3, [r3, #12]
 800dc50:	461a      	mov	r2, r3
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc58:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d046      	beq.n	800dcee <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dc60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc64:	4413      	add	r3, r2
 800dc66:	6a3a      	ldr	r2, [r7, #32]
 800dc68:	8952      	ldrh	r2, [r2, #10]
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d905      	bls.n	800dc7a <f_write+0x208>
					cc = fs->csize - csect;
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	895b      	ldrh	r3, [r3, #10]
 800dc72:	461a      	mov	r2, r3
 800dc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc76:	1ad3      	subs	r3, r2, r3
 800dc78:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc7a:	6a3b      	ldr	r3, [r7, #32]
 800dc7c:	7858      	ldrb	r0, [r3, #1]
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc84:	f7fb fefa 	bl	8009a7c <disk_write>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d005      	beq.n	800dc9a <f_write+0x228>
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc96:	2301      	movs	r3, #1
 800dc98:	e0bd      	b.n	800de16 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d91a      	bls.n	800dcde <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	6a3a      	ldr	r2, [r7, #32]
 800dcb8:	8992      	ldrh	r2, [r2, #12]
 800dcba:	fb02 f303 	mul.w	r3, r2, r3
 800dcbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcc0:	18d1      	adds	r1, r2, r3
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	899b      	ldrh	r3, [r3, #12]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	f7fc f8fb 	bl	8009ec2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dcd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dcde:	6a3b      	ldr	r3, [r7, #32]
 800dce0:	899b      	ldrh	r3, [r3, #12]
 800dce2:	461a      	mov	r2, r3
 800dce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce6:	fb02 f303 	mul.w	r3, r2, r3
 800dcea:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800dcec:	e058      	b.n	800dda0 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d01b      	beq.n	800dd30 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dd04:	4290      	cmp	r0, r2
 800dd06:	eb71 0303 	sbcs.w	r3, r1, r3
 800dd0a:	d211      	bcs.n	800dd30 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	7858      	ldrb	r0, [r3, #1]
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dd16:	2301      	movs	r3, #1
 800dd18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd1a:	f7fb fe8f 	bl	8009a3c <disk_read>
 800dd1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d005      	beq.n	800dd30 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e072      	b.n	800de16 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd34:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	899b      	ldrh	r3, [r3, #12]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	899b      	ldrh	r3, [r3, #12]
 800dd46:	fbb2 f1f3 	udiv	r1, r2, r3
 800dd4a:	fb01 f303 	mul.w	r3, r1, r3
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	1ac3      	subs	r3, r0, r3
 800dd52:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dd54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d901      	bls.n	800dd60 <f_write+0x2ee>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	899b      	ldrh	r3, [r3, #12]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	2200      	movs	r2, #0
 800dd74:	603b      	str	r3, [r7, #0]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd7c:	f7f2 fd96 	bl	80008ac <__aeabi_uldivmod>
 800dd80:	4613      	mov	r3, r2
 800dd82:	4423      	add	r3, r4
 800dd84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fc f89a 	bl	8009ec2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dda0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dda2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dda4:	4413      	add	r3, r2
 800dda6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ddae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	4688      	mov	r8, r1
 800ddb4:	4681      	mov	r9, r0
 800ddb6:	eb12 0a08 	adds.w	sl, r2, r8
 800ddba:	eb43 0b09 	adc.w	fp, r3, r9
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ddd0:	4290      	cmp	r0, r2
 800ddd2:	eb71 0403 	sbcs.w	r4, r1, r3
 800ddd6:	d201      	bcs.n	800dddc <f_write+0x36a>
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4619      	mov	r1, r3
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dde8:	441a      	add	r2, r3
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	697a      	ldr	r2, [r7, #20]
 800ddf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f47f ae82 	bne.w	800db02 <f_write+0x90>
 800ddfe:	e000      	b.n	800de02 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de00:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3744      	adds	r7, #68	@ 0x44
 800de1a:	46bd      	mov	sp, r7
 800de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de20 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b09a      	sub	sp, #104	@ 0x68
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800de2e:	4611      	mov	r1, r2
 800de30:	4618      	mov	r0, r3
 800de32:	f7ff fad3 	bl	800d3dc <validate>
 800de36:	4603      	mov	r3, r0
 800de38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800de3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de40:	2b00      	cmp	r3, #0
 800de42:	f040 8105 	bne.w	800e050 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 80fd 	beq.w	800e050 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de5c:	b25b      	sxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	da17      	bge.n	800de92 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800de62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de64:	7858      	ldrb	r0, [r3, #1]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de70:	2301      	movs	r3, #1
 800de72:	f7fb fe03 	bl	8009a7c <disk_write>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <f_sync+0x60>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e0e9      	b.n	800e054 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800de92:	f7f8 fba5 	bl	80065e0 <get_fattime>
 800de96:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800de98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b04      	cmp	r3, #4
 800de9e:	f040 808c 	bne.w	800dfba <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fc fe67 	bl	800ab78 <fill_first_frag>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800deb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10a      	bne.n	800dece <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800debe:	f04f 32ff 	mov.w	r2, #4294967295
 800dec2:	4619      	mov	r1, r3
 800dec4:	f7fc fe87 	bl	800abd6 <fill_last_frag>
 800dec8:	4603      	mov	r3, r0
 800deca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800dece:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f040 80bc 	bne.w	800e050 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	f107 0308 	add.w	r3, r7, #8
 800dede:	4611      	mov	r1, r2
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fd fe51 	bl	800bb88 <load_obj_dir>
 800dee6:	4603      	mov	r3, r0
 800dee8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800deec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800def0:	2b00      	cmp	r3, #0
 800def2:	f040 80ad 	bne.w	800e050 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800def6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	3304      	adds	r3, #4
 800defc:	781a      	ldrb	r2, [r3, #0]
 800defe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	3304      	adds	r3, #4
 800df04:	f042 0220 	orr.w	r2, r2, #32
 800df08:	b2d2      	uxtb	r2, r2
 800df0a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	79da      	ldrb	r2, [r3, #7]
 800df10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df12:	695b      	ldr	r3, [r3, #20]
 800df14:	3321      	adds	r3, #33	@ 0x21
 800df16:	f042 0201 	orr.w	r2, r2, #1
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800df1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	4619      	mov	r1, r3
 800df2c:	4610      	mov	r0, r2
 800df2e:	f7fb ff14 	bl	8009d5a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800df32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df34:	695b      	ldr	r3, [r3, #20]
 800df36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df40:	4608      	mov	r0, r1
 800df42:	f7fb ff36 	bl	8009db2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800df46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df54:	4608      	mov	r0, r1
 800df56:	f7fb ff2c 	bl	8009db2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800df5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	330c      	adds	r3, #12
 800df60:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800df62:	4618      	mov	r0, r3
 800df64:	f7fb fef9 	bl	8009d5a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800df68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	3315      	adds	r3, #21
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800df72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	3310      	adds	r3, #16
 800df78:	2100      	movs	r1, #0
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fb feed 	bl	8009d5a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800df80:	f107 0308 	add.w	r3, r7, #8
 800df84:	4618      	mov	r0, r3
 800df86:	f7fd fe35 	bl	800bbf4 <store_xdir>
 800df8a:	4603      	mov	r3, r0
 800df8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800df90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df94:	2b00      	cmp	r3, #0
 800df96:	d15b      	bne.n	800e050 <f_sync+0x230>
							res = sync_fs(fs);
 800df98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fc f9ee 	bl	800a37c <sync_fs>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800dfb8:	e04a      	b.n	800e050 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dfba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	f7fc f9ac 	bl	800a320 <move_window>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800dfce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d13c      	bne.n	800e050 <f_sync+0x230>
					dir = fp->dir_ptr;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfda:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dfdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfde:	330b      	adds	r3, #11
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfe4:	330b      	adds	r3, #11
 800dfe6:	f042 0220 	orr.w	r2, r2, #32
 800dfea:	b2d2      	uxtb	r2, r2
 800dfec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6818      	ldr	r0, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	461a      	mov	r2, r3
 800dff8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800dffa:	f7fd fa13 	bl	800b424 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e000:	f103 001c 	add.w	r0, r3, #28
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e00a:	4613      	mov	r3, r2
 800e00c:	4619      	mov	r1, r3
 800e00e:	f7fb fea4 	bl	8009d5a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e014:	3316      	adds	r3, #22
 800e016:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fb fe9e 	bl	8009d5a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e020:	3312      	adds	r3, #18
 800e022:	2100      	movs	r1, #0
 800e024:	4618      	mov	r0, r3
 800e026:	f7fb fe7d 	bl	8009d24 <st_word>
					fs->wflag = 1;
 800e02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e02c:	2201      	movs	r2, #1
 800e02e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e032:	4618      	mov	r0, r3
 800e034:	f7fc f9a2 	bl	800a37c <sync_fs>
 800e038:	4603      	mov	r3, r0
 800e03a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e050:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e054:	4618      	mov	r0, r3
 800e056:	3768      	adds	r7, #104	@ 0x68
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff fedb 	bl	800de20 <f_sync>
 800e06a:	4603      	mov	r3, r0
 800e06c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d118      	bne.n	800e0a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f107 0208 	add.w	r2, r7, #8
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7ff f9ad 	bl	800d3dc <validate>
 800e082:	4603      	mov	r3, r0
 800e084:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e086:	7bfb      	ldrb	r3, [r7, #15]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10c      	bne.n	800e0a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc f8a1 	bl	800a1d8 <dec_lock>
 800e096:	4603      	mov	r3, r0
 800e098:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <f_opendir+0x14>
 800e0c0:	2309      	movs	r3, #9
 800e0c2:	e09a      	b.n	800e1fa <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e0c8:	f107 010c 	add.w	r1, r7, #12
 800e0cc:	463b      	mov	r3, r7
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fe fde9 	bl	800cca8 <find_volume>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0da:	7dfb      	ldrb	r3, [r7, #23]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f040 8085 	bne.w	800e1ec <f_opendir+0x13c>
		obj->fs = fs;
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7fe fc85 	bl	800c9fc <follow_path>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d172      	bne.n	800e1e2 <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e102:	b25b      	sxtb	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	db47      	blt.n	800e198 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	799b      	ldrb	r3, [r3, #6]
 800e10c:	f003 0310 	and.w	r3, r3, #16
 800e110:	2b00      	cmp	r3, #0
 800e112:	d03f      	beq.n	800e194 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	2b04      	cmp	r3, #4
 800e11a:	d130      	bne.n	800e17e <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	689a      	ldr	r2, [r3, #8]
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e12a:	4613      	mov	r3, r2
 800e12c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e130:	693a      	ldr	r2, [r7, #16]
 800e132:	79d2      	ldrb	r2, [r2, #7]
 800e134:	431a      	orrs	r2, r3
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	3334      	adds	r3, #52	@ 0x34
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fb fced 	bl	8009b28 <ld_dword>
 800e14e:	4602      	mov	r2, r0
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	3338      	adds	r3, #56	@ 0x38
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fb fd07 	bl	8009b6e <ld_qword>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	6939      	ldr	r1, [r7, #16]
 800e166:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	3321      	adds	r3, #33	@ 0x21
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	f003 0302 	and.w	r3, r3, #2
 800e176:	b2da      	uxtb	r2, r3
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	71da      	strb	r2, [r3, #7]
 800e17c:	e00c      	b.n	800e198 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e184:	4619      	mov	r1, r3
 800e186:	4610      	mov	r0, r2
 800e188:	f7fd f92d 	bl	800b3e6 <ld_clust>
 800e18c:	4602      	mov	r2, r0
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	609a      	str	r2, [r3, #8]
 800e192:	e001      	b.n	800e198 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e194:	2305      	movs	r3, #5
 800e196:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e198:	7dfb      	ldrb	r3, [r7, #23]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d121      	bne.n	800e1e2 <f_opendir+0x132>
				obj->id = fs->id;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	88da      	ldrh	r2, [r3, #6]
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7fc ff46 	bl	800b03a <dir_sdi>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e1b2:	7dfb      	ldrb	r3, [r7, #23]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d114      	bne.n	800e1e2 <f_opendir+0x132>
					if (obj->sclust) {
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00d      	beq.n	800e1dc <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7fb ff7a 	bl	800a0bc <inc_lock>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d105      	bne.n	800e1e2 <f_opendir+0x132>
 800e1d6:	2312      	movs	r3, #18
 800e1d8:	75fb      	strb	r3, [r7, #23]
 800e1da:	e002      	b.n	800e1e2 <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	2b04      	cmp	r3, #4
 800e1e6:	d101      	bne.n	800e1ec <f_opendir+0x13c>
 800e1e8:	2305      	movs	r3, #5
 800e1ea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e1ec:	7dfb      	ldrb	r3, [r7, #23]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <f_opendir+0x148>
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3718      	adds	r7, #24
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b084      	sub	sp, #16
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f107 0208 	add.w	r2, r7, #8
 800e210:	4611      	mov	r1, r2
 800e212:	4618      	mov	r0, r3
 800e214:	f7ff f8e2 	bl	800d3dc <validate>
 800e218:	4603      	mov	r3, r0
 800e21a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d110      	bne.n	800e244 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e226:	2b00      	cmp	r3, #0
 800e228:	d006      	beq.n	800e238 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fb ffd2 	bl	800a1d8 <dec_lock>
 800e234:	4603      	mov	r3, r0
 800e236:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e238:	7bfb      	ldrb	r3, [r7, #15]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e244:	7bfb      	ldrb	r3, [r7, #15]
}
 800e246:	4618      	mov	r0, r3
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b084      	sub	sp, #16
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
 800e256:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f107 0208 	add.w	r2, r7, #8
 800e25e:	4611      	mov	r1, r2
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff f8bb 	bl	800d3dc <validate>
 800e266:	4603      	mov	r3, r0
 800e268:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e26a:	7bfb      	ldrb	r3, [r7, #15]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d126      	bne.n	800e2be <f_readdir+0x70>
		if (!fno) {
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e276:	2100      	movs	r1, #0
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7fc fede 	bl	800b03a <dir_sdi>
 800e27e:	4603      	mov	r3, r0
 800e280:	73fb      	strb	r3, [r7, #15]
 800e282:	e01c      	b.n	800e2be <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e284:	2100      	movs	r1, #0
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7fd fd76 	bl	800bd78 <dir_read>
 800e28c:	4603      	mov	r3, r0
 800e28e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e290:	7bfb      	ldrb	r3, [r7, #15]
 800e292:	2b04      	cmp	r3, #4
 800e294:	d101      	bne.n	800e29a <f_readdir+0x4c>
 800e296:	2300      	movs	r3, #0
 800e298:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10e      	bne.n	800e2be <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e2a0:	6839      	ldr	r1, [r7, #0]
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7fe f904 	bl	800c4b0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fc ff59 	bl	800b162 <dir_next>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	d101      	bne.n	800e2be <f_readdir+0x70>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b098      	sub	sp, #96	@ 0x60
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e2d2:	f107 0108 	add.w	r1, r7, #8
 800e2d6:	1d3b      	adds	r3, r7, #4
 800e2d8:	2200      	movs	r2, #0
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe fce4 	bl	800cca8 <find_volume>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d11f      	bne.n	800e32e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	f107 0308 	add.w	r3, r7, #8
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe fb80 	bl	800c9fc <follow_path>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800e302:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e306:	2b00      	cmp	r3, #0
 800e308:	d111      	bne.n	800e32e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e30a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800e30e:	b25b      	sxtb	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	da03      	bge.n	800e31c <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e314:	2306      	movs	r3, #6
 800e316:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e31a:	e008      	b.n	800e32e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d005      	beq.n	800e32e <f_stat+0x66>
 800e322:	f107 0308 	add.w	r3, r7, #8
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe f8c1 	bl	800c4b0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e32e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e332:	4618      	mov	r0, r3
 800e334:	3760      	adds	r7, #96	@ 0x60
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b09a      	sub	sp, #104	@ 0x68
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60f8      	str	r0, [r7, #12]
 800e342:	60b9      	str	r1, [r7, #8]
 800e344:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e346:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800e34a:	f107 030c 	add.w	r3, r7, #12
 800e34e:	2200      	movs	r2, #0
 800e350:	4618      	mov	r0, r3
 800e352:	f7fe fca9 	bl	800cca8 <find_volume>
 800e356:	4603      	mov	r3, r0
 800e358:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e35c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e360:	2b00      	cmp	r3, #0
 800e362:	f040 80eb 	bne.w	800e53c <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e366:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e36e:	69da      	ldr	r2, [r3, #28]
 800e370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	3b02      	subs	r3, #2
 800e376:	429a      	cmp	r2, r3
 800e378:	d804      	bhi.n	800e384 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e37a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e37c:	69da      	ldr	r2, [r3, #28]
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e0db      	b.n	800e53c <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e384:	2300      	movs	r3, #0
 800e386:	663b      	str	r3, [r7, #96]	@ 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d128      	bne.n	800e3e2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e390:	2302      	movs	r3, #2
 800e392:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e396:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800e398:	f107 0310 	add.w	r3, r7, #16
 800e39c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fc f87c 	bl	800a49c <get_fat>
 800e3a4:	6478      	str	r0, [r7, #68]	@ 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e3a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ac:	d103      	bne.n	800e3b6 <f_getfree+0x7c>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e3b4:	e0b5      	b.n	800e522 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d103      	bne.n	800e3c4 <f_getfree+0x8a>
 800e3bc:	2302      	movs	r3, #2
 800e3be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e3c2:	e0ae      	b.n	800e522 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800e3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <f_getfree+0x96>
 800e3ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	663b      	str	r3, [r7, #96]	@ 0x60
				} while (++clst < fs->n_fatent);
 800e3d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3d8:	6a1b      	ldr	r3, [r3, #32]
 800e3da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d3db      	bcc.n	800e398 <f_getfree+0x5e>
 800e3e0:	e09f      	b.n	800e522 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800e3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b04      	cmp	r3, #4
 800e3e8:	d14b      	bne.n	800e482 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800e3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	3b02      	subs	r3, #2
 800e3f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sect = fs->database;
 800e3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	657b      	str	r3, [r7, #84]	@ 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e3fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d10d      	bne.n	800e41e <f_getfree+0xe4>
 800e402:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e40a:	4619      	mov	r1, r3
 800e40c:	f7fb ff88 	bl	800a320 <move_window>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e416:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d17e      	bne.n	800e51c <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e41e:	2308      	movs	r3, #8
 800e420:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e426:	4413      	add	r3, r2
 800e428:	333c      	adds	r3, #60	@ 0x3c
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e430:	e013      	b.n	800e45a <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800e432:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d102      	bne.n	800e444 <f_getfree+0x10a>
 800e43e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e440:	3301      	adds	r3, #1
 800e442:	663b      	str	r3, [r7, #96]	@ 0x60
							bm >>= 1;
 800e444:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e448:	085b      	lsrs	r3, r3, #1
 800e44a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e44e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e450:	3b01      	subs	r3, #1
 800e452:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e456:	3b01      	subs	r3, #1
 800e458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e45a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d002      	beq.n	800e466 <f_getfree+0x12c>
 800e460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1e5      	bne.n	800e432 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800e466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e468:	3301      	adds	r3, #1
 800e46a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e46c:	8992      	ldrh	r2, [r2, #12]
 800e46e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e472:	fb01 f202 	mul.w	r2, r1, r2
 800e476:	1a9b      	subs	r3, r3, r2
 800e478:	657b      	str	r3, [r7, #84]	@ 0x54
					} while (clst);
 800e47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1bd      	bne.n	800e3fc <f_getfree+0xc2>
 800e480:	e04f      	b.n	800e522 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e484:	6a1b      	ldr	r3, [r3, #32]
 800e486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48c:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0; p = 0;
 800e48e:	2300      	movs	r3, #0
 800e490:	657b      	str	r3, [r7, #84]	@ 0x54
 800e492:	2300      	movs	r3, #0
 800e494:	653b      	str	r3, [r7, #80]	@ 0x50
					do {
						if (i == 0) {
 800e496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d113      	bne.n	800e4c4 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800e49c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e49e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	f7fb ff3b 	bl	800a320 <move_window>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							if (res != FR_OK) break;
 800e4b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d133      	bne.n	800e520 <f_getfree+0x1e6>
							p = fs->win;
 800e4b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ba:	333c      	adds	r3, #60	@ 0x3c
 800e4bc:	653b      	str	r3, [r7, #80]	@ 0x50
							i = SS(fs);
 800e4be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4c0:	899b      	ldrh	r3, [r3, #12]
 800e4c2:	657b      	str	r3, [r7, #84]	@ 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800e4c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d10f      	bne.n	800e4ec <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800e4cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e4ce:	f7fb fb13 	bl	8009af8 <ld_word>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <f_getfree+0x1a4>
 800e4d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4da:	3301      	adds	r3, #1
 800e4dc:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 2; i -= 2;
 800e4de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4e0:	3302      	adds	r3, #2
 800e4e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4e6:	3b02      	subs	r3, #2
 800e4e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4ea:	e010      	b.n	800e50e <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e4ec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e4ee:	f7fb fb1b 	bl	8009b28 <ld_dword>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <f_getfree+0x1c8>
 800e4fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4fe:	3301      	adds	r3, #1
 800e500:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 4; i -= 4;
 800e502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e504:	3304      	adds	r3, #4
 800e506:	653b      	str	r3, [r7, #80]	@ 0x50
 800e508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e50a:	3b04      	subs	r3, #4
 800e50c:	657b      	str	r3, [r7, #84]	@ 0x54
						}
					} while (--clst);
 800e50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e510:	3b01      	subs	r3, #1
 800e512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1bd      	bne.n	800e496 <f_getfree+0x15c>
 800e51a:	e002      	b.n	800e522 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e51c:	bf00      	nop
 800e51e:	e000      	b.n	800e522 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800e520:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e526:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e52a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e52c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e530:	791a      	ldrb	r2, [r3, #4]
 800e532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e534:	f042 0201 	orr.w	r2, r2, #1
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e53c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e540:	4618      	mov	r0, r3
 800e542:	3768      	adds	r7, #104	@ 0x68
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800e548:	b5b0      	push	{r4, r5, r7, lr}
 800e54a:	b0a0      	sub	sp, #128	@ 0x80
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e550:	f107 010c 	add.w	r1, r7, #12
 800e554:	1d3b      	adds	r3, r7, #4
 800e556:	2202      	movs	r2, #2
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fe fba5 	bl	800cca8 <find_volume>
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800e568:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f040 8133 	bne.w	800e7d8 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	f107 0310 	add.w	r3, r7, #16
 800e578:	4611      	mov	r1, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe fa3e 	bl	800c9fc <follow_path>
 800e580:	4603      	mov	r3, r0
 800e582:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800e586:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d102      	bne.n	800e594 <f_mkdir+0x4c>
 800e58e:	2308      	movs	r3, #8
 800e590:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800e594:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e598:	2b04      	cmp	r3, #4
 800e59a:	f040 811d 	bne.w	800e7d8 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800e59e:	f107 0310 	add.w	r3, r7, #16
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fc fbfb 	bl	800ada0 <create_chain>
 800e5aa:	66f8      	str	r0, [r7, #108]	@ 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	895b      	ldrh	r3, [r3, #10]
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	899b      	ldrh	r3, [r3, #12]
 800e5b6:	fb02 f303 	mul.w	r3, r2, r3
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	461c      	mov	r4, r3
 800e5be:	4615      	mov	r5, r2
 800e5c0:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800e5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d102      	bne.n	800e5d6 <f_mkdir+0x8e>
 800e5d0:	2307      	movs	r3, #7
 800e5d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800e5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d102      	bne.n	800e5e2 <f_mkdir+0x9a>
 800e5dc:	2302      	movs	r3, #2
 800e5de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e8:	d102      	bne.n	800e5f0 <f_mkdir+0xa8>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800e5f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d106      	bne.n	800e606 <f_mkdir+0xbe>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fb fe4c 	bl	800a298 <sync_window>
 800e600:	4603      	mov	r3, r0
 800e602:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			tm = GET_FATTIME();
 800e606:	f7f7 ffeb 	bl	80065e0 <get_fattime>
 800e60a:	66b8      	str	r0, [r7, #104]	@ 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800e60c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e610:	2b00      	cmp	r3, #0
 800e612:	d170      	bne.n	800e6f6 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fb ff1f 	bl	800a45c <clust2sect>
 800e61e:	6778      	str	r0, [r7, #116]	@ 0x74
				dir = fs->win;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	333c      	adds	r3, #60	@ 0x3c
 800e624:	667b      	str	r3, [r7, #100]	@ 0x64
				mem_set(dir, 0, SS(fs));
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	899b      	ldrh	r3, [r3, #12]
 800e62a:	461a      	mov	r2, r3
 800e62c:	2100      	movs	r1, #0
 800e62e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e630:	f7fb fc68 	bl	8009f04 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b04      	cmp	r3, #4
 800e63a:	d036      	beq.n	800e6aa <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800e63c:	220b      	movs	r2, #11
 800e63e:	2120      	movs	r1, #32
 800e640:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e642:	f7fb fc5f 	bl	8009f04 <mem_set>
					dir[DIR_Name] = '.';
 800e646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e648:	222e      	movs	r2, #46	@ 0x2e
 800e64a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800e64c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e64e:	330b      	adds	r3, #11
 800e650:	2210      	movs	r2, #16
 800e652:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800e654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e656:	3316      	adds	r3, #22
 800e658:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fb fb7d 	bl	8009d5a <st_dword>
					st_clust(fs, dir, dcl);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e664:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e666:	4618      	mov	r0, r3
 800e668:	f7fc fedc 	bl	800b424 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800e66c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e66e:	3320      	adds	r3, #32
 800e670:	2220      	movs	r2, #32
 800e672:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e674:	4618      	mov	r0, r3
 800e676:	f7fb fc24 	bl	8009ec2 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800e67a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e67c:	3321      	adds	r3, #33	@ 0x21
 800e67e:	222e      	movs	r2, #46	@ 0x2e
 800e680:	701a      	strb	r2, [r3, #0]
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	673b      	str	r3, [r7, #112]	@ 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b03      	cmp	r3, #3
 800e68c:	d106      	bne.n	800e69c <f_mkdir+0x154>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e692:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e694:	429a      	cmp	r2, r3
 800e696:	d101      	bne.n	800e69c <f_mkdir+0x154>
 800e698:	2300      	movs	r3, #0
 800e69a:	673b      	str	r3, [r7, #112]	@ 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6a0:	3320      	adds	r3, #32
 800e6a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	f7fc febd 	bl	800b424 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	895b      	ldrh	r3, [r3, #10]
 800e6ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e6b0:	e01c      	b.n	800e6ec <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800e6b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	677a      	str	r2, [r7, #116]	@ 0x74
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fb fde7 	bl	800a298 <sync_window>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
					if (res != FR_OK) break;
 800e6d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10d      	bne.n	800e6f4 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	899b      	ldrh	r3, [r3, #12]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	2100      	movs	r1, #0
 800e6e0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e6e2:	f7fb fc0f 	bl	8009f04 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e6e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e6ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1df      	bne.n	800e6b2 <f_mkdir+0x16a>
 800e6f2:	e000      	b.n	800e6f6 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800e6f4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800e6f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d107      	bne.n	800e70e <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800e6fe:	f107 0310 	add.w	r3, r7, #16
 800e702:	4618      	mov	r0, r3
 800e704:	f7fd fd2a 	bl	800c15c <dir_register>
 800e708:	4603      	mov	r3, r0
 800e70a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
			if (res == FR_OK) {
 800e70e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e712:	2b00      	cmp	r3, #0
 800e714:	d159      	bne.n	800e7ca <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d134      	bne.n	800e788 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	330c      	adds	r3, #12
 800e724:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e726:	4618      	mov	r0, r3
 800e728:	f7fb fb17 	bl	8009d5a <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	695b      	ldr	r3, [r3, #20]
 800e730:	3334      	adds	r3, #52	@ 0x34
 800e732:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e734:	4618      	mov	r0, r3
 800e736:	f7fb fb10 	bl	8009d5a <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	695b      	ldr	r3, [r3, #20]
 800e73e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800e742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e746:	4613      	mov	r3, r2
 800e748:	4619      	mov	r1, r3
 800e74a:	f7fb fb06 	bl	8009d5a <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	695b      	ldr	r3, [r3, #20]
 800e752:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e75a:	4613      	mov	r3, r2
 800e75c:	4619      	mov	r1, r3
 800e75e:	f7fb fafc 	bl	8009d5a <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	695b      	ldr	r3, [r3, #20]
 800e766:	3321      	adds	r3, #33	@ 0x21
 800e768:	2203      	movs	r2, #3
 800e76a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	695b      	ldr	r3, [r3, #20]
 800e770:	3304      	adds	r3, #4
 800e772:	2210      	movs	r2, #16
 800e774:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e776:	f107 0310 	add.w	r3, r7, #16
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fd fa3a 	bl	800bbf4 <store_xdir>
 800e780:	4603      	mov	r3, r0
 800e782:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800e786:	e014      	b.n	800e7b2 <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800e788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e78a:	667b      	str	r3, [r7, #100]	@ 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800e78c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e78e:	3316      	adds	r3, #22
 800e790:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e792:	4618      	mov	r0, r3
 800e794:	f7fb fae1 	bl	8009d5a <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e79c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fc fe40 	bl	800b424 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800e7a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e7a6:	330b      	adds	r3, #11
 800e7a8:	2210      	movs	r2, #16
 800e7aa:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800e7b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10e      	bne.n	800e7d8 <f_mkdir+0x290>
					res = sync_fs(fs);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fb fddd 	bl	800a37c <sync_fs>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800e7c8:	e006      	b.n	800e7d8 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fc fa30 	bl	800ac38 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e7d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3780      	adds	r7, #128	@ 0x80
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bdb0      	pop	{r4, r5, r7, pc}

0800e7e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b087      	sub	sp, #28
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7fa:	4b1f      	ldr	r3, [pc, #124]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e7fc:	7a5b      	ldrb	r3, [r3, #9]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d131      	bne.n	800e868 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e804:	4b1c      	ldr	r3, [pc, #112]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e806:	7a5b      	ldrb	r3, [r3, #9]
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	461a      	mov	r2, r3
 800e80c:	4b1a      	ldr	r3, [pc, #104]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e80e:	2100      	movs	r1, #0
 800e810:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e812:	4b19      	ldr	r3, [pc, #100]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e814:	7a5b      	ldrb	r3, [r3, #9]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	4a17      	ldr	r2, [pc, #92]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e822:	4b15      	ldr	r3, [pc, #84]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e824:	7a5b      	ldrb	r3, [r3, #9]
 800e826:	b2db      	uxtb	r3, r3
 800e828:	461a      	mov	r2, r3
 800e82a:	4b13      	ldr	r3, [pc, #76]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e82c:	4413      	add	r3, r2
 800e82e:	79fa      	ldrb	r2, [r7, #7]
 800e830:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e832:	4b11      	ldr	r3, [pc, #68]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e834:	7a5b      	ldrb	r3, [r3, #9]
 800e836:	b2db      	uxtb	r3, r3
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	b2d1      	uxtb	r1, r2
 800e83c:	4a0e      	ldr	r2, [pc, #56]	@ (800e878 <FATFS_LinkDriverEx+0x94>)
 800e83e:	7251      	strb	r1, [r2, #9]
 800e840:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e842:	7dbb      	ldrb	r3, [r7, #22]
 800e844:	3330      	adds	r3, #48	@ 0x30
 800e846:	b2da      	uxtb	r2, r3
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	3301      	adds	r3, #1
 800e850:	223a      	movs	r2, #58	@ 0x3a
 800e852:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	3302      	adds	r3, #2
 800e858:	222f      	movs	r2, #47	@ 0x2f
 800e85a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	3303      	adds	r3, #3
 800e860:	2200      	movs	r2, #0
 800e862:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e864:	2300      	movs	r3, #0
 800e866:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e868:	7dfb      	ldrb	r3, [r7, #23]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	371c      	adds	r7, #28
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	20002750 	.word	0x20002750

0800e87c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e886:	2200      	movs	r2, #0
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff ffaa 	bl	800e7e4 <FATFS_LinkDriverEx>
 800e890:	4603      	mov	r3, r0
}
 800e892:	4618      	mov	r0, r3
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
	...

0800e89c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	6039      	str	r1, [r7, #0]
 800e8a6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e8a8:	88fb      	ldrh	r3, [r7, #6]
 800e8aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8ac:	d802      	bhi.n	800e8b4 <ff_convert+0x18>
		c = chr;
 800e8ae:	88fb      	ldrh	r3, [r7, #6]
 800e8b0:	81fb      	strh	r3, [r7, #14]
 800e8b2:	e025      	b.n	800e900 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00b      	beq.n	800e8d2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e8ba:	88fb      	ldrh	r3, [r7, #6]
 800e8bc:	2bff      	cmp	r3, #255	@ 0xff
 800e8be:	d805      	bhi.n	800e8cc <ff_convert+0x30>
 800e8c0:	88fb      	ldrh	r3, [r7, #6]
 800e8c2:	3b80      	subs	r3, #128	@ 0x80
 800e8c4:	4a12      	ldr	r2, [pc, #72]	@ (800e910 <ff_convert+0x74>)
 800e8c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8ca:	e000      	b.n	800e8ce <ff_convert+0x32>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	81fb      	strh	r3, [r7, #14]
 800e8d0:	e016      	b.n	800e900 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	81fb      	strh	r3, [r7, #14]
 800e8d6:	e009      	b.n	800e8ec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e8d8:	89fb      	ldrh	r3, [r7, #14]
 800e8da:	4a0d      	ldr	r2, [pc, #52]	@ (800e910 <ff_convert+0x74>)
 800e8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8e0:	88fa      	ldrh	r2, [r7, #6]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d006      	beq.n	800e8f4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e8e6:	89fb      	ldrh	r3, [r7, #14]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	81fb      	strh	r3, [r7, #14]
 800e8ec:	89fb      	ldrh	r3, [r7, #14]
 800e8ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8f0:	d9f2      	bls.n	800e8d8 <ff_convert+0x3c>
 800e8f2:	e000      	b.n	800e8f6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e8f4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e8f6:	89fb      	ldrh	r3, [r7, #14]
 800e8f8:	3380      	adds	r3, #128	@ 0x80
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e900:	89fb      	ldrh	r3, [r7, #14]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3714      	adds	r7, #20
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	08010044 	.word	0x08010044

0800e914 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e914:	b480      	push	{r7}
 800e916:	b087      	sub	sp, #28
 800e918:	af00      	add	r7, sp, #0
 800e91a:	4603      	mov	r3, r0
 800e91c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e91e:	88fb      	ldrh	r3, [r7, #6]
 800e920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e924:	d201      	bcs.n	800e92a <ff_wtoupper+0x16>
 800e926:	4b3e      	ldr	r3, [pc, #248]	@ (800ea20 <ff_wtoupper+0x10c>)
 800e928:	e000      	b.n	800e92c <ff_wtoupper+0x18>
 800e92a:	4b3e      	ldr	r3, [pc, #248]	@ (800ea24 <ff_wtoupper+0x110>)
 800e92c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	1c9a      	adds	r2, r3, #2
 800e932:	617a      	str	r2, [r7, #20]
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e938:	8a7b      	ldrh	r3, [r7, #18]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d068      	beq.n	800ea10 <ff_wtoupper+0xfc>
 800e93e:	88fa      	ldrh	r2, [r7, #6]
 800e940:	8a7b      	ldrh	r3, [r7, #18]
 800e942:	429a      	cmp	r2, r3
 800e944:	d364      	bcc.n	800ea10 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	1c9a      	adds	r2, r3, #2
 800e94a:	617a      	str	r2, [r7, #20]
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	823b      	strh	r3, [r7, #16]
 800e950:	8a3b      	ldrh	r3, [r7, #16]
 800e952:	0a1b      	lsrs	r3, r3, #8
 800e954:	81fb      	strh	r3, [r7, #14]
 800e956:	8a3b      	ldrh	r3, [r7, #16]
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e95c:	88fa      	ldrh	r2, [r7, #6]
 800e95e:	8a79      	ldrh	r1, [r7, #18]
 800e960:	8a3b      	ldrh	r3, [r7, #16]
 800e962:	440b      	add	r3, r1
 800e964:	429a      	cmp	r2, r3
 800e966:	da49      	bge.n	800e9fc <ff_wtoupper+0xe8>
			switch (cmd) {
 800e968:	89fb      	ldrh	r3, [r7, #14]
 800e96a:	2b08      	cmp	r3, #8
 800e96c:	d84f      	bhi.n	800ea0e <ff_wtoupper+0xfa>
 800e96e:	a201      	add	r2, pc, #4	@ (adr r2, 800e974 <ff_wtoupper+0x60>)
 800e970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e974:	0800e999 	.word	0x0800e999
 800e978:	0800e9ab 	.word	0x0800e9ab
 800e97c:	0800e9c1 	.word	0x0800e9c1
 800e980:	0800e9c9 	.word	0x0800e9c9
 800e984:	0800e9d1 	.word	0x0800e9d1
 800e988:	0800e9d9 	.word	0x0800e9d9
 800e98c:	0800e9e1 	.word	0x0800e9e1
 800e990:	0800e9e9 	.word	0x0800e9e9
 800e994:	0800e9f1 	.word	0x0800e9f1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e998:	88fa      	ldrh	r2, [r7, #6]
 800e99a:	8a7b      	ldrh	r3, [r7, #18]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	005b      	lsls	r3, r3, #1
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	80fb      	strh	r3, [r7, #6]
 800e9a8:	e027      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e9aa:	88fa      	ldrh	r2, [r7, #6]
 800e9ac:	8a7b      	ldrh	r3, [r7, #18]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	88fa      	ldrh	r2, [r7, #6]
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	80fb      	strh	r3, [r7, #6]
 800e9be:	e01c      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	3b10      	subs	r3, #16
 800e9c4:	80fb      	strh	r3, [r7, #6]
 800e9c6:	e018      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e9c8:	88fb      	ldrh	r3, [r7, #6]
 800e9ca:	3b20      	subs	r3, #32
 800e9cc:	80fb      	strh	r3, [r7, #6]
 800e9ce:	e014      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e9d0:	88fb      	ldrh	r3, [r7, #6]
 800e9d2:	3b30      	subs	r3, #48	@ 0x30
 800e9d4:	80fb      	strh	r3, [r7, #6]
 800e9d6:	e010      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e9d8:	88fb      	ldrh	r3, [r7, #6]
 800e9da:	3b1a      	subs	r3, #26
 800e9dc:	80fb      	strh	r3, [r7, #6]
 800e9de:	e00c      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e9e0:	88fb      	ldrh	r3, [r7, #6]
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	80fb      	strh	r3, [r7, #6]
 800e9e6:	e008      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e9e8:	88fb      	ldrh	r3, [r7, #6]
 800e9ea:	3b50      	subs	r3, #80	@ 0x50
 800e9ec:	80fb      	strh	r3, [r7, #6]
 800e9ee:	e004      	b.n	800e9fa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e9f0:	88fb      	ldrh	r3, [r7, #6]
 800e9f2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e9f6:	80fb      	strh	r3, [r7, #6]
 800e9f8:	bf00      	nop
			}
			break;
 800e9fa:	e008      	b.n	800ea0e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e9fc:	89fb      	ldrh	r3, [r7, #14]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d195      	bne.n	800e92e <ff_wtoupper+0x1a>
 800ea02:	8a3b      	ldrh	r3, [r7, #16]
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	4413      	add	r3, r2
 800ea0a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ea0c:	e78f      	b.n	800e92e <ff_wtoupper+0x1a>
			break;
 800ea0e:	bf00      	nop
	}

	return chr;
 800ea10:	88fb      	ldrh	r3, [r7, #6]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	371c      	adds	r7, #28
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	08010144 	.word	0x08010144
 800ea24:	08010338 	.word	0x08010338

0800ea28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	490e      	ldr	r1, [pc, #56]	@ (800ea68 <MX_USB_HOST_Init+0x40>)
 800ea30:	480e      	ldr	r0, [pc, #56]	@ (800ea6c <MX_USB_HOST_Init+0x44>)
 800ea32:	f7f9 fade 	bl	8007ff2 <USBH_Init>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ea3c:	f7f2 fdf8 	bl	8001630 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ea40:	490b      	ldr	r1, [pc, #44]	@ (800ea70 <MX_USB_HOST_Init+0x48>)
 800ea42:	480a      	ldr	r0, [pc, #40]	@ (800ea6c <MX_USB_HOST_Init+0x44>)
 800ea44:	f7f9 fb82 	bl	800814c <USBH_RegisterClass>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ea4e:	f7f2 fdef 	bl	8001630 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ea52:	4806      	ldr	r0, [pc, #24]	@ (800ea6c <MX_USB_HOST_Init+0x44>)
 800ea54:	f7f9 fc06 	bl	8008264 <USBH_Start>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ea5e:	f7f2 fde7 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ea62:	bf00      	nop
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	0800ea89 	.word	0x0800ea89
 800ea6c:	2000275c 	.word	0x2000275c
 800ea70:	2000000c 	.word	0x2000000c

0800ea74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ea78:	4802      	ldr	r0, [pc, #8]	@ (800ea84 <MX_USB_HOST_Process+0x10>)
 800ea7a:	f7f9 fc03 	bl	8008284 <USBH_Process>
}
 800ea7e:	bf00      	nop
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	2000275c 	.word	0x2000275c

0800ea88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ea94:	78fb      	ldrb	r3, [r7, #3]
 800ea96:	3b01      	subs	r3, #1
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	d821      	bhi.n	800eae0 <USBH_UserProcess+0x58>
 800ea9c:	a201      	add	r2, pc, #4	@ (adr r2, 800eaa4 <USBH_UserProcess+0x1c>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800eae1 	.word	0x0800eae1
 800eaa8:	0800eacb 	.word	0x0800eacb
 800eaac:	0800eae1 	.word	0x0800eae1
 800eab0:	0800ead9 	.word	0x0800ead9
 800eab4:	0800eab9 	.word	0x0800eab9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eab8:	4b0c      	ldr	r3, [pc, #48]	@ (800eaec <USBH_UserProcess+0x64>)
 800eaba:	2203      	movs	r2, #3
 800eabc:	701a      	strb	r2, [r3, #0]
  active_usb = 0;
 800eabe:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf0 <USBH_UserProcess+0x68>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 800eac4:	f7f2 f8a2 	bl	8000c0c <Unmount_USB>
  break;
 800eac8:	e00b      	b.n	800eae2 <USBH_UserProcess+0x5a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eaca:	4b08      	ldr	r3, [pc, #32]	@ (800eaec <USBH_UserProcess+0x64>)
 800eacc:	2202      	movs	r2, #2
 800eace:	701a      	strb	r2, [r3, #0]
//  Create_File("/mydir/myfile.txt");
//  Write_File("/mydir/myfile.txt", "This is my try\n");
//
//  Update_File("/myfile.txt", "This is second line \n");

  active_usb = 1;
 800ead0:	4b07      	ldr	r3, [pc, #28]	@ (800eaf0 <USBH_UserProcess+0x68>)
 800ead2:	2201      	movs	r2, #1
 800ead4:	601a      	str	r2, [r3, #0]

  break;
 800ead6:	e004      	b.n	800eae2 <USBH_UserProcess+0x5a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ead8:	4b04      	ldr	r3, [pc, #16]	@ (800eaec <USBH_UserProcess+0x64>)
 800eada:	2201      	movs	r2, #1
 800eadc:	701a      	strb	r2, [r3, #0]
  break;
 800eade:	e000      	b.n	800eae2 <USBH_UserProcess+0x5a>

  default:
  break;
 800eae0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eae2:	bf00      	nop
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20002b34 	.word	0x20002b34
 800eaf0:	20000220 	.word	0x20000220

0800eaf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b08a      	sub	sp, #40	@ 0x28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eafc:	f107 0314 	add.w	r3, r7, #20
 800eb00:	2200      	movs	r2, #0
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	605a      	str	r2, [r3, #4]
 800eb06:	609a      	str	r2, [r3, #8]
 800eb08:	60da      	str	r2, [r3, #12]
 800eb0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb14:	d147      	bne.n	800eba6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb16:	2300      	movs	r3, #0
 800eb18:	613b      	str	r3, [r7, #16]
 800eb1a:	4b25      	ldr	r3, [pc, #148]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb1e:	4a24      	ldr	r2, [pc, #144]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb20:	f043 0301 	orr.w	r3, r3, #1
 800eb24:	6313      	str	r3, [r2, #48]	@ 0x30
 800eb26:	4b22      	ldr	r3, [pc, #136]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb2a:	f003 0301 	and.w	r3, r3, #1
 800eb2e:	613b      	str	r3, [r7, #16]
 800eb30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800eb32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb40:	f107 0314 	add.w	r3, r7, #20
 800eb44:	4619      	mov	r1, r3
 800eb46:	481b      	ldr	r0, [pc, #108]	@ (800ebb4 <HAL_HCD_MspInit+0xc0>)
 800eb48:	f7f3 f83c 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eb4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800eb50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb52:	2302      	movs	r3, #2
 800eb54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb5e:	230a      	movs	r3, #10
 800eb60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb62:	f107 0314 	add.w	r3, r7, #20
 800eb66:	4619      	mov	r1, r3
 800eb68:	4812      	ldr	r0, [pc, #72]	@ (800ebb4 <HAL_HCD_MspInit+0xc0>)
 800eb6a:	f7f3 f82b 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb6e:	4b10      	ldr	r3, [pc, #64]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb72:	4a0f      	ldr	r2, [pc, #60]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb78:	6353      	str	r3, [r2, #52]	@ 0x34
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb82:	4a0b      	ldr	r2, [pc, #44]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eb88:	6453      	str	r3, [r2, #68]	@ 0x44
 800eb8a:	4b09      	ldr	r3, [pc, #36]	@ (800ebb0 <HAL_HCD_MspInit+0xbc>)
 800eb8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eb96:	2200      	movs	r2, #0
 800eb98:	2100      	movs	r1, #0
 800eb9a:	2043      	movs	r0, #67	@ 0x43
 800eb9c:	f7f2 ffdb 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eba0:	2043      	movs	r0, #67	@ 0x43
 800eba2:	f7f2 fff4 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eba6:	bf00      	nop
 800eba8:	3728      	adds	r7, #40	@ 0x28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	40023800 	.word	0x40023800
 800ebb4:	40020000 	.word	0x40020000

0800ebb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f9 ff33 	bl	8008a32 <USBH_LL_IncTimer>
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7f9 ff6b 	bl	8008abe <USBH_LL_Connect>
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f9 ff74 	bl	8008aec <USBH_LL_Disconnect>
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70fb      	strb	r3, [r7, #3]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7f9 ff25 	bl	8008a86 <USBH_LL_PortEnabled>
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7f9 ff25 	bl	8008aa2 <USBH_LL_PortDisabled>
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d12a      	bne.n	800ecc8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ec72:	4a18      	ldr	r2, [pc, #96]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4a15      	ldr	r2, [pc, #84]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec7e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ec82:	4b14      	ldr	r3, [pc, #80]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ec88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ec8a:	4b12      	ldr	r3, [pc, #72]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec8c:	2208      	movs	r2, #8
 800ec8e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ec90:	4b10      	ldr	r3, [pc, #64]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec92:	2201      	movs	r2, #1
 800ec94:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ec96:	4b0f      	ldr	r3, [pc, #60]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ec9c:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ec9e:	2202      	movs	r2, #2
 800eca0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eca2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eca8:	480a      	ldr	r0, [pc, #40]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ecaa:	f7f3 f940 	bl	8001f2e <HAL_HCD_Init>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d001      	beq.n	800ecb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ecb4:	f7f2 fcbc 	bl	8001630 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ecb8:	4806      	ldr	r0, [pc, #24]	@ (800ecd4 <USBH_LL_Init+0x74>)
 800ecba:	f7f3 fda1 	bl	8002800 <HAL_HCD_GetCurrentFrame>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7f9 fea6 	bl	8008a14 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20002b38 	.word	0x20002b38

0800ecd8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece0:	2300      	movs	r3, #0
 800ece2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7f3 fd0e 	bl	8002710 <HAL_HCD_Start>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecf8:	7bfb      	ldrb	r3, [r7, #15]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 f992 	bl	800f024 <USBH_Get_USB_Status>
 800ed00:	4603      	mov	r3, r0
 800ed02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b084      	sub	sp, #16
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7f3 fd16 	bl	8002756 <HAL_HCD_Stop>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed2e:	7bfb      	ldrb	r3, [r7, #15]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f000 f977 	bl	800f024 <USBH_Get_USB_Status>
 800ed36:	4603      	mov	r3, r0
 800ed38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7f3 fd60 	bl	800281c <HAL_HCD_GetCurrentSpeed>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d00c      	beq.n	800ed7c <USBH_LL_GetSpeed+0x38>
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d80d      	bhi.n	800ed82 <USBH_LL_GetSpeed+0x3e>
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d002      	beq.n	800ed70 <USBH_LL_GetSpeed+0x2c>
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d003      	beq.n	800ed76 <USBH_LL_GetSpeed+0x32>
 800ed6e:	e008      	b.n	800ed82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ed70:	2300      	movs	r3, #0
 800ed72:	73fb      	strb	r3, [r7, #15]
    break;
 800ed74:	e008      	b.n	800ed88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ed76:	2301      	movs	r3, #1
 800ed78:	73fb      	strb	r3, [r7, #15]
    break;
 800ed7a:	e005      	b.n	800ed88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed80:	e002      	b.n	800ed88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ed82:	2301      	movs	r3, #1
 800ed84:	73fb      	strb	r3, [r7, #15]
    break;
 800ed86:	bf00      	nop
  }
  return  speed;
 800ed88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7f3 fcf1 	bl	8002790 <HAL_HCD_ResetPort>
 800edae:	4603      	mov	r3, r0
 800edb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800edb2:	7bfb      	ldrb	r3, [r7, #15]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f000 f935 	bl	800f024 <USBH_Get_USB_Status>
 800edba:	4603      	mov	r3, r0
 800edbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3710      	adds	r7, #16
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	460b      	mov	r3, r1
 800edd2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800edda:	78fa      	ldrb	r2, [r7, #3]
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f7f3 fcf9 	bl	80027d6 <HAL_HCD_HC_GetXferCount>
 800ede4:	4603      	mov	r3, r0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800edee:	b590      	push	{r4, r7, lr}
 800edf0:	b089      	sub	sp, #36	@ 0x24
 800edf2:	af04      	add	r7, sp, #16
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	4608      	mov	r0, r1
 800edf8:	4611      	mov	r1, r2
 800edfa:	461a      	mov	r2, r3
 800edfc:	4603      	mov	r3, r0
 800edfe:	70fb      	strb	r3, [r7, #3]
 800ee00:	460b      	mov	r3, r1
 800ee02:	70bb      	strb	r3, [r7, #2]
 800ee04:	4613      	mov	r3, r2
 800ee06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ee16:	787c      	ldrb	r4, [r7, #1]
 800ee18:	78ba      	ldrb	r2, [r7, #2]
 800ee1a:	78f9      	ldrb	r1, [r7, #3]
 800ee1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ee1e:	9302      	str	r3, [sp, #8]
 800ee20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4623      	mov	r3, r4
 800ee2e:	f7f3 f8e5 	bl	8001ffc <HAL_HCD_HC_Init>
 800ee32:	4603      	mov	r3, r0
 800ee34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f000 f8f3 	bl	800f024 <USBH_Get_USB_Status>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3714      	adds	r7, #20
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd90      	pop	{r4, r7, pc}

0800ee4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ee66:	78fa      	ldrb	r2, [r7, #3]
 800ee68:	4611      	mov	r1, r2
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f3 f97e 	bl	800216c <HAL_HCD_HC_Halt>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f000 f8d4 	bl	800f024 <USBH_Get_USB_Status>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ee8a:	b590      	push	{r4, r7, lr}
 800ee8c:	b089      	sub	sp, #36	@ 0x24
 800ee8e:	af04      	add	r7, sp, #16
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	4608      	mov	r0, r1
 800ee94:	4611      	mov	r1, r2
 800ee96:	461a      	mov	r2, r3
 800ee98:	4603      	mov	r3, r0
 800ee9a:	70fb      	strb	r3, [r7, #3]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	70bb      	strb	r3, [r7, #2]
 800eea0:	4613      	mov	r3, r2
 800eea2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800eeb2:	787c      	ldrb	r4, [r7, #1]
 800eeb4:	78ba      	ldrb	r2, [r7, #2]
 800eeb6:	78f9      	ldrb	r1, [r7, #3]
 800eeb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800eebc:	9303      	str	r3, [sp, #12]
 800eebe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eec0:	9302      	str	r3, [sp, #8]
 800eec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec4:	9301      	str	r3, [sp, #4]
 800eec6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	4623      	mov	r3, r4
 800eece:	f7f3 f971 	bl	80021b4 <HAL_HCD_HC_SubmitRequest>
 800eed2:	4603      	mov	r3, r0
 800eed4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800eed6:	7bfb      	ldrb	r3, [r7, #15]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f000 f8a3 	bl	800f024 <USBH_Get_USB_Status>
 800eede:	4603      	mov	r3, r0
 800eee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eee2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd90      	pop	{r4, r7, pc}

0800eeec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	460b      	mov	r3, r1
 800eef6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eefe:	78fa      	ldrb	r2, [r7, #3]
 800ef00:	4611      	mov	r1, r2
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7f3 fc52 	bl	80027ac <HAL_HCD_HC_GetURBState>
 800ef08:	4603      	mov	r3, r0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d103      	bne.n	800ef30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ef28:	78fb      	ldrb	r3, [r7, #3]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 f8a6 	bl	800f07c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ef30:	20c8      	movs	r0, #200	@ 0xc8
 800ef32:	f7f2 fd11 	bl	8001958 <HAL_Delay>
  return USBH_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b085      	sub	sp, #20
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	70fb      	strb	r3, [r7, #3]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ef56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ef58:	78fa      	ldrb	r2, [r7, #3]
 800ef5a:	68f9      	ldr	r1, [r7, #12]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	1a9b      	subs	r3, r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	440b      	add	r3, r1
 800ef66:	3317      	adds	r3, #23
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d00a      	beq.n	800ef84 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ef6e:	78fa      	ldrb	r2, [r7, #3]
 800ef70:	68f9      	ldr	r1, [r7, #12]
 800ef72:	4613      	mov	r3, r2
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	1a9b      	subs	r3, r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	440b      	add	r3, r1
 800ef7c:	333c      	adds	r3, #60	@ 0x3c
 800ef7e:	78ba      	ldrb	r2, [r7, #2]
 800ef80:	701a      	strb	r2, [r3, #0]
 800ef82:	e009      	b.n	800ef98 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ef84:	78fa      	ldrb	r2, [r7, #3]
 800ef86:	68f9      	ldr	r1, [r7, #12]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	011b      	lsls	r3, r3, #4
 800ef8c:	1a9b      	subs	r3, r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	440b      	add	r3, r1
 800ef92:	333d      	adds	r3, #61	@ 0x3d
 800ef94:	78ba      	ldrb	r2, [r7, #2]
 800ef96:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ef98:	2300      	movs	r3, #0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3714      	adds	r7, #20
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b085      	sub	sp, #20
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	460b      	mov	r3, r1
 800efb0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800efbc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	68b9      	ldr	r1, [r7, #8]
 800efc2:	4613      	mov	r3, r2
 800efc4:	011b      	lsls	r3, r3, #4
 800efc6:	1a9b      	subs	r3, r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	440b      	add	r3, r1
 800efcc:	3317      	adds	r3, #23
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00a      	beq.n	800efea <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800efd4:	78fa      	ldrb	r2, [r7, #3]
 800efd6:	68b9      	ldr	r1, [r7, #8]
 800efd8:	4613      	mov	r3, r2
 800efda:	011b      	lsls	r3, r3, #4
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	440b      	add	r3, r1
 800efe2:	333c      	adds	r3, #60	@ 0x3c
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	73fb      	strb	r3, [r7, #15]
 800efe8:	e009      	b.n	800effe <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800efea:	78fa      	ldrb	r2, [r7, #3]
 800efec:	68b9      	ldr	r1, [r7, #8]
 800efee:	4613      	mov	r3, r2
 800eff0:	011b      	lsls	r3, r3, #4
 800eff2:	1a9b      	subs	r3, r3, r2
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	440b      	add	r3, r1
 800eff8:	333d      	adds	r3, #61	@ 0x3d
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7f2 fc9f 	bl	8001958 <HAL_Delay>
}
 800f01a:	bf00      	nop
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
	...

0800f024 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f024:	b480      	push	{r7}
 800f026:	b085      	sub	sp, #20
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f032:	79fb      	ldrb	r3, [r7, #7]
 800f034:	2b03      	cmp	r3, #3
 800f036:	d817      	bhi.n	800f068 <USBH_Get_USB_Status+0x44>
 800f038:	a201      	add	r2, pc, #4	@ (adr r2, 800f040 <USBH_Get_USB_Status+0x1c>)
 800f03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03e:	bf00      	nop
 800f040:	0800f051 	.word	0x0800f051
 800f044:	0800f057 	.word	0x0800f057
 800f048:	0800f05d 	.word	0x0800f05d
 800f04c:	0800f063 	.word	0x0800f063
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73fb      	strb	r3, [r7, #15]
    break;
 800f054:	e00b      	b.n	800f06e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f056:	2302      	movs	r3, #2
 800f058:	73fb      	strb	r3, [r7, #15]
    break;
 800f05a:	e008      	b.n	800f06e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f05c:	2301      	movs	r3, #1
 800f05e:	73fb      	strb	r3, [r7, #15]
    break;
 800f060:	e005      	b.n	800f06e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f062:	2302      	movs	r3, #2
 800f064:	73fb      	strb	r3, [r7, #15]
    break;
 800f066:	e002      	b.n	800f06e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f068:	2302      	movs	r3, #2
 800f06a:	73fb      	strb	r3, [r7, #15]
    break;
 800f06c:	bf00      	nop
  }
  return usb_status;
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f070:	4618      	mov	r0, r3
 800f072:	3714      	adds	r7, #20
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f086:	79fb      	ldrb	r3, [r7, #7]
 800f088:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f08a:	79fb      	ldrb	r3, [r7, #7]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d102      	bne.n	800f096 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f090:	2300      	movs	r3, #0
 800f092:	73fb      	strb	r3, [r7, #15]
 800f094:	e001      	b.n	800f09a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f096:	2301      	movs	r3, #1
 800f098:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	461a      	mov	r2, r3
 800f09e:	2101      	movs	r1, #1
 800f0a0:	4803      	ldr	r0, [pc, #12]	@ (800f0b0 <MX_DriverVbusFS+0x34>)
 800f0a2:	f7f2 ff2b 	bl	8001efc <HAL_GPIO_WritePin>
}
 800f0a6:	bf00      	nop
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	40020800 	.word	0x40020800

0800f0b4 <malloc>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	@ (800f0c0 <malloc+0xc>)
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	f000 b82d 	b.w	800f118 <_malloc_r>
 800f0be:	bf00      	nop
 800f0c0:	2000002c 	.word	0x2000002c

0800f0c4 <free>:
 800f0c4:	4b02      	ldr	r3, [pc, #8]	@ (800f0d0 <free+0xc>)
 800f0c6:	4601      	mov	r1, r0
 800f0c8:	6818      	ldr	r0, [r3, #0]
 800f0ca:	f000 b923 	b.w	800f314 <_free_r>
 800f0ce:	bf00      	nop
 800f0d0:	2000002c 	.word	0x2000002c

0800f0d4 <sbrk_aligned>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	4e0f      	ldr	r6, [pc, #60]	@ (800f114 <sbrk_aligned+0x40>)
 800f0d8:	460c      	mov	r4, r1
 800f0da:	6831      	ldr	r1, [r6, #0]
 800f0dc:	4605      	mov	r5, r0
 800f0de:	b911      	cbnz	r1, 800f0e6 <sbrk_aligned+0x12>
 800f0e0:	f000 f8ce 	bl	800f280 <_sbrk_r>
 800f0e4:	6030      	str	r0, [r6, #0]
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f000 f8c9 	bl	800f280 <_sbrk_r>
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	d103      	bne.n	800f0fa <sbrk_aligned+0x26>
 800f0f2:	f04f 34ff 	mov.w	r4, #4294967295
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	bd70      	pop	{r4, r5, r6, pc}
 800f0fa:	1cc4      	adds	r4, r0, #3
 800f0fc:	f024 0403 	bic.w	r4, r4, #3
 800f100:	42a0      	cmp	r0, r4
 800f102:	d0f8      	beq.n	800f0f6 <sbrk_aligned+0x22>
 800f104:	1a21      	subs	r1, r4, r0
 800f106:	4628      	mov	r0, r5
 800f108:	f000 f8ba 	bl	800f280 <_sbrk_r>
 800f10c:	3001      	adds	r0, #1
 800f10e:	d1f2      	bne.n	800f0f6 <sbrk_aligned+0x22>
 800f110:	e7ef      	b.n	800f0f2 <sbrk_aligned+0x1e>
 800f112:	bf00      	nop
 800f114:	20002f18 	.word	0x20002f18

0800f118 <_malloc_r>:
 800f118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f11c:	1ccd      	adds	r5, r1, #3
 800f11e:	f025 0503 	bic.w	r5, r5, #3
 800f122:	3508      	adds	r5, #8
 800f124:	2d0c      	cmp	r5, #12
 800f126:	bf38      	it	cc
 800f128:	250c      	movcc	r5, #12
 800f12a:	2d00      	cmp	r5, #0
 800f12c:	4606      	mov	r6, r0
 800f12e:	db01      	blt.n	800f134 <_malloc_r+0x1c>
 800f130:	42a9      	cmp	r1, r5
 800f132:	d904      	bls.n	800f13e <_malloc_r+0x26>
 800f134:	230c      	movs	r3, #12
 800f136:	6033      	str	r3, [r6, #0]
 800f138:	2000      	movs	r0, #0
 800f13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f214 <_malloc_r+0xfc>
 800f142:	f000 f869 	bl	800f218 <__malloc_lock>
 800f146:	f8d8 3000 	ldr.w	r3, [r8]
 800f14a:	461c      	mov	r4, r3
 800f14c:	bb44      	cbnz	r4, 800f1a0 <_malloc_r+0x88>
 800f14e:	4629      	mov	r1, r5
 800f150:	4630      	mov	r0, r6
 800f152:	f7ff ffbf 	bl	800f0d4 <sbrk_aligned>
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	4604      	mov	r4, r0
 800f15a:	d158      	bne.n	800f20e <_malloc_r+0xf6>
 800f15c:	f8d8 4000 	ldr.w	r4, [r8]
 800f160:	4627      	mov	r7, r4
 800f162:	2f00      	cmp	r7, #0
 800f164:	d143      	bne.n	800f1ee <_malloc_r+0xd6>
 800f166:	2c00      	cmp	r4, #0
 800f168:	d04b      	beq.n	800f202 <_malloc_r+0xea>
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	4639      	mov	r1, r7
 800f16e:	4630      	mov	r0, r6
 800f170:	eb04 0903 	add.w	r9, r4, r3
 800f174:	f000 f884 	bl	800f280 <_sbrk_r>
 800f178:	4581      	cmp	r9, r0
 800f17a:	d142      	bne.n	800f202 <_malloc_r+0xea>
 800f17c:	6821      	ldr	r1, [r4, #0]
 800f17e:	1a6d      	subs	r5, r5, r1
 800f180:	4629      	mov	r1, r5
 800f182:	4630      	mov	r0, r6
 800f184:	f7ff ffa6 	bl	800f0d4 <sbrk_aligned>
 800f188:	3001      	adds	r0, #1
 800f18a:	d03a      	beq.n	800f202 <_malloc_r+0xea>
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	442b      	add	r3, r5
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	f8d8 3000 	ldr.w	r3, [r8]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	bb62      	cbnz	r2, 800f1f4 <_malloc_r+0xdc>
 800f19a:	f8c8 7000 	str.w	r7, [r8]
 800f19e:	e00f      	b.n	800f1c0 <_malloc_r+0xa8>
 800f1a0:	6822      	ldr	r2, [r4, #0]
 800f1a2:	1b52      	subs	r2, r2, r5
 800f1a4:	d420      	bmi.n	800f1e8 <_malloc_r+0xd0>
 800f1a6:	2a0b      	cmp	r2, #11
 800f1a8:	d917      	bls.n	800f1da <_malloc_r+0xc2>
 800f1aa:	1961      	adds	r1, r4, r5
 800f1ac:	42a3      	cmp	r3, r4
 800f1ae:	6025      	str	r5, [r4, #0]
 800f1b0:	bf18      	it	ne
 800f1b2:	6059      	strne	r1, [r3, #4]
 800f1b4:	6863      	ldr	r3, [r4, #4]
 800f1b6:	bf08      	it	eq
 800f1b8:	f8c8 1000 	streq.w	r1, [r8]
 800f1bc:	5162      	str	r2, [r4, r5]
 800f1be:	604b      	str	r3, [r1, #4]
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	f000 f82f 	bl	800f224 <__malloc_unlock>
 800f1c6:	f104 000b 	add.w	r0, r4, #11
 800f1ca:	1d23      	adds	r3, r4, #4
 800f1cc:	f020 0007 	bic.w	r0, r0, #7
 800f1d0:	1ac2      	subs	r2, r0, r3
 800f1d2:	bf1c      	itt	ne
 800f1d4:	1a1b      	subne	r3, r3, r0
 800f1d6:	50a3      	strne	r3, [r4, r2]
 800f1d8:	e7af      	b.n	800f13a <_malloc_r+0x22>
 800f1da:	6862      	ldr	r2, [r4, #4]
 800f1dc:	42a3      	cmp	r3, r4
 800f1de:	bf0c      	ite	eq
 800f1e0:	f8c8 2000 	streq.w	r2, [r8]
 800f1e4:	605a      	strne	r2, [r3, #4]
 800f1e6:	e7eb      	b.n	800f1c0 <_malloc_r+0xa8>
 800f1e8:	4623      	mov	r3, r4
 800f1ea:	6864      	ldr	r4, [r4, #4]
 800f1ec:	e7ae      	b.n	800f14c <_malloc_r+0x34>
 800f1ee:	463c      	mov	r4, r7
 800f1f0:	687f      	ldr	r7, [r7, #4]
 800f1f2:	e7b6      	b.n	800f162 <_malloc_r+0x4a>
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	42a3      	cmp	r3, r4
 800f1fa:	d1fb      	bne.n	800f1f4 <_malloc_r+0xdc>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	6053      	str	r3, [r2, #4]
 800f200:	e7de      	b.n	800f1c0 <_malloc_r+0xa8>
 800f202:	230c      	movs	r3, #12
 800f204:	6033      	str	r3, [r6, #0]
 800f206:	4630      	mov	r0, r6
 800f208:	f000 f80c 	bl	800f224 <__malloc_unlock>
 800f20c:	e794      	b.n	800f138 <_malloc_r+0x20>
 800f20e:	6005      	str	r5, [r0, #0]
 800f210:	e7d6      	b.n	800f1c0 <_malloc_r+0xa8>
 800f212:	bf00      	nop
 800f214:	20002f1c 	.word	0x20002f1c

0800f218 <__malloc_lock>:
 800f218:	4801      	ldr	r0, [pc, #4]	@ (800f220 <__malloc_lock+0x8>)
 800f21a:	f000 b86b 	b.w	800f2f4 <__retarget_lock_acquire_recursive>
 800f21e:	bf00      	nop
 800f220:	2000305c 	.word	0x2000305c

0800f224 <__malloc_unlock>:
 800f224:	4801      	ldr	r0, [pc, #4]	@ (800f22c <__malloc_unlock+0x8>)
 800f226:	f000 b866 	b.w	800f2f6 <__retarget_lock_release_recursive>
 800f22a:	bf00      	nop
 800f22c:	2000305c 	.word	0x2000305c

0800f230 <siprintf>:
 800f230:	b40e      	push	{r1, r2, r3}
 800f232:	b500      	push	{lr}
 800f234:	b09c      	sub	sp, #112	@ 0x70
 800f236:	ab1d      	add	r3, sp, #116	@ 0x74
 800f238:	9002      	str	r0, [sp, #8]
 800f23a:	9006      	str	r0, [sp, #24]
 800f23c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f240:	4809      	ldr	r0, [pc, #36]	@ (800f268 <siprintf+0x38>)
 800f242:	9107      	str	r1, [sp, #28]
 800f244:	9104      	str	r1, [sp, #16]
 800f246:	4909      	ldr	r1, [pc, #36]	@ (800f26c <siprintf+0x3c>)
 800f248:	f853 2b04 	ldr.w	r2, [r3], #4
 800f24c:	9105      	str	r1, [sp, #20]
 800f24e:	6800      	ldr	r0, [r0, #0]
 800f250:	9301      	str	r3, [sp, #4]
 800f252:	a902      	add	r1, sp, #8
 800f254:	f000 f904 	bl	800f460 <_svfiprintf_r>
 800f258:	9b02      	ldr	r3, [sp, #8]
 800f25a:	2200      	movs	r2, #0
 800f25c:	701a      	strb	r2, [r3, #0]
 800f25e:	b01c      	add	sp, #112	@ 0x70
 800f260:	f85d eb04 	ldr.w	lr, [sp], #4
 800f264:	b003      	add	sp, #12
 800f266:	4770      	bx	lr
 800f268:	2000002c 	.word	0x2000002c
 800f26c:	ffff0208 	.word	0xffff0208

0800f270 <memset>:
 800f270:	4402      	add	r2, r0
 800f272:	4603      	mov	r3, r0
 800f274:	4293      	cmp	r3, r2
 800f276:	d100      	bne.n	800f27a <memset+0xa>
 800f278:	4770      	bx	lr
 800f27a:	f803 1b01 	strb.w	r1, [r3], #1
 800f27e:	e7f9      	b.n	800f274 <memset+0x4>

0800f280 <_sbrk_r>:
 800f280:	b538      	push	{r3, r4, r5, lr}
 800f282:	4d06      	ldr	r5, [pc, #24]	@ (800f29c <_sbrk_r+0x1c>)
 800f284:	2300      	movs	r3, #0
 800f286:	4604      	mov	r4, r0
 800f288:	4608      	mov	r0, r1
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	f7f2 fa80 	bl	8001790 <_sbrk>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_sbrk_r+0x1a>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_sbrk_r+0x1a>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	20003058 	.word	0x20003058

0800f2a0 <__errno>:
 800f2a0:	4b01      	ldr	r3, [pc, #4]	@ (800f2a8 <__errno+0x8>)
 800f2a2:	6818      	ldr	r0, [r3, #0]
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	2000002c 	.word	0x2000002c

0800f2ac <__libc_init_array>:
 800f2ac:	b570      	push	{r4, r5, r6, lr}
 800f2ae:	4d0d      	ldr	r5, [pc, #52]	@ (800f2e4 <__libc_init_array+0x38>)
 800f2b0:	4c0d      	ldr	r4, [pc, #52]	@ (800f2e8 <__libc_init_array+0x3c>)
 800f2b2:	1b64      	subs	r4, r4, r5
 800f2b4:	10a4      	asrs	r4, r4, #2
 800f2b6:	2600      	movs	r6, #0
 800f2b8:	42a6      	cmp	r6, r4
 800f2ba:	d109      	bne.n	800f2d0 <__libc_init_array+0x24>
 800f2bc:	4d0b      	ldr	r5, [pc, #44]	@ (800f2ec <__libc_init_array+0x40>)
 800f2be:	4c0c      	ldr	r4, [pc, #48]	@ (800f2f0 <__libc_init_array+0x44>)
 800f2c0:	f000 fba8 	bl	800fa14 <_init>
 800f2c4:	1b64      	subs	r4, r4, r5
 800f2c6:	10a4      	asrs	r4, r4, #2
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	42a6      	cmp	r6, r4
 800f2cc:	d105      	bne.n	800f2da <__libc_init_array+0x2e>
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}
 800f2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2d4:	4798      	blx	r3
 800f2d6:	3601      	adds	r6, #1
 800f2d8:	e7ee      	b.n	800f2b8 <__libc_init_array+0xc>
 800f2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2de:	4798      	blx	r3
 800f2e0:	3601      	adds	r6, #1
 800f2e2:	e7f2      	b.n	800f2ca <__libc_init_array+0x1e>
 800f2e4:	08010430 	.word	0x08010430
 800f2e8:	08010430 	.word	0x08010430
 800f2ec:	08010430 	.word	0x08010430
 800f2f0:	08010434 	.word	0x08010434

0800f2f4 <__retarget_lock_acquire_recursive>:
 800f2f4:	4770      	bx	lr

0800f2f6 <__retarget_lock_release_recursive>:
 800f2f6:	4770      	bx	lr

0800f2f8 <memcpy>:
 800f2f8:	440a      	add	r2, r1
 800f2fa:	4291      	cmp	r1, r2
 800f2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f300:	d100      	bne.n	800f304 <memcpy+0xc>
 800f302:	4770      	bx	lr
 800f304:	b510      	push	{r4, lr}
 800f306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f30e:	4291      	cmp	r1, r2
 800f310:	d1f9      	bne.n	800f306 <memcpy+0xe>
 800f312:	bd10      	pop	{r4, pc}

0800f314 <_free_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	4605      	mov	r5, r0
 800f318:	2900      	cmp	r1, #0
 800f31a:	d041      	beq.n	800f3a0 <_free_r+0x8c>
 800f31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f320:	1f0c      	subs	r4, r1, #4
 800f322:	2b00      	cmp	r3, #0
 800f324:	bfb8      	it	lt
 800f326:	18e4      	addlt	r4, r4, r3
 800f328:	f7ff ff76 	bl	800f218 <__malloc_lock>
 800f32c:	4a1d      	ldr	r2, [pc, #116]	@ (800f3a4 <_free_r+0x90>)
 800f32e:	6813      	ldr	r3, [r2, #0]
 800f330:	b933      	cbnz	r3, 800f340 <_free_r+0x2c>
 800f332:	6063      	str	r3, [r4, #4]
 800f334:	6014      	str	r4, [r2, #0]
 800f336:	4628      	mov	r0, r5
 800f338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f33c:	f7ff bf72 	b.w	800f224 <__malloc_unlock>
 800f340:	42a3      	cmp	r3, r4
 800f342:	d908      	bls.n	800f356 <_free_r+0x42>
 800f344:	6820      	ldr	r0, [r4, #0]
 800f346:	1821      	adds	r1, r4, r0
 800f348:	428b      	cmp	r3, r1
 800f34a:	bf01      	itttt	eq
 800f34c:	6819      	ldreq	r1, [r3, #0]
 800f34e:	685b      	ldreq	r3, [r3, #4]
 800f350:	1809      	addeq	r1, r1, r0
 800f352:	6021      	streq	r1, [r4, #0]
 800f354:	e7ed      	b.n	800f332 <_free_r+0x1e>
 800f356:	461a      	mov	r2, r3
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	b10b      	cbz	r3, 800f360 <_free_r+0x4c>
 800f35c:	42a3      	cmp	r3, r4
 800f35e:	d9fa      	bls.n	800f356 <_free_r+0x42>
 800f360:	6811      	ldr	r1, [r2, #0]
 800f362:	1850      	adds	r0, r2, r1
 800f364:	42a0      	cmp	r0, r4
 800f366:	d10b      	bne.n	800f380 <_free_r+0x6c>
 800f368:	6820      	ldr	r0, [r4, #0]
 800f36a:	4401      	add	r1, r0
 800f36c:	1850      	adds	r0, r2, r1
 800f36e:	4283      	cmp	r3, r0
 800f370:	6011      	str	r1, [r2, #0]
 800f372:	d1e0      	bne.n	800f336 <_free_r+0x22>
 800f374:	6818      	ldr	r0, [r3, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	6053      	str	r3, [r2, #4]
 800f37a:	4408      	add	r0, r1
 800f37c:	6010      	str	r0, [r2, #0]
 800f37e:	e7da      	b.n	800f336 <_free_r+0x22>
 800f380:	d902      	bls.n	800f388 <_free_r+0x74>
 800f382:	230c      	movs	r3, #12
 800f384:	602b      	str	r3, [r5, #0]
 800f386:	e7d6      	b.n	800f336 <_free_r+0x22>
 800f388:	6820      	ldr	r0, [r4, #0]
 800f38a:	1821      	adds	r1, r4, r0
 800f38c:	428b      	cmp	r3, r1
 800f38e:	bf04      	itt	eq
 800f390:	6819      	ldreq	r1, [r3, #0]
 800f392:	685b      	ldreq	r3, [r3, #4]
 800f394:	6063      	str	r3, [r4, #4]
 800f396:	bf04      	itt	eq
 800f398:	1809      	addeq	r1, r1, r0
 800f39a:	6021      	streq	r1, [r4, #0]
 800f39c:	6054      	str	r4, [r2, #4]
 800f39e:	e7ca      	b.n	800f336 <_free_r+0x22>
 800f3a0:	bd38      	pop	{r3, r4, r5, pc}
 800f3a2:	bf00      	nop
 800f3a4:	20002f1c 	.word	0x20002f1c

0800f3a8 <__ssputs_r>:
 800f3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ac:	688e      	ldr	r6, [r1, #8]
 800f3ae:	461f      	mov	r7, r3
 800f3b0:	42be      	cmp	r6, r7
 800f3b2:	680b      	ldr	r3, [r1, #0]
 800f3b4:	4682      	mov	sl, r0
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	4690      	mov	r8, r2
 800f3ba:	d82d      	bhi.n	800f418 <__ssputs_r+0x70>
 800f3bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f3c4:	d026      	beq.n	800f414 <__ssputs_r+0x6c>
 800f3c6:	6965      	ldr	r5, [r4, #20]
 800f3c8:	6909      	ldr	r1, [r1, #16]
 800f3ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3ce:	eba3 0901 	sub.w	r9, r3, r1
 800f3d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3d6:	1c7b      	adds	r3, r7, #1
 800f3d8:	444b      	add	r3, r9
 800f3da:	106d      	asrs	r5, r5, #1
 800f3dc:	429d      	cmp	r5, r3
 800f3de:	bf38      	it	cc
 800f3e0:	461d      	movcc	r5, r3
 800f3e2:	0553      	lsls	r3, r2, #21
 800f3e4:	d527      	bpl.n	800f436 <__ssputs_r+0x8e>
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	f7ff fe96 	bl	800f118 <_malloc_r>
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	b360      	cbz	r0, 800f44a <__ssputs_r+0xa2>
 800f3f0:	6921      	ldr	r1, [r4, #16]
 800f3f2:	464a      	mov	r2, r9
 800f3f4:	f7ff ff80 	bl	800f2f8 <memcpy>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f3fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f402:	81a3      	strh	r3, [r4, #12]
 800f404:	6126      	str	r6, [r4, #16]
 800f406:	6165      	str	r5, [r4, #20]
 800f408:	444e      	add	r6, r9
 800f40a:	eba5 0509 	sub.w	r5, r5, r9
 800f40e:	6026      	str	r6, [r4, #0]
 800f410:	60a5      	str	r5, [r4, #8]
 800f412:	463e      	mov	r6, r7
 800f414:	42be      	cmp	r6, r7
 800f416:	d900      	bls.n	800f41a <__ssputs_r+0x72>
 800f418:	463e      	mov	r6, r7
 800f41a:	6820      	ldr	r0, [r4, #0]
 800f41c:	4632      	mov	r2, r6
 800f41e:	4641      	mov	r1, r8
 800f420:	f000 faa8 	bl	800f974 <memmove>
 800f424:	68a3      	ldr	r3, [r4, #8]
 800f426:	1b9b      	subs	r3, r3, r6
 800f428:	60a3      	str	r3, [r4, #8]
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	4433      	add	r3, r6
 800f42e:	6023      	str	r3, [r4, #0]
 800f430:	2000      	movs	r0, #0
 800f432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f436:	462a      	mov	r2, r5
 800f438:	f000 fab6 	bl	800f9a8 <_realloc_r>
 800f43c:	4606      	mov	r6, r0
 800f43e:	2800      	cmp	r0, #0
 800f440:	d1e0      	bne.n	800f404 <__ssputs_r+0x5c>
 800f442:	6921      	ldr	r1, [r4, #16]
 800f444:	4650      	mov	r0, sl
 800f446:	f7ff ff65 	bl	800f314 <_free_r>
 800f44a:	230c      	movs	r3, #12
 800f44c:	f8ca 3000 	str.w	r3, [sl]
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f456:	81a3      	strh	r3, [r4, #12]
 800f458:	f04f 30ff 	mov.w	r0, #4294967295
 800f45c:	e7e9      	b.n	800f432 <__ssputs_r+0x8a>
	...

0800f460 <_svfiprintf_r>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	4698      	mov	r8, r3
 800f466:	898b      	ldrh	r3, [r1, #12]
 800f468:	061b      	lsls	r3, r3, #24
 800f46a:	b09d      	sub	sp, #116	@ 0x74
 800f46c:	4607      	mov	r7, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	4614      	mov	r4, r2
 800f472:	d510      	bpl.n	800f496 <_svfiprintf_r+0x36>
 800f474:	690b      	ldr	r3, [r1, #16]
 800f476:	b973      	cbnz	r3, 800f496 <_svfiprintf_r+0x36>
 800f478:	2140      	movs	r1, #64	@ 0x40
 800f47a:	f7ff fe4d 	bl	800f118 <_malloc_r>
 800f47e:	6028      	str	r0, [r5, #0]
 800f480:	6128      	str	r0, [r5, #16]
 800f482:	b930      	cbnz	r0, 800f492 <_svfiprintf_r+0x32>
 800f484:	230c      	movs	r3, #12
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	b01d      	add	sp, #116	@ 0x74
 800f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f492:	2340      	movs	r3, #64	@ 0x40
 800f494:	616b      	str	r3, [r5, #20]
 800f496:	2300      	movs	r3, #0
 800f498:	9309      	str	r3, [sp, #36]	@ 0x24
 800f49a:	2320      	movs	r3, #32
 800f49c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4a4:	2330      	movs	r3, #48	@ 0x30
 800f4a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f644 <_svfiprintf_r+0x1e4>
 800f4aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4ae:	f04f 0901 	mov.w	r9, #1
 800f4b2:	4623      	mov	r3, r4
 800f4b4:	469a      	mov	sl, r3
 800f4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4ba:	b10a      	cbz	r2, 800f4c0 <_svfiprintf_r+0x60>
 800f4bc:	2a25      	cmp	r2, #37	@ 0x25
 800f4be:	d1f9      	bne.n	800f4b4 <_svfiprintf_r+0x54>
 800f4c0:	ebba 0b04 	subs.w	fp, sl, r4
 800f4c4:	d00b      	beq.n	800f4de <_svfiprintf_r+0x7e>
 800f4c6:	465b      	mov	r3, fp
 800f4c8:	4622      	mov	r2, r4
 800f4ca:	4629      	mov	r1, r5
 800f4cc:	4638      	mov	r0, r7
 800f4ce:	f7ff ff6b 	bl	800f3a8 <__ssputs_r>
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	f000 80a7 	beq.w	800f626 <_svfiprintf_r+0x1c6>
 800f4d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4da:	445a      	add	r2, fp
 800f4dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4de:	f89a 3000 	ldrb.w	r3, [sl]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	f000 809f 	beq.w	800f626 <_svfiprintf_r+0x1c6>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4f2:	f10a 0a01 	add.w	sl, sl, #1
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	9307      	str	r3, [sp, #28]
 800f4fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800f500:	4654      	mov	r4, sl
 800f502:	2205      	movs	r2, #5
 800f504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f508:	484e      	ldr	r0, [pc, #312]	@ (800f644 <_svfiprintf_r+0x1e4>)
 800f50a:	f7f0 fe79 	bl	8000200 <memchr>
 800f50e:	9a04      	ldr	r2, [sp, #16]
 800f510:	b9d8      	cbnz	r0, 800f54a <_svfiprintf_r+0xea>
 800f512:	06d0      	lsls	r0, r2, #27
 800f514:	bf44      	itt	mi
 800f516:	2320      	movmi	r3, #32
 800f518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f51c:	0711      	lsls	r1, r2, #28
 800f51e:	bf44      	itt	mi
 800f520:	232b      	movmi	r3, #43	@ 0x2b
 800f522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f526:	f89a 3000 	ldrb.w	r3, [sl]
 800f52a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f52c:	d015      	beq.n	800f55a <_svfiprintf_r+0xfa>
 800f52e:	9a07      	ldr	r2, [sp, #28]
 800f530:	4654      	mov	r4, sl
 800f532:	2000      	movs	r0, #0
 800f534:	f04f 0c0a 	mov.w	ip, #10
 800f538:	4621      	mov	r1, r4
 800f53a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f53e:	3b30      	subs	r3, #48	@ 0x30
 800f540:	2b09      	cmp	r3, #9
 800f542:	d94b      	bls.n	800f5dc <_svfiprintf_r+0x17c>
 800f544:	b1b0      	cbz	r0, 800f574 <_svfiprintf_r+0x114>
 800f546:	9207      	str	r2, [sp, #28]
 800f548:	e014      	b.n	800f574 <_svfiprintf_r+0x114>
 800f54a:	eba0 0308 	sub.w	r3, r0, r8
 800f54e:	fa09 f303 	lsl.w	r3, r9, r3
 800f552:	4313      	orrs	r3, r2
 800f554:	9304      	str	r3, [sp, #16]
 800f556:	46a2      	mov	sl, r4
 800f558:	e7d2      	b.n	800f500 <_svfiprintf_r+0xa0>
 800f55a:	9b03      	ldr	r3, [sp, #12]
 800f55c:	1d19      	adds	r1, r3, #4
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	9103      	str	r1, [sp, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	bfbb      	ittet	lt
 800f566:	425b      	neglt	r3, r3
 800f568:	f042 0202 	orrlt.w	r2, r2, #2
 800f56c:	9307      	strge	r3, [sp, #28]
 800f56e:	9307      	strlt	r3, [sp, #28]
 800f570:	bfb8      	it	lt
 800f572:	9204      	strlt	r2, [sp, #16]
 800f574:	7823      	ldrb	r3, [r4, #0]
 800f576:	2b2e      	cmp	r3, #46	@ 0x2e
 800f578:	d10a      	bne.n	800f590 <_svfiprintf_r+0x130>
 800f57a:	7863      	ldrb	r3, [r4, #1]
 800f57c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f57e:	d132      	bne.n	800f5e6 <_svfiprintf_r+0x186>
 800f580:	9b03      	ldr	r3, [sp, #12]
 800f582:	1d1a      	adds	r2, r3, #4
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	9203      	str	r2, [sp, #12]
 800f588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f58c:	3402      	adds	r4, #2
 800f58e:	9305      	str	r3, [sp, #20]
 800f590:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f654 <_svfiprintf_r+0x1f4>
 800f594:	7821      	ldrb	r1, [r4, #0]
 800f596:	2203      	movs	r2, #3
 800f598:	4650      	mov	r0, sl
 800f59a:	f7f0 fe31 	bl	8000200 <memchr>
 800f59e:	b138      	cbz	r0, 800f5b0 <_svfiprintf_r+0x150>
 800f5a0:	9b04      	ldr	r3, [sp, #16]
 800f5a2:	eba0 000a 	sub.w	r0, r0, sl
 800f5a6:	2240      	movs	r2, #64	@ 0x40
 800f5a8:	4082      	lsls	r2, r0
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	3401      	adds	r4, #1
 800f5ae:	9304      	str	r3, [sp, #16]
 800f5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b4:	4824      	ldr	r0, [pc, #144]	@ (800f648 <_svfiprintf_r+0x1e8>)
 800f5b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5ba:	2206      	movs	r2, #6
 800f5bc:	f7f0 fe20 	bl	8000200 <memchr>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d036      	beq.n	800f632 <_svfiprintf_r+0x1d2>
 800f5c4:	4b21      	ldr	r3, [pc, #132]	@ (800f64c <_svfiprintf_r+0x1ec>)
 800f5c6:	bb1b      	cbnz	r3, 800f610 <_svfiprintf_r+0x1b0>
 800f5c8:	9b03      	ldr	r3, [sp, #12]
 800f5ca:	3307      	adds	r3, #7
 800f5cc:	f023 0307 	bic.w	r3, r3, #7
 800f5d0:	3308      	adds	r3, #8
 800f5d2:	9303      	str	r3, [sp, #12]
 800f5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d6:	4433      	add	r3, r6
 800f5d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5da:	e76a      	b.n	800f4b2 <_svfiprintf_r+0x52>
 800f5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	2001      	movs	r0, #1
 800f5e4:	e7a8      	b.n	800f538 <_svfiprintf_r+0xd8>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	3401      	adds	r4, #1
 800f5ea:	9305      	str	r3, [sp, #20]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	f04f 0c0a 	mov.w	ip, #10
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f8:	3a30      	subs	r2, #48	@ 0x30
 800f5fa:	2a09      	cmp	r2, #9
 800f5fc:	d903      	bls.n	800f606 <_svfiprintf_r+0x1a6>
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d0c6      	beq.n	800f590 <_svfiprintf_r+0x130>
 800f602:	9105      	str	r1, [sp, #20]
 800f604:	e7c4      	b.n	800f590 <_svfiprintf_r+0x130>
 800f606:	fb0c 2101 	mla	r1, ip, r1, r2
 800f60a:	4604      	mov	r4, r0
 800f60c:	2301      	movs	r3, #1
 800f60e:	e7f0      	b.n	800f5f2 <_svfiprintf_r+0x192>
 800f610:	ab03      	add	r3, sp, #12
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	462a      	mov	r2, r5
 800f616:	4b0e      	ldr	r3, [pc, #56]	@ (800f650 <_svfiprintf_r+0x1f0>)
 800f618:	a904      	add	r1, sp, #16
 800f61a:	4638      	mov	r0, r7
 800f61c:	f3af 8000 	nop.w
 800f620:	1c42      	adds	r2, r0, #1
 800f622:	4606      	mov	r6, r0
 800f624:	d1d6      	bne.n	800f5d4 <_svfiprintf_r+0x174>
 800f626:	89ab      	ldrh	r3, [r5, #12]
 800f628:	065b      	lsls	r3, r3, #25
 800f62a:	f53f af2d 	bmi.w	800f488 <_svfiprintf_r+0x28>
 800f62e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f630:	e72c      	b.n	800f48c <_svfiprintf_r+0x2c>
 800f632:	ab03      	add	r3, sp, #12
 800f634:	9300      	str	r3, [sp, #0]
 800f636:	462a      	mov	r2, r5
 800f638:	4b05      	ldr	r3, [pc, #20]	@ (800f650 <_svfiprintf_r+0x1f0>)
 800f63a:	a904      	add	r1, sp, #16
 800f63c:	4638      	mov	r0, r7
 800f63e:	f000 f879 	bl	800f734 <_printf_i>
 800f642:	e7ed      	b.n	800f620 <_svfiprintf_r+0x1c0>
 800f644:	080103f4 	.word	0x080103f4
 800f648:	080103fe 	.word	0x080103fe
 800f64c:	00000000 	.word	0x00000000
 800f650:	0800f3a9 	.word	0x0800f3a9
 800f654:	080103fa 	.word	0x080103fa

0800f658 <_printf_common>:
 800f658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f65c:	4616      	mov	r6, r2
 800f65e:	4698      	mov	r8, r3
 800f660:	688a      	ldr	r2, [r1, #8]
 800f662:	690b      	ldr	r3, [r1, #16]
 800f664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f668:	4293      	cmp	r3, r2
 800f66a:	bfb8      	it	lt
 800f66c:	4613      	movlt	r3, r2
 800f66e:	6033      	str	r3, [r6, #0]
 800f670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f674:	4607      	mov	r7, r0
 800f676:	460c      	mov	r4, r1
 800f678:	b10a      	cbz	r2, 800f67e <_printf_common+0x26>
 800f67a:	3301      	adds	r3, #1
 800f67c:	6033      	str	r3, [r6, #0]
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	0699      	lsls	r1, r3, #26
 800f682:	bf42      	ittt	mi
 800f684:	6833      	ldrmi	r3, [r6, #0]
 800f686:	3302      	addmi	r3, #2
 800f688:	6033      	strmi	r3, [r6, #0]
 800f68a:	6825      	ldr	r5, [r4, #0]
 800f68c:	f015 0506 	ands.w	r5, r5, #6
 800f690:	d106      	bne.n	800f6a0 <_printf_common+0x48>
 800f692:	f104 0a19 	add.w	sl, r4, #25
 800f696:	68e3      	ldr	r3, [r4, #12]
 800f698:	6832      	ldr	r2, [r6, #0]
 800f69a:	1a9b      	subs	r3, r3, r2
 800f69c:	42ab      	cmp	r3, r5
 800f69e:	dc26      	bgt.n	800f6ee <_printf_common+0x96>
 800f6a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f6a4:	6822      	ldr	r2, [r4, #0]
 800f6a6:	3b00      	subs	r3, #0
 800f6a8:	bf18      	it	ne
 800f6aa:	2301      	movne	r3, #1
 800f6ac:	0692      	lsls	r2, r2, #26
 800f6ae:	d42b      	bmi.n	800f708 <_printf_common+0xb0>
 800f6b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f6b4:	4641      	mov	r1, r8
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	47c8      	blx	r9
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	d01e      	beq.n	800f6fc <_printf_common+0xa4>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	6922      	ldr	r2, [r4, #16]
 800f6c2:	f003 0306 	and.w	r3, r3, #6
 800f6c6:	2b04      	cmp	r3, #4
 800f6c8:	bf02      	ittt	eq
 800f6ca:	68e5      	ldreq	r5, [r4, #12]
 800f6cc:	6833      	ldreq	r3, [r6, #0]
 800f6ce:	1aed      	subeq	r5, r5, r3
 800f6d0:	68a3      	ldr	r3, [r4, #8]
 800f6d2:	bf0c      	ite	eq
 800f6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6d8:	2500      	movne	r5, #0
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	bfc4      	itt	gt
 800f6de:	1a9b      	subgt	r3, r3, r2
 800f6e0:	18ed      	addgt	r5, r5, r3
 800f6e2:	2600      	movs	r6, #0
 800f6e4:	341a      	adds	r4, #26
 800f6e6:	42b5      	cmp	r5, r6
 800f6e8:	d11a      	bne.n	800f720 <_printf_common+0xc8>
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	e008      	b.n	800f700 <_printf_common+0xa8>
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	4652      	mov	r2, sl
 800f6f2:	4641      	mov	r1, r8
 800f6f4:	4638      	mov	r0, r7
 800f6f6:	47c8      	blx	r9
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	d103      	bne.n	800f704 <_printf_common+0xac>
 800f6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f704:	3501      	adds	r5, #1
 800f706:	e7c6      	b.n	800f696 <_printf_common+0x3e>
 800f708:	18e1      	adds	r1, r4, r3
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	2030      	movs	r0, #48	@ 0x30
 800f70e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f712:	4422      	add	r2, r4
 800f714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f71c:	3302      	adds	r3, #2
 800f71e:	e7c7      	b.n	800f6b0 <_printf_common+0x58>
 800f720:	2301      	movs	r3, #1
 800f722:	4622      	mov	r2, r4
 800f724:	4641      	mov	r1, r8
 800f726:	4638      	mov	r0, r7
 800f728:	47c8      	blx	r9
 800f72a:	3001      	adds	r0, #1
 800f72c:	d0e6      	beq.n	800f6fc <_printf_common+0xa4>
 800f72e:	3601      	adds	r6, #1
 800f730:	e7d9      	b.n	800f6e6 <_printf_common+0x8e>
	...

0800f734 <_printf_i>:
 800f734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f738:	7e0f      	ldrb	r7, [r1, #24]
 800f73a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f73c:	2f78      	cmp	r7, #120	@ 0x78
 800f73e:	4691      	mov	r9, r2
 800f740:	4680      	mov	r8, r0
 800f742:	460c      	mov	r4, r1
 800f744:	469a      	mov	sl, r3
 800f746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f74a:	d807      	bhi.n	800f75c <_printf_i+0x28>
 800f74c:	2f62      	cmp	r7, #98	@ 0x62
 800f74e:	d80a      	bhi.n	800f766 <_printf_i+0x32>
 800f750:	2f00      	cmp	r7, #0
 800f752:	f000 80d2 	beq.w	800f8fa <_printf_i+0x1c6>
 800f756:	2f58      	cmp	r7, #88	@ 0x58
 800f758:	f000 80b9 	beq.w	800f8ce <_printf_i+0x19a>
 800f75c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f764:	e03a      	b.n	800f7dc <_printf_i+0xa8>
 800f766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f76a:	2b15      	cmp	r3, #21
 800f76c:	d8f6      	bhi.n	800f75c <_printf_i+0x28>
 800f76e:	a101      	add	r1, pc, #4	@ (adr r1, 800f774 <_printf_i+0x40>)
 800f770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f774:	0800f7cd 	.word	0x0800f7cd
 800f778:	0800f7e1 	.word	0x0800f7e1
 800f77c:	0800f75d 	.word	0x0800f75d
 800f780:	0800f75d 	.word	0x0800f75d
 800f784:	0800f75d 	.word	0x0800f75d
 800f788:	0800f75d 	.word	0x0800f75d
 800f78c:	0800f7e1 	.word	0x0800f7e1
 800f790:	0800f75d 	.word	0x0800f75d
 800f794:	0800f75d 	.word	0x0800f75d
 800f798:	0800f75d 	.word	0x0800f75d
 800f79c:	0800f75d 	.word	0x0800f75d
 800f7a0:	0800f8e1 	.word	0x0800f8e1
 800f7a4:	0800f80b 	.word	0x0800f80b
 800f7a8:	0800f89b 	.word	0x0800f89b
 800f7ac:	0800f75d 	.word	0x0800f75d
 800f7b0:	0800f75d 	.word	0x0800f75d
 800f7b4:	0800f903 	.word	0x0800f903
 800f7b8:	0800f75d 	.word	0x0800f75d
 800f7bc:	0800f80b 	.word	0x0800f80b
 800f7c0:	0800f75d 	.word	0x0800f75d
 800f7c4:	0800f75d 	.word	0x0800f75d
 800f7c8:	0800f8a3 	.word	0x0800f8a3
 800f7cc:	6833      	ldr	r3, [r6, #0]
 800f7ce:	1d1a      	adds	r2, r3, #4
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	6032      	str	r2, [r6, #0]
 800f7d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e09d      	b.n	800f91c <_printf_i+0x1e8>
 800f7e0:	6833      	ldr	r3, [r6, #0]
 800f7e2:	6820      	ldr	r0, [r4, #0]
 800f7e4:	1d19      	adds	r1, r3, #4
 800f7e6:	6031      	str	r1, [r6, #0]
 800f7e8:	0606      	lsls	r6, r0, #24
 800f7ea:	d501      	bpl.n	800f7f0 <_printf_i+0xbc>
 800f7ec:	681d      	ldr	r5, [r3, #0]
 800f7ee:	e003      	b.n	800f7f8 <_printf_i+0xc4>
 800f7f0:	0645      	lsls	r5, r0, #25
 800f7f2:	d5fb      	bpl.n	800f7ec <_printf_i+0xb8>
 800f7f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f7f8:	2d00      	cmp	r5, #0
 800f7fa:	da03      	bge.n	800f804 <_printf_i+0xd0>
 800f7fc:	232d      	movs	r3, #45	@ 0x2d
 800f7fe:	426d      	negs	r5, r5
 800f800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f804:	4859      	ldr	r0, [pc, #356]	@ (800f96c <_printf_i+0x238>)
 800f806:	230a      	movs	r3, #10
 800f808:	e011      	b.n	800f82e <_printf_i+0xfa>
 800f80a:	6821      	ldr	r1, [r4, #0]
 800f80c:	6833      	ldr	r3, [r6, #0]
 800f80e:	0608      	lsls	r0, r1, #24
 800f810:	f853 5b04 	ldr.w	r5, [r3], #4
 800f814:	d402      	bmi.n	800f81c <_printf_i+0xe8>
 800f816:	0649      	lsls	r1, r1, #25
 800f818:	bf48      	it	mi
 800f81a:	b2ad      	uxthmi	r5, r5
 800f81c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f81e:	4853      	ldr	r0, [pc, #332]	@ (800f96c <_printf_i+0x238>)
 800f820:	6033      	str	r3, [r6, #0]
 800f822:	bf14      	ite	ne
 800f824:	230a      	movne	r3, #10
 800f826:	2308      	moveq	r3, #8
 800f828:	2100      	movs	r1, #0
 800f82a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f82e:	6866      	ldr	r6, [r4, #4]
 800f830:	60a6      	str	r6, [r4, #8]
 800f832:	2e00      	cmp	r6, #0
 800f834:	bfa2      	ittt	ge
 800f836:	6821      	ldrge	r1, [r4, #0]
 800f838:	f021 0104 	bicge.w	r1, r1, #4
 800f83c:	6021      	strge	r1, [r4, #0]
 800f83e:	b90d      	cbnz	r5, 800f844 <_printf_i+0x110>
 800f840:	2e00      	cmp	r6, #0
 800f842:	d04b      	beq.n	800f8dc <_printf_i+0x1a8>
 800f844:	4616      	mov	r6, r2
 800f846:	fbb5 f1f3 	udiv	r1, r5, r3
 800f84a:	fb03 5711 	mls	r7, r3, r1, r5
 800f84e:	5dc7      	ldrb	r7, [r0, r7]
 800f850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f854:	462f      	mov	r7, r5
 800f856:	42bb      	cmp	r3, r7
 800f858:	460d      	mov	r5, r1
 800f85a:	d9f4      	bls.n	800f846 <_printf_i+0x112>
 800f85c:	2b08      	cmp	r3, #8
 800f85e:	d10b      	bne.n	800f878 <_printf_i+0x144>
 800f860:	6823      	ldr	r3, [r4, #0]
 800f862:	07df      	lsls	r7, r3, #31
 800f864:	d508      	bpl.n	800f878 <_printf_i+0x144>
 800f866:	6923      	ldr	r3, [r4, #16]
 800f868:	6861      	ldr	r1, [r4, #4]
 800f86a:	4299      	cmp	r1, r3
 800f86c:	bfde      	ittt	le
 800f86e:	2330      	movle	r3, #48	@ 0x30
 800f870:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f874:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f878:	1b92      	subs	r2, r2, r6
 800f87a:	6122      	str	r2, [r4, #16]
 800f87c:	f8cd a000 	str.w	sl, [sp]
 800f880:	464b      	mov	r3, r9
 800f882:	aa03      	add	r2, sp, #12
 800f884:	4621      	mov	r1, r4
 800f886:	4640      	mov	r0, r8
 800f888:	f7ff fee6 	bl	800f658 <_printf_common>
 800f88c:	3001      	adds	r0, #1
 800f88e:	d14a      	bne.n	800f926 <_printf_i+0x1f2>
 800f890:	f04f 30ff 	mov.w	r0, #4294967295
 800f894:	b004      	add	sp, #16
 800f896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89a:	6823      	ldr	r3, [r4, #0]
 800f89c:	f043 0320 	orr.w	r3, r3, #32
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	4833      	ldr	r0, [pc, #204]	@ (800f970 <_printf_i+0x23c>)
 800f8a4:	2778      	movs	r7, #120	@ 0x78
 800f8a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f8aa:	6823      	ldr	r3, [r4, #0]
 800f8ac:	6831      	ldr	r1, [r6, #0]
 800f8ae:	061f      	lsls	r7, r3, #24
 800f8b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f8b4:	d402      	bmi.n	800f8bc <_printf_i+0x188>
 800f8b6:	065f      	lsls	r7, r3, #25
 800f8b8:	bf48      	it	mi
 800f8ba:	b2ad      	uxthmi	r5, r5
 800f8bc:	6031      	str	r1, [r6, #0]
 800f8be:	07d9      	lsls	r1, r3, #31
 800f8c0:	bf44      	itt	mi
 800f8c2:	f043 0320 	orrmi.w	r3, r3, #32
 800f8c6:	6023      	strmi	r3, [r4, #0]
 800f8c8:	b11d      	cbz	r5, 800f8d2 <_printf_i+0x19e>
 800f8ca:	2310      	movs	r3, #16
 800f8cc:	e7ac      	b.n	800f828 <_printf_i+0xf4>
 800f8ce:	4827      	ldr	r0, [pc, #156]	@ (800f96c <_printf_i+0x238>)
 800f8d0:	e7e9      	b.n	800f8a6 <_printf_i+0x172>
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	f023 0320 	bic.w	r3, r3, #32
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	e7f6      	b.n	800f8ca <_printf_i+0x196>
 800f8dc:	4616      	mov	r6, r2
 800f8de:	e7bd      	b.n	800f85c <_printf_i+0x128>
 800f8e0:	6833      	ldr	r3, [r6, #0]
 800f8e2:	6825      	ldr	r5, [r4, #0]
 800f8e4:	6961      	ldr	r1, [r4, #20]
 800f8e6:	1d18      	adds	r0, r3, #4
 800f8e8:	6030      	str	r0, [r6, #0]
 800f8ea:	062e      	lsls	r6, r5, #24
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	d501      	bpl.n	800f8f4 <_printf_i+0x1c0>
 800f8f0:	6019      	str	r1, [r3, #0]
 800f8f2:	e002      	b.n	800f8fa <_printf_i+0x1c6>
 800f8f4:	0668      	lsls	r0, r5, #25
 800f8f6:	d5fb      	bpl.n	800f8f0 <_printf_i+0x1bc>
 800f8f8:	8019      	strh	r1, [r3, #0]
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	6123      	str	r3, [r4, #16]
 800f8fe:	4616      	mov	r6, r2
 800f900:	e7bc      	b.n	800f87c <_printf_i+0x148>
 800f902:	6833      	ldr	r3, [r6, #0]
 800f904:	1d1a      	adds	r2, r3, #4
 800f906:	6032      	str	r2, [r6, #0]
 800f908:	681e      	ldr	r6, [r3, #0]
 800f90a:	6862      	ldr	r2, [r4, #4]
 800f90c:	2100      	movs	r1, #0
 800f90e:	4630      	mov	r0, r6
 800f910:	f7f0 fc76 	bl	8000200 <memchr>
 800f914:	b108      	cbz	r0, 800f91a <_printf_i+0x1e6>
 800f916:	1b80      	subs	r0, r0, r6
 800f918:	6060      	str	r0, [r4, #4]
 800f91a:	6863      	ldr	r3, [r4, #4]
 800f91c:	6123      	str	r3, [r4, #16]
 800f91e:	2300      	movs	r3, #0
 800f920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f924:	e7aa      	b.n	800f87c <_printf_i+0x148>
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	4632      	mov	r2, r6
 800f92a:	4649      	mov	r1, r9
 800f92c:	4640      	mov	r0, r8
 800f92e:	47d0      	blx	sl
 800f930:	3001      	adds	r0, #1
 800f932:	d0ad      	beq.n	800f890 <_printf_i+0x15c>
 800f934:	6823      	ldr	r3, [r4, #0]
 800f936:	079b      	lsls	r3, r3, #30
 800f938:	d413      	bmi.n	800f962 <_printf_i+0x22e>
 800f93a:	68e0      	ldr	r0, [r4, #12]
 800f93c:	9b03      	ldr	r3, [sp, #12]
 800f93e:	4298      	cmp	r0, r3
 800f940:	bfb8      	it	lt
 800f942:	4618      	movlt	r0, r3
 800f944:	e7a6      	b.n	800f894 <_printf_i+0x160>
 800f946:	2301      	movs	r3, #1
 800f948:	4632      	mov	r2, r6
 800f94a:	4649      	mov	r1, r9
 800f94c:	4640      	mov	r0, r8
 800f94e:	47d0      	blx	sl
 800f950:	3001      	adds	r0, #1
 800f952:	d09d      	beq.n	800f890 <_printf_i+0x15c>
 800f954:	3501      	adds	r5, #1
 800f956:	68e3      	ldr	r3, [r4, #12]
 800f958:	9903      	ldr	r1, [sp, #12]
 800f95a:	1a5b      	subs	r3, r3, r1
 800f95c:	42ab      	cmp	r3, r5
 800f95e:	dcf2      	bgt.n	800f946 <_printf_i+0x212>
 800f960:	e7eb      	b.n	800f93a <_printf_i+0x206>
 800f962:	2500      	movs	r5, #0
 800f964:	f104 0619 	add.w	r6, r4, #25
 800f968:	e7f5      	b.n	800f956 <_printf_i+0x222>
 800f96a:	bf00      	nop
 800f96c:	08010405 	.word	0x08010405
 800f970:	08010416 	.word	0x08010416

0800f974 <memmove>:
 800f974:	4288      	cmp	r0, r1
 800f976:	b510      	push	{r4, lr}
 800f978:	eb01 0402 	add.w	r4, r1, r2
 800f97c:	d902      	bls.n	800f984 <memmove+0x10>
 800f97e:	4284      	cmp	r4, r0
 800f980:	4623      	mov	r3, r4
 800f982:	d807      	bhi.n	800f994 <memmove+0x20>
 800f984:	1e43      	subs	r3, r0, #1
 800f986:	42a1      	cmp	r1, r4
 800f988:	d008      	beq.n	800f99c <memmove+0x28>
 800f98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f98e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f992:	e7f8      	b.n	800f986 <memmove+0x12>
 800f994:	4402      	add	r2, r0
 800f996:	4601      	mov	r1, r0
 800f998:	428a      	cmp	r2, r1
 800f99a:	d100      	bne.n	800f99e <memmove+0x2a>
 800f99c:	bd10      	pop	{r4, pc}
 800f99e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9a6:	e7f7      	b.n	800f998 <memmove+0x24>

0800f9a8 <_realloc_r>:
 800f9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ac:	4680      	mov	r8, r0
 800f9ae:	4615      	mov	r5, r2
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	b921      	cbnz	r1, 800f9be <_realloc_r+0x16>
 800f9b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	f7ff bbad 	b.w	800f118 <_malloc_r>
 800f9be:	b92a      	cbnz	r2, 800f9cc <_realloc_r+0x24>
 800f9c0:	f7ff fca8 	bl	800f314 <_free_r>
 800f9c4:	2400      	movs	r4, #0
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9cc:	f000 f81a 	bl	800fa04 <_malloc_usable_size_r>
 800f9d0:	4285      	cmp	r5, r0
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	d802      	bhi.n	800f9dc <_realloc_r+0x34>
 800f9d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9da:	d8f4      	bhi.n	800f9c6 <_realloc_r+0x1e>
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4640      	mov	r0, r8
 800f9e0:	f7ff fb9a 	bl	800f118 <_malloc_r>
 800f9e4:	4607      	mov	r7, r0
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d0ec      	beq.n	800f9c4 <_realloc_r+0x1c>
 800f9ea:	42b5      	cmp	r5, r6
 800f9ec:	462a      	mov	r2, r5
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	bf28      	it	cs
 800f9f2:	4632      	movcs	r2, r6
 800f9f4:	f7ff fc80 	bl	800f2f8 <memcpy>
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	f7ff fc8a 	bl	800f314 <_free_r>
 800fa00:	463c      	mov	r4, r7
 800fa02:	e7e0      	b.n	800f9c6 <_realloc_r+0x1e>

0800fa04 <_malloc_usable_size_r>:
 800fa04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa08:	1f18      	subs	r0, r3, #4
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	bfbc      	itt	lt
 800fa0e:	580b      	ldrlt	r3, [r1, r0]
 800fa10:	18c0      	addlt	r0, r0, r3
 800fa12:	4770      	bx	lr

0800fa14 <_init>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	bf00      	nop
 800fa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa1a:	bc08      	pop	{r3}
 800fa1c:	469e      	mov	lr, r3
 800fa1e:	4770      	bx	lr

0800fa20 <_fini>:
 800fa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa22:	bf00      	nop
 800fa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa26:	bc08      	pop	{r3}
 800fa28:	469e      	mov	lr, r3
 800fa2a:	4770      	bx	lr
